{"version":3,"sources":["data/enums/Direction.ts","data/enums/PopupWindowType.ts","settings/Settings.ts","data/enums/LabelType.ts","utils/VirtualListUtil.ts","utils/NumberUtil.ts","utils/RectUtil.ts","views/Common/VirtualList/VirtualList.tsx","logic/imageRepository/ImageLoadManager.ts","store/Actions.ts","logic/imageRepository/ImageRepository.ts","store/labels/actionCreators.ts","data/enums/ContextType.ts","utils/FileUtil.ts","store/selectors/AISelector.ts","logic/helpers/CSSHelper.ts","views/EditorView/SideNavigationBar/ImagePreview/ImagePreview.tsx","store/general/actionCreators.ts","staticModels/EditorModel.ts","utils/UnitUtil.ts","data/enums/CustomCursorStyle.ts","utils/DrawUtil.ts","utils/PointUtil.ts","settings/RenderEngineSettings.ts","store/selectors/LabelsSelector.ts","data/enums/EventType.ts","utils/MouseEventUtil.ts","data/enums/LabelStatus.ts","store/selectors/GeneralSelector.ts","logic/render/BaseRenderEngine.ts","utils/LineUtil.ts","utils/RenderEngineUtil.ts","utils/LabelUtil.ts","logic/render/RectRenderEngine.ts","utils/CanvasUtil.ts","logic/render/PointRenderEngine.ts","logic/render/PolygonRenderEngine.ts","settings/ViewPointSettings.ts","utils/ImageUtil.ts","data/enums/ProjectType.ts","utils/SizeUtil.ts","utils/DirectionUtil.ts","logic/actions/ViewPortActions.ts","logic/render/PrimaryEditorRenderEngine.ts","data/enums/LineAnchorType.ts","logic/helpers/ViewPortHelper.ts","logic/render/LineRenderEngine.ts","logic/actions/EditorActions.ts","logic/context/BaseContext.ts","logic/actions/ImageActions.ts","utils/PlatformUtil.ts","logic/actions/LabelActions.ts","logic/context/EditorContext.ts","logic/actions/PopupActions.ts","logic/context/PopupContext.ts","logic/context/ContextManager.ts","views/EditorView/SideNavigationBar/ImagesList/ImagesList.tsx","data/info/LabelToolkitData.ts","views/Common/ImageButton/ImageButton.tsx","views/EditorView/SideNavigationBar/LabelInputField/LabelInputField.tsx","views/EditorView/SideNavigationBar/EmptyLabelList/EmptyLabelList.tsx","views/EditorView/SideNavigationBar/RectLabelsList/RectLabelsList.tsx","views/EditorView/SideNavigationBar/PolygonLabelsList/PolygonLabelsList.tsx","views/EditorView/SideNavigationBar/TagLabelsList/TagLabelsList.tsx","views/EditorView/SideNavigationBar/LabelsToolkit/LabelsToolkit.tsx","views/EditorView/SideNavigationBar/SideNavigationBar.tsx","views/EditorView/VerticalEditorButton/VerticalEditorButton.tsx","utils/EditorUtil.ts","staticModels/PlatformModel.ts","views/EditorView/LabelControlPanel/LabelControlPanel.tsx","store/ai/actionCreators.ts","ai/FormDetector.ts","logic/actions/AIFormDetectionActions.ts","ai/MaskDetector.ts","logic/actions/AIMaskDetectionActions.ts","ai/PoseDetector.ts","logic/actions/AIPoseDetectionActions.ts","data/enums/AcceptedFileType.ts","logic/actions/AIActions.ts","views/EditorView/Editor/Editor.tsx","views/EditorView/EditorBottomNavigationBar/EditorBottomNavigationBar.tsx","views/EditorView/EditorTopNavigationBar/EditorTopNavigationBar.tsx","views/EditorView/EditorContainer/EditorContainer.tsx","views/EditorView/StateBar/StateBar.tsx","data/info/DropDownMenuData.ts","views/EditorView/TopNavigationBar/DropDownMenu/DropDownMenu.tsx","views/EditorView/TopNavigationBar/TopNavigationBar.tsx","views/EditorView/EditorView.tsx","data/info/EditorFeatureData.ts","views/Common/TextButton/TextButton.tsx","utils/ImageDataUtil.ts","data/enums/NotificationType.ts","views/MainView/ImagesDropZone/ImagesDropZone.tsx","views/MainView/MainView.tsx","views/PopupView/GenericYesNoPopup/GenericYesNoPopup.tsx","logic/import/yolo/YOLOErrors.ts","logic/import/yolo/YOLOUtils.ts","views/PopupView/LoadLabelNamesPopup/LoadLabelNamesPopup.tsx","views/PopupView/InsertLabelNamesPopup/ColorSelectorView/ColorSelectorView.tsx","utils/NotificationUtil.ts","data/enums/Notification.ts","data/info/NotificationsData.ts","views/PopupView/InsertLabelNamesPopup/InsertLabelNamesPopup.tsx","store/notifications/actionCreators.ts","views/PopupView/ExitProjectPopup/ExitProjectPopup.tsx","views/PopupView/LoadMoreImagesPopup/LoadMoreImagesPopup.tsx","logic/actions/AIObjectDetectionActions.ts","ai/ObjectDetector.ts","data/enums/AIModel.ts","views/PopupView/LoadModelPopup/LoadModelPopup.tsx","data/enums/AnnotationFormatType.ts","utils/ArrayUtil.ts","views/PopupView/SuggestLabelNamesPopup/SuggestLabelNamesPopup.tsx","views/PopupView/GenericLabelTypePopup/GenericLabelTypePopup.tsx","data/ImportFormatData.ts","views/EditorView/FeatureInProgress/FeatureInProgress.tsx","logic/import/coco/COCOErrors.ts","logic/import/AnnotationImporter.ts","logic/import/coco/COCOUtils.ts","logic/import/coco/COCOImporter.ts","logic/import/yolo/YOLOImporter.ts","data/ImporterSpecData.ts","views/NotificationsView/NotificationsView.tsx","views/PopupView/ImportLabelPopup/ImportLabelPopup.tsx","utils/XMLSanitizerUtil.ts","utils/ExporterUtil.ts","logic/export/RectLabelsExporter.ts","logic/export/polygon/VGGExporter.ts","logic/export/polygon/COCOExporter.ts","logic/export/polygon/PolygonLabelsExporter.ts","data/ExportFormatData.ts","views/PopupView/ExportLabelsPopup/ExportLabelPopup.tsx","views/PopupView/PopupView.tsx","data/info/SocialMediaData.ts","views/MobileMainView/MobileMainView.tsx","views/SizeItUpView/SizeItUpView.tsx","App.tsx","serviceWorker.ts","store/labels/reducer.ts","store/general/reducer.ts","store/ai/reducer.ts","store/notifications/reducer.ts","store/index.ts","utils/EnvironmentUtil.ts","logic/initializer/AppInitializer.ts","index.tsx","configureStore.ts"],"names":["Direction","PopupWindowType","Settings","GITHUB_URL","MEDIUM_URL","PATREON_URL","TOP_NAVIGATION_BAR_HEIGHT_PX","EDITOR_BOTTOM_NAVIGATION_BAR_HEIGHT_PX","EDITOR_TOP_NAVIGATION_BAR_HEIGHT_PX","SIDE_NAVIGATION_BAR_WIDTH_OPEN_PX","SIDE_NAVIGATION_BAR_WIDTH_CLOSED_PX","TOOLKIT_TAB_HEIGHT_PX","TOOLBOX_PANEL_WIDTH_PX","EDITOR_MIN_WIDTH","EDITOR_MIN_HEIGHT","PRIMARY_COLOR","SECONDARY_COLOR","DARK_THEME_FIRST_COLOR","DARK_THEME_SECOND_COLOR","DARK_THEME_THIRD_COLOR","DARK_THEME_FORTH_COLOR","CROSS_HAIR_THICKNESS_PX","CROSS_HAIR_COLOR","RESIZE_HANDLE_DIMENSION_PX","RESIZE_HANDLE_HOVER_DIMENSION_PX","CLOSEABLE_POPUPS","IMPORT_IMAGES","EXPORT_ANNOTATIONS","IMPORT_ANNOTATIONS","EXIT_PROJECT","UPDATE_LABEL","LABEL_COLORS_PALETTE","LabelType","VirtualListUtil","listSize","childSize","childCount","columnCount","Math","floor","width","height","ceil","gridSize","sizeFromGrid","max","calculateGridSize","horizontalMargin","calculateContentSize","anchors","i","rowCount","anchor","x","y","push","NumberUtil","value","min","RectUtil","rect","r1","r2","point","centerPoint","size","containerRect","ratio","getRatio","innerRectHeight","innerRectWidth","inputRect","rectAnchor","delta","RIGHT","BOTTOM_RIGHT","BOTTOM","TOP_RIGHT","TOP","TOP_LEFT","LEFT","BOTTOM_LEFT","scale","type","position","isPointInside","snapValueToRange","VirtualList","props","contentSize","childAnchors","scrollbars","calculate","calculateAnchorPoints","getVirtualListStyle","getVirtualListContentStyle","onScrollStart","setState","isScrolling","onScrollStop","onScroll","values","viewportRect","scrollLeft","scrollTop","getChildren","state","overScanHeight","overScan","viewportRectWithOverScan","reduce","children","index","childRect","Object","assign","isVisible","intersect","childStyle","left","top","concat","childRender","this","nextProps","nextState","nextContext","getValues","displayContent","className","style","ref","onScrollFrame","autoHide","React","Component","ImageLoadManager","fx","queue","a","setTimeout","runQueue","add","run","isRunning","runTasks","length","shift","Action","ImageRepository","id","image","repository","ids","images","zip","forEach","pair","storeImage","uuid","updateActiveImageIndex","activeImageIndex","UPDATE_ACTIVE_IMAGE_INDEX","payload","updateActiveLabelNameId","activeLabelNameId","UPDATE_ACTIVE_LABEL_NAME_ID","updateActiveLabelId","activeLabelId","UPDATE_ACTIVE_LABEL_ID","updateHighlightedLabelId","highlightedLabelId","UPDATE_HIGHLIGHTED_LABEL_ID","updateActiveLabelType","activeLabelType","UPDATE_ACTIVE_LABEL_TYPE","updateImageDataById","newImageData","UPDATE_IMAGE_DATA_BY_ID","addImageData","imageData","ADD_IMAGES_DATA","updateImageData","UPDATE_IMAGES_DATA","updateLabelNames","labels","UPDATE_LABEL_NAMES","updateFirstLabelCreatedFlag","firstLabelCreatedFlag","UPDATE_FIRST_LABEL_CREATED_FLAG","ContextType","FileUtil","fileData","Promise","resolve","reject","url","URL","createObjectURL","Image","src","onload","onerror","promises","map","loadImage","all","then","catch","error","reader","FileReader","onloadend","event","target","result","readAsText","readFile","name","parts","split","splitPath","fName","Array","keys","idx","AISelector","store","getState","ai","suggestedLabelList","rejectedSuggestedLabelList","isObjectDetectorLoaded","isPoseDetectorLoaded","isFormDetectorLoaded","isMaskDetectorLoaded","isAIDisabled","CSSHelper","isAIObjectDetectorModelLoaded","isAIFormDetectorModelLoaded","isAIMaskDetectorModelLoaded","ImagePreview","isLoading","loadStatus","getById","saveLoadedImagePartial","saveLoadedImage","handleLoadImageError","getStyle","imageRect","imageRatio","imagePosition","fitInsideRectWithRatio","getClassName","classNames","isSelected","addAndRun","isChecked","onClick","undefined","draggable","alt","color","getLeadingColor","loading","mapDispatchToProps","connect","updateActivePopupType","activePopupType","UPDATE_ACTIVE_POPUP_TYPE","updateCustomCursorStyle","customCursorStyle","UPDATE_CUSTOM_CURSOR_STYLE","updatePreventCustomCursorStatus","preventCustomCursor","UPDATE_PREVENT_CUSTOM_CURSOR_STATUS","updateProjectData","projectData","UPDATE_PROJECT_DATA","EditorModel","editor","canvas","mousePositionIndicator","cursor","viewPortScrollbars","primaryRenderingEngine","supportRenderingEngine","viewPortHelper","viewPortActionsDisabled","mousePositionOnViewPortContent","viewPortSize","defaultRenderImageRect","CustomCursorStyle","UnitUtil","angleDeg","PI","angleRad","DrawUtil","getContext","clearRect","startPoint","endPoint","thickness","ctx","save","strokeStyle","lineWidth","lineCap","beginPath","moveTo","lineTo","stroke","restore","fillStyle","fill","fillRect","globalCompositeOperation","anchorPoint","radius","startAngleRad","deg2rad","endAngleRad","arc","startAngleDeg","endAngleDeg","closePath","text","textSize","bold","align","textAlign","textBaseline","font","fillText","hex","alpha","r","parseInt","slice","g","b","PointUtil","p1","p2","factor","RenderEngineSettings","LINE_THICKNESS","lineActiveColor","defaultLineColor","CROSS_HAIR_LINE_COLOR","crossHairPadding","anchorSize","anchorHoverSize","suggestedAnchorDetectionSize","defaultAnchorColor","inactiveAnchorColor","DEFAULT_ANCHOR_COLOR","ACTIVE_ANCHOR_COLOR","INACTIVE_ANCHOR_COLOR","DEFAULT_LINE_COLOR","ACTIVE_LINE_COLOR","INACTIVE_LINE_COLOR","EventType","LabelsSelector","labelName","getLabelNames","find","imagesData","getActiveImageIndex","getImageDataByIndex","getImagesData","getActiveLabelId","getActiveImageData","labelRects","labelPoints","labelPolygons","labelLines","LabelStatus","MouseEventUtil","MOUSE_DOWN","MOUSE_UP","MOUSE_MOVE","GeneralSelector","general","activeContext","imageDragMode","crossHairVisible","zoom","enablePerClassColoration","BaseRenderEngine","labelType","data","getEventType","mouseMoveHandler","mouseUpHandler","mouseDownHandler","labelId","isActive","getEnablePerClassColorationStatus","getLabelNameById","LineUtil","l","p","start","end","abs","sqrt","pow","RenderEngineUtil","realImageSize","viewPortContentImageRect","viewPortContentSize","calculateImageScale","multiply","polygon","transferPointFromImageToViewPortContent","line","subtract","transferPointFromViewPortContentToImage","translate","scaleRect","translation","dispatch","DEFAULT","CANCEL","setValueBetweenPixels","topLeft","bottomRight","topLeftBetweenPixels","setPointBetweenPixels","bottomRightBetweenPixels","mouse","minX","maxX","minY","maxY","getDistanceFromLine","getRectWithCenterAndSize","LabelUtil","uuidv4","sample","isCreatedByAI","status","ACCEPTED","suggestedLabel","vertices","oldLabelNames","newLabelNames","missingIds","RectRenderEngine","startCreateRectPoint","startResizeRectAnchor","isMouseOverImage","isMouseOverCanvas","rectUnderMouse","getRectUnderMouse","calculateRectRelativeToActiveImage","anchorUnderMouse","getAnchorUnderMouseByRect","startRectResize","getHighlightedLabelId","startRectCreation","mousePositionSnapped","snapPointToRect","activeLabelRect","getActiveRectLabel","equals","addRectLabel","transferRectFromImageToViewPortContent","startAnchorPosition","resizeRect","scaledRect","labelRect","endRectTransformation","isInProgress","getActiveLabelNameId","createLabelRect","RECT","drawActiveRect","drawInactiveRect","drawCurrentlyCreatedRect","updateCursorStyle","mousePosition","activeRect","activeRectBetweenPixels","setRectBetweenPixels","lineColor","resolveLabelLineColor","drawRect","rectOnImage","transferRectFromViewPortContentToImage","displayAsActive","anchorColor","resolveLabelAnchorColor","renderRect","endAnchorPositionSnapped","rectBetweenPixels","drawRectWithFill","hexToRGB","mapRectToAnchors","center","handleRect","handleRectBetweenPixels","getImageDragModeStatus","getAnchorUnderMouse","MOVE","wrapDefaultCursorStyleInCancel","activeRectLabel","isMouseOverRectEdges","outerRectDelta","outerRect","expand","innerRectDelta","innerRect","rectAnchors","anchorRect","EditorActions","setViewPortActionsDisabledStatus","activatedAnchor","CanvasUtil","canvasRect","getBoundingClientRect","clientX","clientY","PointRenderEngine","addPointLabel","labelPoint","POINT","getLabelPointUnderMouse","pointOnCanvas","pointBetweenPixels","pointOnImage","activeLabelPoint","getActivePointLabel","pointSnapped","drawCircleWithFill","renderPoint","getSize","PolygonRenderEngine","activePath","resizeAnchorIndex","suggestedAnchorPositionOnCanvas","suggestedAnchorIndexInPolygon","POLYGON","isCreationInProgress","isMouseOverAnchor","addLabelAndFinishCreation","updateActivelyCreatedLabel","polygonUnderMouse","getPolygonUnderMouse","anchorIndex","indexUnderMouse","anchorOnCanvas","startExistingLabelResize","addSuggestedAnchorToPolygonLabel","isResizeInProgress","endExistingLabelResize","labelPolygon","pathOnCanvas","transferPolygonFromImageToViewPortContent","linesOnCanvas","mapPointsToLines","j","isMouseOverLine","getCenter","discardSuggestedPoint","drawExistingLabels","drawActivelyCreatedLabel","drawActivelyResizeLabel","drawSuggestedAnchor","CLOSE","ADD","standardizedPoints","path","lines","drawPolygonWithFill","drawLine","activeLabelPolygon","getActivePolygonLabel","snappedMousePosition","polygonOnCanvas","drawPolygon","suggestedAnchorRect","polygonOnImage","transferPolygonFromViewPortContentToImage","addPolygonLabel","finishLabelCreation","createLabelPolygon","applyResizeToPolygonLabel","activeLabel","newAnchorPositionOnImage","arr","newItem","points","ViewPointSettings","CANVAS_MIN_MARGIN_PX","MIN_ZOOM","MAX_ZOOM","ZOOM_STEP","TRANSLATION_STEP_PX","ProjectType","ImageUtil","SizeUtil","DirectionUtil","direction","CENTER","ViewPortActions","offsetWidth","offsetHeight","minMargin","realImageRect","viewPortWithMarginRect","viewPortWithoutMarginRect","defaultViewPortImageRect","scaledImageSize","getZoom","calculateViewPortContentSize","newCanvasSize","resizeCanvas","relativePosition","directionVector","convertDirectionToVector","translationVector","currentScrollPosition","getAbsoluteScrollPosition","nextScrollPosition","setScrollPosition","fullRender","currentZoom","currentRelativeScrollPosition","getRelativeScrollPosition","nextRelativeScrollPosition","setZoom","resizeViewPortContent","calculateAbsoluteScrollPosition","nextZoom","isValueInRange","UPDATE_ZOOM","LineAnchorType","PrimaryEditorRenderEngine","drawImage","calculateViewPortContentImageRect","renderCrossHair","shouldRenderCrossHair","isCrossHairVisible","getCrossHairVisibleStatus","isImageInDragMode","projectType","getProjectType","getActivePopupType","isCustomCursorBlocked","getPreventCustomCursorStatus","IMAGE_RECOGNITION","every","Boolean","ViewPortHelper","startScrollPosition","mouseStartPosition","absoluteViewPortContentScrollPosition","screenX","screenY","GRABBING","GRAB","currentMousePosition","mousePositionDelta","LineRenderEngine","lineCreationStartPoint","lineUpdateAnchorType","startNewLabelCreation","finishNewLabelCreation","mousePositionOnCanvasSnapped","lineOnCanvas","lineOnImage","transferLineFromViewPortContentToImage","labelLine","LINE","anchorTypeUnderMouse","getAnchorTypeUnderMouse","labelLineUnderMouse","getLineUnderMouse","startExistingLabelUpdate","endExistingLabelUpdate","transferLineFromImageToViewPortContent","activeLabelLine","getActiveLineLabel","lineToDraw","START","END","standardizedLine","getPoints","anchorType","applyUpdateToLineLabel","lineLabel","mousePositionOnImage","mountSupportRenderingEngine","clearCanvas","render","getEditorData","activeKeyCombo","ContextManager","getActiveCombo","display","mousePositionOverViewPortContent","getMousePositionOnCanvasFromEvent","viewPortContentScrollPosition","mousePositionOverViewPort","includes","getCustomCursorStyle","mousePositionOverImage","round","innerHTML","BaseContext","actions","ImageActions","currentImageIndex","getImageByIndex","imageCount","labelIndex","labelNames","mapNewImageData","getActiveLabelType","labelRectangle","labelNameIds","remove","element","PlatformUtil","userAgent","mobileDetect","MobileDetect","manufacturer","mobile","browser","os","toLowerCase","match","LabelActions","activeImageData","deleteImageLabelById","imageId","deletePointLabelById","deleteRectLabelById","deletePolygonLabelById","labelRectId","getImageDataById","filter","currentLabel","labelPointId","labelLineId","labelPolygonId","labelNamesIds","newImagesData","removeLabelNamesFromImageData","labelNameId","label","EditorContext","keyCombo","action","editorData","cancelLabelCreation","isMac","window","navigator","getPreviousImage","getNextImage","zoomIn","zoomOut","preventDefault","translateViewPortPosition","deleteActiveLabel","setActiveLabelOnActiveImage","PopupActions","restoreCtx","PopupContext","popupType","close","activeCombo","addEventListener","KEY_DOWN","onDown","KEY_UP","onUp","FOCUS","onFocus","context","activeCtx","getActiveContext","contextHistory","updateCtx","UPDATE_CONTEXT","EDITOR","getActions","POPUP","pop","keyCode","getKeyCodeFromEvent","isInCombo","addToCombo","execute","removeFromCombo","hotKey","matchCombo","indexOf","splice","key","combo1","combo2","isEmpty","xor","ImagesList","imagesListRef","updateListSize","listBoundingBox","isImageChecked","onClickHandler","renderImagePreview","RESIZE","removeEventListener","switchCtx","LEFT_NAVBAR","LabelToolkitData","headerText","imageSrc","imageAlt","OBJECT_DETECTION","ImageButton","buttonSize","padding","href","isDisabled","externalClassName","imagePadding","buttonStyle","imageStyle","maxWidth","maxHeight","stopPropagation","rel","LabelInputField","dropdownOptionHeight","dropdownOptionCount","dropdownMargin","dropdownLabel","dropdown","openDropdown","isOpen","closeDropdown","clientRect","dropDownRect","getDropdownStyle","options","innerHeight","bottom","getDropdownOptions","option","onSelectLabel","mouseEnterHandler","mouseLeaveHandler","animate","requestAnimationFrame","isHighlighted","onDelete","onMouseEnter","onMouseLeave","renderTrackHorizontal","labelBefore","labelAfter","before","after","listStyle","listStyleContent","updateRectLabel","onClickCapture","findLast","updatePolygonLabel","addNewOnClick","onTagClick","LabelsToolkit","labelsToolkitRef","tabs","updateToolkitSize","headerClickHandler","activeTab","renderChildren","tabData","activeTabContentHeight","baseClass","header","content","RIGHT_NAVBAR","SideNavigationBar","isWithContext","renderContent","renderCompanion","VerticalEditorButton","EditorUtil","getIndicator","cursorStyle","getCursorStyle","PlatformModel","mobileDeviceData","isSafari","isFirefox","labelData","useState","setIsActiveStatus","isPanelActive","labelExistsInLabelNames","updateSuggestedLabelList","labelList","UPDATE_SUGGESTED_LABEL_LIST","FormDetector","callback","console","log","UPDATE_FORM_DETECTOR_STATUS","AIFormDetectionActions","detectRectsForActiveImage","elephant","imgCanvas","document","createElement","imgContext","imageBlob","Blob","toBlob","formData","FormData","append","get","fetch","method","body","submit","response","json","predictions","Error","detectRects","isVisitedByFormDetector","LOADER","predict","suggestedLabelNames","extractNewSuggestedLabelNames","rejectedLabelNames","getRejectedSuggestedLabelList","newlySuggestedNames","AIActions","excludeRejectedLabelNames","SUGGEST_LABEL_NAMES","saveRectPredictions","predictedLabels","mapPredictionsToRectLabels","nextImageData","prediction","bbox","UNDECIDED","class","acc","MaskDetector","UPDATE_MASK_DETECTOR_STATUS","AIMaskDetectionActions","detectPolygonsForActiveImage","detectPolygons","isVisitedByMaskDetector","savePolygonPredictions","mapPredictionsToPolygonLabels","PoseDetector","posenet","architecture","outputStride","inputResolution","quantBytes","model","UPDATE_POSE_DETECTOR_STATUS","AIPoseDetectionActions","detectPoseForActiveImage","estimateMultiplePoses","AcceptedFileType","detectPoses","isVisitedByPoseDetector","isAIPoseDetectorModelLoaded","poses","savePosePredictions","mapPredictionsToPointLabels","keypoints","keypoint","part","item","pose","suggestedLabels","rejectedLabels","rejectAllSuggestedRectLabels","rejectAllSuggestedPointLabels","rejectAllSuggestedPolygonLabels","acceptAllSuggestedRectLabels","acceptAllSuggestedPointLabels","acceptAllSuggestedPolygonLabels","Editor","setActiveImage","detect","updateModelAndRender","setLoadingStatus","updateViewPortSize","updateDefaultViewPortImageRect","update","updateMousePositionIndicator","handleZoom","ctrlKey","metaKey","scrollSign","sign","deltaY","getOptionsPanels","positionOnImage","positionOnViewPort","onScrollbarsUpdate","scrollbarContent","newViewPortContentSize","scrollWidth","scrollHeight","isEqual","mountEventListeners","mountRenderEnginesAndHelpers","unmountEventListeners","prevProps","prevState","snapshot","swapSupportRenderingEngine","MOUSE_WHEEL","renderTrackVertical","onUpdate","onContextMenu","totalImageCount","BUTTON_SIZE","StyledTooltip","withStyles","theme","tooltip","backgroundColor","boxShadow","shadows","fontSize","Tooltip","getButtonWithTooltip","tooltipMessage","disableFocusListener","title","TransitionComponent","Fade","TransitionProps","timeout","placement","updateImageDragModeStatusAction","UPDATE_IMAGE_DRAG_MODE_STATUS","updateCrossHairVisibleStatusAction","UPDATE_CROSS_HAIR_VISIBLE_STATUS","setDefaultZoom","setOneForOneZoom","acceptAllSuggestedLabels","rejectAllSuggestedLabels","windowSize","leftTabStatus","setLeftTabStatus","rightTabStatus","setRightTabStatus","calculateEditorSize","leftTabWidth","rightTabWidth","leftSideBarButtonOnClick","rightSideBarButtonOnClick","onMouseDown","pointLabeledImages","currentCount","currentImage","rectLabeledImages","polygonLabeledImages","lineLabeledImages","tagLabeledImages","getProgress","DropDownMenuData","disabled","description","LOAD_AI_MODEL","updatePreventCustomCursorStatusAction","activeTabIdx","setActiveTabIdx","activeDropDownAnchor","setDropDownAnchor","onMouseEnterWindow","onMouseLeaveWindow","onMouseDownBeyondDropDown","classList","contains","wrapOnClick","getDropDownTab","tabIdx","offsetLeft","onTabClick","onMouseEnterTab","getDropDownWindow","updateActivePopupTypeAction","updateProjectDataAction","EditorFeatureData","displayText","TextButton","NotificationType","ImageDataUtil","isVisitedByObjectDetector","items","idArrangement","sort","missingImages","missingImagesFiles","loadImages","htmlImageElements","storeImages","updateActiveImageIndexAction","addImageDataAction","useDropzone","accept","IMAGE","acceptedFiles","getRootProps","getInputProps","startEditor","files","sortBy","file","createImageDataFromFileData","MainView","projectInProgress","projectCanceled","GenericYesNoPopup","acceptLabel","onAccept","skipAcceptButton","disableAcceptButton","rejectLabel","onReject","skipRejectButton","disableRejectButton","setMountStatus","useEffect","YOLOAnnotationsLoadingError","message","NoLabelNamesFileProvidedError","LabelNamesNotUniqueError","AnnotationsParsingError","imageName","YOLOUtils","replace","uniq","createLabelName","onSuccess","onFailure","evt","parseLabelsNamesFromString","rawAnnotations","imageSize","rawAnnotation","parseYOLOAnnotationFromString","components","validateYOLOAnnotationComponents","rectX","parseFloat","rectY","rectWidth","rectHeight","labelNamesCount","validateCoordinateValue","rawValue","floatValue","Number","isNaN","intValue","validateLabelIdx","updateLabels","labelsList","setLabelsList","invalidFileLoadedStatus","setInvalidFileLoadedStatus","TEXT","multiple","onDrop","loadLabelsList","INSERT_LABEL_NAMES","ColorSelectorView","Notification","NotificationUtil","ERROR","MESSAGE","WARNING","NotificationsDataMap","EMPTY_LABEL_NAME_ERROR","NON_UNIQUE_LABEL_NAMES_ERROR","StyledTextField","root","borderBottomColor","TextField","updateLabelNamesAction","updatePerClassColorationStatusAction","UPDATE_ENABLE_PER_CLASS_COLORATION_STATUS","submitNewNotificationAction","notification","SUBMIT_NEW_NOTIFICATION","isUpdate","setLabelNames","callbackWithLabelNamesValidation","createErrorNotification","addLabelNameCallback","safeAddLabelNameCallback","togglePerClassColorationCallback","onKeyUpCallback","labelInputs","autoComplete","autoFocus","margin","onKeyUp","onChange","InputLabelProps","shrink","changeLabelNameColorCallback","deleteLabelNameCallback","onCreateAcceptCallback","nonEmptyLabelNames","onUpdateAcceptCallback","labelNamesIdsDiff","removeLabelNames","LOAD_LABEL_NAMES","AIObjectDetectionActions","ObjectDetector","cocoSsd","UPDATE_OBJECT_DETECTOR_STATUS","AIModel","AnnotationFormatType","models","FORM_DETECTION","flag","MASK_DETECTION","LoadModelPopup","modelIsLoadingStatus","setModelIsLoadingStatus","selectedModelToLoad","updateSelectedModelToLoad","extractSelectedModel","getOptions","entry","selectedModel","nextSelectedModelToLoad","onSelect","POSE_DETECTION","loadModel","ArrayUtilAmbiguousMatchError","EmptyArrayError","NegativeIndexError","ArrayUtil","array","predicate","pass","fail","array1","array2","updateRejectedSuggestedLabelList","UPDATE_REJECTED_SUGGESTED_LABEL_LIST","selectAllFlag","setSelectAllFlag","getSuggestedLabelList","extractSelectedNames","extractUnselectedNames","extractNames","nextLabelNames","entryIndex","nextSelectAllFlag","toggleSelectableNameByIndex","autoHeight","getByInfiniteIndex","onLabelTypeChange","renderInternalContent","setLabelType","ImportFormatData","COCO","YOLO","FeatureInProgress","COCOAnnotationsLoadingError","COCOFormatValidationError","COCOAnnotationReadingError","COCOAnnotationDeserializationError","COCOAnnotationFileCountError","AnnotationImporter","filesData","COCOUtils","segmentation","segment","chunk","COCOImporter","inputImagesData","annotations","deserialize","applyLabels","annotationsObject","validateCocoFormat","categories","labelNameMap","mapCOCOCategories","cleanImageData","cleanAnnotations","imageDataPartition","partitionImageData","imageDataMap","mapImageData","annotation","image_id","iscrowd","category_id","bbox2rect","polygons","segmentation2vertices","resultImageData","arrange","JSON","parse","imageNames","file_name","partition","category","fileNameCOCOIdMap","missingKeys","requiredKeys","hasOwnProperty","YOLOImporter","sourceImagesData","filterFilesData","labelNameFile","annotationFiles","matchImagesWithAnnotations","relevantImageData","relevantAnnotations","labelNamesPromise","fileContent","missingImagesPromise","loadMissingImages","annotationFilesPromise","readFiles","annotationsRaw","applyAnnotations","injectImageDataWithAnnotations","functionalityPartitionResult","labelsFileName","imageIdentifiers","extractFileName","matchingPartitionResult","unzip","parseYOLOAnnotationsFromString","sourceImageData","annotatedImageData","NotificationState","Animation","ImporterSpecData","CSV","VGG","VOC","updateImageDataAction","updateActiveLabelTypeAction","resolveFormatType","possibleImportFormats","formatType","setFormatType","loadedLabelNames","setLoadedLabelNames","loadedImageData","setLoadedImageData","annotationsLoadedError","setAnnotationsLoadedError","import","onAnnotationLoadSuccess","onAnnotationsLoadFailure","exportFormatData","format","XMLSanitizerUtil","input","ExporterUtil","projectName","getProjectName","date","moment","fileName","blob","saveAs","RectLabelsExporter","exportFormatType","exportAsYOLO","exportAsVOC","exportAsCSV","JSZip","wrapRectLabelsIntoYOLO","generateAsync","getExportFileName","snapAndFix","toFixed","classIdx","findIndex","toString","rectCenter","rectSize","processedBBox","join","wrapRectLabelIntoYOLO","wrapImageIntoVOC","labelNamesList","wrapRectLabelsIntoVOC","sanitize","wrapRectLabelsIntoCSV","imageLabelData","VGGExporter","stringify","mapImagesDataToVGGObject","mapImageDataToVGGFileData","regionsData","mapImageDataToVGG","fileref","filename","base64_img_data","file_attributes","regions","validLabels","getValidPolygonLabels","shape_attributes","mapPolygonToVGG","region_attributes","all_points_x","all_points_y","COCOExporter","COCOObject","mapImagesDataToCOCOObject","getInfoComponent","getImagesComponent","getAnnotationsComponent","getCategoriesComponent","labelsMap","mapLabelsData","getCOCOSegmentation","getCOCOBbox","getCOCOArea","flatten","xMin","xMax","yMin","yMax","vertex","area","PolygonLabelsExporter","export","ExportFormatData","setExportFormatType","selectPopup","SocialMediaData","displayName","scrollPosition","getEditorFeatureTiles","features","topNavigationBar","Hide","Show","firstStage","secondStage","thirdStage","fourthStage","getSocialMediaButtons","SizeItUpView","deleteNotificationByIdAction","DELETE_NOTIFICATION_BY_ID","notifications","IDLE","notificationState","setNotificationState","IN","onClose","OUT","onAnimationEnd","animationName","DISPLAY","SUCCESS","FormDetectionLoaded","MaskDetectionLoaded","location","hostname","initialState","rootReducer","combineReducers","UPDATE_WINDOW_SIZE","UPDATE_DISABLED_AI_FLAG","EnvironmentUtil","process","AppInitializer","handleResize","detectDeviceParams","handleAccidentalPageExit","disableGenericScrollZoom","passive","disableUnwantedKeyBoardBehaviour","KEY_PRESS","init","onbeforeunload","isProd","returnValue","innerWidth","getMobileDeviceData","createStore","__REDUX_DEVTOOLS_EXTENSION__","inti","ReactDOM","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e3eb032b.chunk.js","sourcesContent":["export enum Direction {\r\n    TOP = \"TOP\",\r\n    BOTTOM = \"BOTTOM\",\r\n    LEFT = \"LEFT\",\r\n    RIGHT = \"RIGHT\",\r\n    TOP_RIGHT = \"TOP_RIGHT\",\r\n    TOP_LEFT = \"TOP_LEFT\",\r\n    BOTTOM_RIGHT = \"BOTTOM_RIGHT\",\r\n    BOTTOM_LEFT = \"BOTTOM_LEFT\",\r\n    CENTER = \"CENTER\"\r\n}","export enum PopupWindowType {\r\n    LOAD_LABEL_NAMES = 'LOAD_LABEL_NAMES',\r\n    UPDATE_LABEL = 'UPDATE_LABEL',\r\n    SUGGEST_LABEL_NAMES = 'SUGGEST_LABEL_NAMES',\r\n    IMPORT_IMAGES = 'IMPORT_IMAGES',\r\n    LOAD_AI_MODEL = 'LOAD_AI_MODEL',\r\n    EXPORT_ANNOTATIONS = 'EXPORT_ANNOTATIONS',\r\n    IMPORT_ANNOTATIONS = 'IMPORT_ANNOTATIONS',\r\n    INSERT_LABEL_NAMES = 'INSERT_LABEL_NAMES',\r\n    EXIT_PROJECT = 'EXIT_PROJECT',\r\n    LOADER = 'LOADER'\r\n}\r\n","import {PopupWindowType} from '../data/enums/PopupWindowType';\r\n\r\nexport class Settings {\r\n    public static readonly GITHUB_URL: string = 'https://github.com/SkalskiP';\r\n    public static readonly MEDIUM_URL: string = 'https://medium.com/@piotr.skalski92';\r\n    public static readonly PATREON_URL: string = 'https://www.patreon.com/make_sense';\r\n\r\n    public static readonly TOP_NAVIGATION_BAR_HEIGHT_PX: number = 35;\r\n    public static readonly EDITOR_BOTTOM_NAVIGATION_BAR_HEIGHT_PX: number = 40 + 1;\r\n    public static readonly EDITOR_TOP_NAVIGATION_BAR_HEIGHT_PX: number = 40 + 1;\r\n    public static readonly SIDE_NAVIGATION_BAR_WIDTH_CLOSED_PX: number = 23 + 1;\r\n    public static readonly SIDE_NAVIGATION_BAR_WIDTH_OPEN_PX: number = Settings.SIDE_NAVIGATION_BAR_WIDTH_CLOSED_PX + 300 + 1;\r\n    public static readonly TOOLKIT_TAB_HEIGHT_PX: number = 40;\r\n    public static readonly TOOLBOX_PANEL_WIDTH_PX: number = 50 + 1;\r\n\r\n    public static readonly EDITOR_MIN_WIDTH: number = 900;\r\n    public static readonly EDITOR_MIN_HEIGHT: number = 500;\r\n\r\n    public static readonly PRIMARY_COLOR: string = '#2af598';\r\n    public static readonly SECONDARY_COLOR: string = '#009efd';\r\n\r\n    public static readonly DARK_THEME_FIRST_COLOR: string = '#171717';\r\n    public static readonly DARK_THEME_SECOND_COLOR: string = '#282828';\r\n    public static readonly DARK_THEME_THIRD_COLOR: string = '#4c4c4c';\r\n    public static readonly DARK_THEME_FORTH_COLOR: string = '#262c2f';\r\n\r\n    public static readonly CROSS_HAIR_THICKNESS_PX: number = 1;\r\n    public static readonly CROSS_HAIR_COLOR: string = '#fff';\r\n\r\n    public static readonly RESIZE_HANDLE_DIMENSION_PX: number = 8;\r\n    public static readonly RESIZE_HANDLE_HOVER_DIMENSION_PX = 16;\r\n\r\n    public static readonly CLOSEABLE_POPUPS: PopupWindowType[] = [\r\n        PopupWindowType.IMPORT_IMAGES,\r\n        PopupWindowType.EXPORT_ANNOTATIONS,\r\n        PopupWindowType.IMPORT_ANNOTATIONS,\r\n        PopupWindowType.EXIT_PROJECT,\r\n        PopupWindowType.UPDATE_LABEL\r\n    ];\r\n\r\n    public static readonly LABEL_COLORS_PALETTE = [\r\n        '#ff3838',\r\n        '#ff9d97',\r\n        '#ff701f',\r\n        '#ffb21d',\r\n        '#cff231',\r\n        '#48f90a',\r\n        '#92cc17',\r\n        '#3ddb86',\r\n        '#1a9334',\r\n        '#00d4bb',\r\n        '#2c99a8',\r\n        '#00c2ff',\r\n        '#344593',\r\n        '#6473ff',\r\n        '#0018ec',\r\n        '#8438ff',\r\n        '#520085',\r\n        '#cb38ff',\r\n        '#ff95c8',\r\n        '#ff37c7'\r\n    ]\r\n}\r\n","export enum LabelType {\r\n    IMAGE_RECOGNITION = 'IMAGE RECOGNITION',\r\n    POINT = 'POINT',\r\n    RECT = 'RECT',\r\n    POLYGON = 'POLYGON',\r\n    LINE = 'LINE'\r\n}","import {ISize} from \"../interfaces/ISize\";\r\nimport {IPoint} from \"../interfaces/IPoint\";\r\n\r\nexport class VirtualListUtil {\r\n    public static calculateGridSize(listSize: ISize, childSize: ISize, childCount: number): ISize {\r\n        const columnCount: number = Math.floor(listSize.width / childSize.width);\r\n        const rowCount: number = Math.ceil(childCount / columnCount);\r\n        return {width: columnCount, height: rowCount};\r\n    }\r\n\r\n    public static calculateContentSize(listSize: ISize, childSize: ISize, gridSize: ISize): ISize {\r\n        const sizeFromGrid:ISize = {\r\n            width: childSize.width * gridSize.width,\r\n            height: childSize.height * gridSize.height\r\n        };\r\n\r\n        return {\r\n            width: Math.max(listSize.width, sizeFromGrid.width),\r\n            height: sizeFromGrid.height\r\n        }\r\n    }\r\n\r\n    public static calculateAnchorPoints(listSize: ISize, childSize: ISize, childCount: number): IPoint[] {\r\n        const gridSize: ISize = VirtualListUtil.calculateGridSize(listSize, childSize, childCount);\r\n        const contentWrapperSize: ISize = VirtualListUtil.calculateContentSize(listSize, childSize, gridSize);\r\n        const horizontalMargin = (contentWrapperSize.width - gridSize.width * childSize.width) / (gridSize.width + 1);\r\n\r\n        let anchors = [];\r\n        for (let i = 0; i < childCount; i++) {\r\n            const rowCount: number = Math.floor(i / gridSize.width);\r\n            const columnCount: number = i % gridSize.width;\r\n\r\n            const anchor: IPoint = {\r\n                x: rowCount * horizontalMargin + columnCount * childSize.width,\r\n                y: rowCount * childSize.height\r\n            };\r\n            anchors.push(anchor);\r\n        }\r\n        return anchors;\r\n    }\r\n}","export class NumberUtil {\r\n    public static snapValueToRange(value: number, min: number, max: number): number {\r\n        if (value < min)\r\n            return min;\r\n        if (value > max)\r\n            return max;\r\n        return value;\r\n    }\r\n\r\n    public static isValueInRange(value: number, min: number, max: number): boolean {\r\n        return value >= min && value <= max;\r\n    }\r\n}\r\n","import {IRect} from \"../interfaces/IRect\";\r\nimport {IPoint} from \"../interfaces/IPoint\";\r\nimport {ISize} from \"../interfaces/ISize\";\r\nimport {RectAnchor} from \"../data/RectAnchor\";\r\nimport {NumberUtil} from \"./NumberUtil\";\r\nimport {Direction} from \"../data/enums/Direction\";\r\n\r\nexport class RectUtil {\r\n    public static getRatio(rect: IRect): number {\r\n        if (!rect) return null;\r\n\r\n        return rect.width/rect.height\r\n    }\r\n\r\n    public static intersect(r1: IRect, r2: IRect) {\r\n        if (!r1 || !r2) return null;\r\n        return !(\r\n            r2.x > r1.x + r1.width ||\r\n            r2.x + r2.width < r1.x ||\r\n            r2.y > r1.y + r1.height ||\r\n            r2.y + r2.height < r1.y\r\n        );\r\n    }\r\n\r\n    public static isPointInside(rect: IRect, point: IPoint): boolean {\r\n        if (!rect || !point) return null;\r\n        return (\r\n            rect.x < point.x &&\r\n            rect.x + rect.width > point.x &&\r\n            rect.y < point.y &&\r\n            rect.y + rect.height > point.y\r\n        )\r\n    }\r\n\r\n    public static getRectWithCenterAndSize(centerPoint: IPoint, size: ISize): IRect {\r\n        return {\r\n            x: centerPoint.x - 0.5 * size.width,\r\n            y: centerPoint.y - 0.5 * size.height,\r\n            ...size\r\n        }\r\n    }\r\n\r\n    public static fitInsideRectWithRatio(containerRect: IRect, ratio: number): IRect {\r\n        const containerRectRatio = RectUtil.getRatio(containerRect);\r\n        if (containerRectRatio < ratio) {\r\n            const innerRectHeight = containerRect.width / ratio;\r\n            return {\r\n                x: containerRect.x,\r\n                y: containerRect.y + (containerRect.height - innerRectHeight) / 2,\r\n                width: containerRect.width,\r\n                height: innerRectHeight\r\n            }\r\n        }\r\n        else {\r\n            const innerRectWidth = containerRect.height * ratio;\r\n            return {\r\n                x: containerRect.x + (containerRect.width - innerRectWidth) / 2,\r\n                y: containerRect.y,\r\n                width: innerRectWidth,\r\n                height: containerRect.height\r\n            }\r\n        }\r\n    }\r\n\r\n    public static resizeRect(inputRect: IRect, rectAnchor: Direction, delta): IRect {\r\n        const rect: IRect = {...inputRect};\r\n        switch (rectAnchor) {\r\n            case Direction.RIGHT:\r\n                rect.width += delta.x;\r\n                break;\r\n            case Direction.BOTTOM_RIGHT:\r\n                rect.width += delta.x;\r\n                rect.height += delta.y;\r\n                break;\r\n            case Direction.BOTTOM:\r\n                rect.height += delta.y;\r\n                break;\r\n            case Direction.TOP_RIGHT:\r\n                rect.width += delta.x;\r\n                rect.y += delta.y;\r\n                rect.height -= delta.y;\r\n                break;\r\n            case Direction.TOP:\r\n                rect.y += delta.y;\r\n                rect.height -= delta.y;\r\n                break;\r\n            case Direction.TOP_LEFT:\r\n                rect.x += delta.x;\r\n                rect.width -= delta.x;\r\n                rect.y += delta.y;\r\n                rect.height -= delta.y;\r\n                break;\r\n            case Direction.LEFT:\r\n                rect.x += delta.x;\r\n                rect.width -= delta.x;\r\n                break;\r\n            case Direction.BOTTOM_LEFT:\r\n                rect.x += delta.x;\r\n                rect.width -= delta.x;\r\n                rect.height += delta.y;\r\n                break;\r\n        }\r\n\r\n        if (rect.width < 0)  {\r\n            rect.x = rect.x + rect.width;\r\n            rect.width = - rect.width;\r\n        }\r\n\r\n        if (rect.height < 0)  {\r\n            rect.y = rect.y + rect.height;\r\n            rect.height = - rect.height;\r\n        }\r\n\r\n        return rect;\r\n    }\r\n\r\n    public static translate(rect: IRect, delta: IPoint): IRect {\r\n        return {\r\n            ...rect,\r\n            x: rect.x + delta.x,\r\n            y: rect.y + delta.y\r\n        }\r\n    }\r\n\r\n    public static expand(rect: IRect, delta: IPoint): IRect {\r\n        return {\r\n            x: rect.x - delta.x,\r\n            y: rect.y - delta.y,\r\n            width: rect.width + 2 * delta.x,\r\n            height: rect.height + 2 * delta.y\r\n        }\r\n    }\r\n\r\n    public static scaleRect(rect:IRect, scale: number): IRect {\r\n        return {\r\n            x: rect.x * scale,\r\n            y: rect.y * scale,\r\n            width: rect.width * scale,\r\n            height: rect.height * scale\r\n        }\r\n    }\r\n\r\n    public static mapRectToAnchors(rect: IRect): RectAnchor[] {\r\n        return [\r\n            {type: Direction.TOP_LEFT, position: {x: rect.x, y: rect.y}},\r\n            {type: Direction.TOP, position: {x: rect.x + 0.5 * rect.width, y: rect.y}},\r\n            {type: Direction.TOP_RIGHT, position: {x: rect.x + rect.width, y: rect.y}},\r\n            {type: Direction.LEFT, position: {x: rect.x, y: rect.y + 0.5 * rect.height}},\r\n            {type: Direction.RIGHT, position: {x: rect.x + rect.width, y: rect.y + 0.5 * rect.height}},\r\n            {type: Direction.BOTTOM_LEFT, position: {x: rect.x, y: rect.y + rect.height}},\r\n            {type: Direction.BOTTOM, position: {x: rect.x + 0.5 * rect.width, y: rect.y + rect.height}},\r\n            {type: Direction.BOTTOM_RIGHT, position: {x: rect.x + rect.width, y: rect.y + rect.height}}\r\n        ]\r\n    }\r\n\r\n    public static snapPointToRect(point: IPoint, rect: IRect): IPoint {\r\n        if (RectUtil.isPointInside(rect, point))\r\n            return point;\r\n\r\n        return {\r\n            x: NumberUtil.snapValueToRange(point.x, rect.x, rect.x + rect.width),\r\n            y: NumberUtil.snapValueToRange(point.y, rect.y, rect.y + rect.height)\r\n        }\r\n    }\r\n\r\n    public static getCenter(rect: IRect): IPoint {\r\n        return {\r\n            x: rect.x + rect.width / 2,\r\n            y: rect.y + rect.height / 2\r\n        }\r\n    }\r\n\r\n    public static getSize(rect: IRect): ISize {\r\n        return {\r\n            width: rect.width,\r\n            height: rect.height\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\nimport {ISize} from \"../../../interfaces/ISize\";\r\nimport {IRect} from \"../../../interfaces/IRect\";\r\nimport Scrollbars from 'react-custom-scrollbars';\r\nimport {VirtualListUtil} from \"../../../utils/VirtualListUtil\";\r\nimport {IPoint} from \"../../../interfaces/IPoint\";\r\nimport {RectUtil} from \"../../../utils/RectUtil\";\r\n\r\ninterface IProps {\r\n    size: ISize;\r\n    childCount: number;\r\n    childSize: ISize;\r\n    childRender: (index: number, isScrolling: boolean, isVisible: boolean, style: React.CSSProperties) => any;\r\n    overScanHeight?: number;\r\n}\r\n\r\ninterface IState {\r\n    viewportRect: IRect;\r\n    isScrolling: boolean;\r\n}\r\n\r\nexport class VirtualList extends React.Component<IProps, IState> {\r\n    private gridSize: ISize;\r\n    private contentSize: ISize;\r\n    private childAnchors: IPoint[];\r\n    private scrollbars: Scrollbars;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            viewportRect: null,\r\n            isScrolling: false\r\n        };\r\n    }\r\n\r\n    public componentDidMount(): void {\r\n        const {size, childSize, childCount} = this.props;\r\n        this.calculate(size, childSize, childCount);\r\n        this.setState({\r\n            viewportRect: {\r\n                x: 0,\r\n                y: 0,\r\n                width: this.props.size.width,\r\n                height: this.props.size.height\r\n            }\r\n        });\r\n    }\r\n\r\n    public componentWillUpdate(nextProps: Readonly<IProps>, nextState: Readonly<IState>, nextContext: any): void {\r\n        const {size, childSize, childCount} = nextProps;\r\n        if (this.props.size.height !== size.height || this.props.size.width !== size.width ||\r\n            this.props.childCount !== childCount) {\r\n            this.calculate(size, childSize, childCount);\r\n            this.setState({\r\n                viewportRect: {\r\n                    x: this.scrollbars.getValues().scrollLeft,\r\n                    y: this.scrollbars.getValues().scrollTop,\r\n                    width: size.width,\r\n                    height: size.height\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private calculate = (size: ISize, childSize: ISize, childCount: number) => {\r\n        this.gridSize = VirtualListUtil.calculateGridSize(size, childSize, childCount);\r\n        this.contentSize = VirtualListUtil.calculateContentSize(size, childSize, this.gridSize);\r\n        this.childAnchors = VirtualListUtil.calculateAnchorPoints(size, childSize, childCount);\r\n    };\r\n\r\n    private getVirtualListStyle = ():React.CSSProperties => {\r\n        return {\r\n            position: \"relative\",\r\n            width: this.props.size.width,\r\n            height: this.props.size.height,\r\n        }\r\n    };\r\n\r\n    private getVirtualListContentStyle = ():React.CSSProperties => {\r\n        return {\r\n            width: this.contentSize.width,\r\n            height: this.contentSize.height,\r\n        }\r\n    };\r\n\r\n    private onScrollStart = () => {\r\n        this.setState({isScrolling: true});\r\n    };\r\n\r\n    private onScrollStop = () => {\r\n        this.setState({isScrolling: false});\r\n    };\r\n\r\n    private onScroll = (values) => {\r\n        this.setState({\r\n            viewportRect: {\r\n                x: values.scrollLeft,\r\n                y: values.scrollTop,\r\n                width: this.props.size.width,\r\n                height: this.props.size.height\r\n            }\r\n        });\r\n    };\r\n\r\n    private getChildren = () => {\r\n        const {viewportRect, isScrolling} = this.state;\r\n        const {overScanHeight, childSize} = this.props;\r\n        const overScan: number = !!overScanHeight ? overScanHeight : 0;\r\n\r\n        const viewportRectWithOverScan:IRect = {\r\n            x: viewportRect.x,\r\n            y: viewportRect.y - overScan,\r\n            width: viewportRect.width,\r\n            height: viewportRect.height + 2 * overScan\r\n        };\r\n\r\n        return this.childAnchors.reduce((children, anchor: IPoint, index: number) => {\r\n            const childRect = Object.assign(anchor, childSize);\r\n            const isVisible = RectUtil.intersect(viewportRectWithOverScan, childRect);\r\n\r\n            if (isVisible) {\r\n                const childStyle: React.CSSProperties = {\r\n                    position: \"absolute\",\r\n                    left: anchor.x,\r\n                    top: anchor.y,\r\n                    width: childSize.width,\r\n                    height: childSize.height\r\n                };\r\n\r\n                return children.concat(this.props.childRender(index, isScrolling, isVisible, childStyle))\r\n            }\r\n            else {\r\n                return children;\r\n            }\r\n        }, [])\r\n    };\r\n\r\n    public render() {\r\n        const displayContent = !!this.props.size && !!this.props.childSize && !!this.gridSize;\r\n\r\n        return(\r\n            <div\r\n                className=\"VirtualList\"\r\n                style={this.getVirtualListStyle()}\r\n            >\r\n                <Scrollbars\r\n                    ref={ref => this.scrollbars = ref}\r\n                    onScrollFrame={this.onScroll}\r\n                    onScrollStart={this.onScrollStart}\r\n                    onScrollStop={this.onScrollStop}\r\n                    autoHide={true}\r\n                >\r\n                    {displayContent && <div\r\n                        className=\"VirtualListContent\"\r\n                        style={this.getVirtualListContentStyle()}\r\n                    >\r\n                        {this.getChildren()}\r\n                    </div>}\r\n                </Scrollbars>\r\n            </div>\r\n        )\r\n    }\r\n}","export class ImageLoadManager {\r\n\r\n\tprivate static queue: (() => Promise<any>)[] = [];\r\n\tprivate static isRunning: boolean = false;\r\n\r\n\tpublic static add(fx: Promise<any>) {\r\n\t\tImageLoadManager.queue.push(async () => await fx);\r\n\t}\r\n\r\n\tpublic static run() {\r\n\t\tsetTimeout(() => ImageLoadManager.runQueue(), 10);\r\n\t}\r\n\r\n\tpublic static addAndRun(fx: Promise<any>) {\r\n\t\tImageLoadManager.add(fx);\r\n\t\tImageLoadManager.run();\r\n\t}\r\n\r\n\tpublic static async runQueue() {\r\n\t\tif (!ImageLoadManager.isRunning) {\r\n\t\t\tImageLoadManager.isRunning = true;\r\n\t\t\tawait ImageLoadManager.runTasks();\r\n\t\t\tImageLoadManager.isRunning = false;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate static async runTasks() {\r\n\t\twhile (ImageLoadManager.queue.length > 0) {\r\n\t\t\tconst fx = ImageLoadManager.queue.shift();\r\n\t\t\tawait fx();\r\n\t\t}\r\n\t}\r\n}","export enum Action {\r\n    // AI\r\n    UPDATE_SUGGESTED_LABEL_LIST = '@@UPDATE_SUGGESTED_LABEL_LIST',\r\n    UPDATE_REJECTED_SUGGESTED_LABEL_LIST = '@@UPDATE_REJECTED_SUGGESTED_LABEL_LIST',\r\n    UPDATE_OBJECT_DETECTOR_STATUS = '@@UPDATE_OBJECT_DETECTOR_STATUS',\r\n    UPDATE_POSE_DETECTOR_STATUS = '@@UPDATE_POSE_DETECTOR_STATUS',\r\n    UPDATE_FORM_DETECTOR_STATUS = '@@UPDATE_FORM_DETECTOR_STATUS',\r\n    UPDATE_MASK_DETECTOR_STATUS = '@@UPDATE_MASK_DETECTOR_STATUS',\r\n    UPDATE_DISABLED_AI_FLAG = '@@UPDATE_DISABLED_AI_FLAG',\r\n\r\n    // GENERAL\r\n    UPDATE_PROJECT_DATA = '@@UPDATE_PROJECT_DATA',\r\n    UPDATE_WINDOW_SIZE = '@@UPDATE_WINDOW_SIZE',\r\n    UPDATE_ACTIVE_POPUP_TYPE = '@@UPDATE_ACTIVE_POPUP_TYPE',\r\n    UPDATE_CUSTOM_CURSOR_STYLE = '@@UPDATE_CUSTOM_CURSOR_STYLE',\r\n    UPDATE_CONTEXT = '@@UPDATE_CONTEXT',\r\n    UPDATE_PREVENT_CUSTOM_CURSOR_STATUS = '@@UPDATE_PREVENT_CUSTOM_CURSOR_STATUS',\r\n    UPDATE_IMAGE_DRAG_MODE_STATUS = '@@UPDATE_IMAGE_DRAG_MODE_STATUS',\r\n    UPDATE_CROSS_HAIR_VISIBLE_STATUS = '@@UPDATE_CROSS_HAIR_VISIBLE_STATUS',\r\n    UPDATE_ENABLE_PER_CLASS_COLORATION_STATUS = '@@UPDATE_ENABLE_PER_CLASS_COLORATION_STATUS',\r\n    UPDATE_ZOOM = '@@UPDATE_ZOOM',\r\n\r\n    // LABELS\r\n    UPDATE_ACTIVE_IMAGE_INDEX = '@@UPDATE_ACTIVE_IMAGE_INDEX',\r\n    UPDATE_IMAGE_DATA_BY_ID = '@@UPDATE_IMAGE_DATA_BY_ID',\r\n    ADD_IMAGES_DATA = '@@ADD_IMAGES_DATA',\r\n    UPDATE_IMAGES_DATA = '@@UPDATE_IMAGES_DATA',\r\n    UPDATE_ACTIVE_LABEL_NAME_ID = '@@UPDATE_ACTIVE_LABEL_NAME_ID',\r\n    UPDATE_ACTIVE_LABEL_TYPE = '@@UPDATE_ACTIVE_LABEL_TYPE',\r\n    UPDATE_ACTIVE_LABEL_ID = '@@UPDATE_ACTIVE_LABEL_ID',\r\n    UPDATE_HIGHLIGHTED_LABEL_ID = '@@UPDATE_HIGHLIGHTED_LABEL_ID',\r\n    UPDATE_LABEL_NAMES = '@@UPDATE_LABEL_NAMES',\r\n    UPDATE_FIRST_LABEL_CREATED_FLAG = '@@UPDATE_FIRST_LABEL_CREATED_FLAG',\r\n\r\n    // NOTIFICATIONS\r\n    SUBMIT_NEW_NOTIFICATION = '@@SUBMIT_NEW_NOTIFICATION',\r\n    DELETE_NOTIFICATION_BY_ID = '@@DELETE_NOTIFICATION_BY_ID'\r\n}\r\n","import {zip} from \"lodash\";\r\n\r\nexport type ImageMap = { [s: string]: HTMLImageElement; };\r\n\r\nexport class ImageRepository {\r\n    private static repository: ImageMap = {};\r\n\r\n    public static storeImage(id: string, image: HTMLImageElement) {\r\n        ImageRepository.repository[id] = image;\r\n    }\r\n\r\n    public static storeImages(ids: string[], images: HTMLImageElement[]) {\r\n        zip(ids, images).forEach((pair: [string, HTMLImageElement]) => {\r\n            ImageRepository.storeImage(...pair);\r\n        })\r\n    }\r\n\r\n    public static getById(uuid: string): HTMLImageElement {\r\n        return ImageRepository.repository[uuid];\r\n    }\r\n}","import {LabelsActionTypes, ImageData, LabelName} from './types';\r\nimport {Action} from '../Actions';\r\nimport {LabelType} from '../../data/enums/LabelType';\r\n\r\nexport function updateActiveImageIndex(activeImageIndex: number): LabelsActionTypes {\r\n    return {\r\n        type: Action.UPDATE_ACTIVE_IMAGE_INDEX,\r\n        payload: {\r\n            activeImageIndex,\r\n        },\r\n    };\r\n}\r\n\r\nexport function updateActiveLabelNameId(activeLabelNameId: string): LabelsActionTypes {\r\n    return {\r\n        type: Action.UPDATE_ACTIVE_LABEL_NAME_ID,\r\n        payload: {\r\n            activeLabelNameId,\r\n        },\r\n    };\r\n}\r\n\r\nexport function updateActiveLabelId(activeLabelId: string): LabelsActionTypes {\r\n    return {\r\n        type: Action.UPDATE_ACTIVE_LABEL_ID,\r\n        payload: {\r\n            activeLabelId,\r\n        },\r\n    };\r\n}\r\n\r\nexport function updateHighlightedLabelId(highlightedLabelId: string): LabelsActionTypes {\r\n    return {\r\n        type: Action.UPDATE_HIGHLIGHTED_LABEL_ID,\r\n        payload: {\r\n            highlightedLabelId,\r\n        },\r\n    };\r\n}\r\n\r\nexport function updateActiveLabelType(activeLabelType: LabelType): LabelsActionTypes {\r\n    return {\r\n        type: Action.UPDATE_ACTIVE_LABEL_TYPE,\r\n        payload: {\r\n            activeLabelType,\r\n        },\r\n    };\r\n}\r\n\r\nexport function updateImageDataById(id: string, newImageData: ImageData): LabelsActionTypes {\r\n    return {\r\n        type: Action.UPDATE_IMAGE_DATA_BY_ID,\r\n        payload: {\r\n            id,\r\n            newImageData\r\n        },\r\n    };\r\n}\r\n\r\nexport function addImageData(imageData: ImageData[]): LabelsActionTypes {\r\n    return {\r\n        type: Action.ADD_IMAGES_DATA,\r\n        payload: {\r\n            imageData,\r\n        },\r\n    };\r\n}\r\n\r\nexport function updateImageData(imageData: ImageData[]): LabelsActionTypes {\r\n    return {\r\n        type: Action.UPDATE_IMAGES_DATA,\r\n        payload: {\r\n            imageData,\r\n        },\r\n    };\r\n}\r\n\r\nexport function updateLabelNames(labels: LabelName[]): LabelsActionTypes {\r\n    return {\r\n        type: Action.UPDATE_LABEL_NAMES,\r\n        payload: {\r\n            labels\r\n        }\r\n    }\r\n}\r\n\r\nexport function updateFirstLabelCreatedFlag(firstLabelCreatedFlag: boolean): LabelsActionTypes {\r\n    return {\r\n        type: Action.UPDATE_FIRST_LABEL_CREATED_FLAG,\r\n        payload: {\r\n            firstLabelCreatedFlag\r\n        }\r\n    }\r\n}\r\n","export enum ContextType {\r\n    EDITOR = \"EDITOR\",\r\n    LEFT_NAVBAR = \"LEFT_NAVBAR\",\r\n    RIGHT_NAVBAR = \"RIGHT_NAVBAR\",\r\n    POPUP = \"POPUP\",\r\n    DROPDOWN = \"DROPDOWN\"\r\n}","export class FileUtil {\r\n    public static loadImage(fileData: File): Promise<HTMLImageElement> {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst url = URL.createObjectURL(fileData);\r\n            const image = new Image();\r\n\t\t\timage.src = url;\r\n\t\t\timage.onload = () => resolve(image);\r\n\t\t\timage.onerror = reject;\r\n\t\t})\r\n    }\r\n\r\n    public static loadImages(fileData: File[]): Promise<HTMLImageElement[]> {\r\n        return new Promise((resolve, reject) => {\r\n            const promises: Promise<HTMLImageElement>[] = fileData.map((fileData: File) => FileUtil.loadImage(fileData))\r\n            Promise\r\n                .all(promises)\r\n                .then((values: HTMLImageElement[]) => resolve(values))\r\n                .catch((error) => reject(error));\r\n        });\r\n    }\r\n\r\n    public static readFile(fileData: File): Promise<string> {\r\n        return new Promise((resolve, reject) => {\r\n            let reader = new FileReader();\r\n            reader.onloadend = (event: any) => {\r\n                resolve(event.target.result);\r\n            };\r\n            reader.onerror = reject;\r\n            reader.readAsText(fileData);\r\n        })\r\n    }\r\n\r\n    public static readFiles(fileData: File[]): Promise<string[]> {\r\n        return new Promise((resolve, reject) => {\r\n            const promises: Promise<string>[] = fileData.map((fileData: File) => FileUtil.readFile(fileData))\r\n            Promise\r\n                .all(promises)\r\n                .then((values: string[]) => resolve(values))\r\n                .catch((error) => reject(error));\r\n        });\r\n    }\r\n\r\n    public static extractFileExtension(name: string): string | null {\r\n        const parts = name.split(\".\");\r\n        return parts.length > 1 ? parts[parts.length - 1] : null;\r\n    }\r\n\r\n    public static extractFileName(name: string): string | null {\r\n        const splitPath = name.split(\".\");\r\n        let fName = \"\";\r\n        for(const idx of Array(splitPath.length - 1).keys()){\r\n            if(fName === \"\") fName += splitPath[idx];\r\n            else fName += \".\" + splitPath[idx];\r\n        }\r\n        return fName;\r\n    }\r\n}\r\n","import {store} from '../..';\r\n\r\nexport class AISelector {\r\n    public static getSuggestedLabelList(): string[] {\r\n        return store.getState().ai.suggestedLabelList;\r\n    }\r\n\r\n    public static getRejectedSuggestedLabelList(): string[] {\r\n        return store.getState().ai.rejectedSuggestedLabelList;\r\n    }\r\n\r\n    public static isAIObjectDetectorModelLoaded(): boolean {\r\n        return store.getState().ai.isObjectDetectorLoaded;\r\n    }\r\n\r\n    public static isAIPoseDetectorModelLoaded(): boolean {\r\n        return store.getState().ai.isPoseDetectorLoaded;\r\n    }\r\n\r\n    public static isAIFormDetectorModelLoaded(): boolean {\r\n        return store.getState().ai.isFormDetectorLoaded;\r\n    }\r\n\r\n    public static isAIMaskDetectorModelLoaded(): boolean {\r\n        return store.getState().ai.isMaskDetectorLoaded;\r\n    }\r\n\r\n    public static isAIDisabled(): boolean {\r\n        return store.getState().ai.isAIDisabled;\r\n    }\r\n}\r\n","import {Settings} from \"../../settings/Settings\";\r\nimport {AISelector} from \"../../store/selectors/AISelector\";\r\n\r\nexport class CSSHelper {\r\n    public static getLeadingColor(): string {\r\n        return AISelector.isAIObjectDetectorModelLoaded() || AISelector.isAIFormDetectorModelLoaded()  \r\n        || AISelector.isAIMaskDetectorModelLoaded() ? Settings.PRIMARY_COLOR : Settings.SECONDARY_COLOR;\r\n        // return AISelector.isAIObjectDetectorModelLoaded() || AISelector.isAIFormDetectorModelLoaded() ||\r\n        //     AISelector.isAIPoseDetectorModelLoaded() ? Settings.PRIMARY_COLOR : Settings.SECONDARY_COLOR;\r\n    }\r\n}","import classNames from \"classnames\";\r\nimport React from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { ClipLoader } from \"react-spinners\";\r\nimport { ImageLoadManager } from \"../../../../logic/imageRepository/ImageLoadManager\";\r\nimport { IRect } from \"../../../../interfaces/IRect\";\r\nimport { ISize } from \"../../../../interfaces/ISize\";\r\nimport { ImageRepository } from \"../../../../logic/imageRepository/ImageRepository\";\r\nimport { AppState } from \"../../../../store\";\r\nimport { updateImageDataById } from \"../../../../store/labels/actionCreators\";\r\nimport { ImageData } from \"../../../../store/labels/types\";\r\nimport { FileUtil } from \"../../../../utils/FileUtil\";\r\nimport { RectUtil } from \"../../../../utils/RectUtil\";\r\nimport './ImagePreview.scss';\r\nimport { CSSHelper } from \"../../../../logic/helpers/CSSHelper\";\r\n\r\ninterface IProps {\r\n    imageData: ImageData;\r\n    style: React.CSSProperties;\r\n    size: ISize;\r\n    isScrolling?: boolean;\r\n    isChecked?: boolean;\r\n    onClick?: () => any;\r\n    isSelected?: boolean;\r\n    updateImageDataById: (id: string, newImageData: ImageData) => any;\r\n}\r\n\r\ninterface IState {\r\n    image: HTMLImageElement;\r\n}\r\n\r\nclass ImagePreview extends React.Component<IProps, IState> {\r\n    private isLoading: boolean = false;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            image: null,\r\n        }\r\n    }\r\n\r\n    public componentDidMount(): void {\r\n        ImageLoadManager.addAndRun(this.loadImage(this.props.imageData, this.props.isScrolling));\r\n    }\r\n\r\n    public componentWillUpdate(nextProps: Readonly<IProps>, nextState: Readonly<IState>, nextContext: any): void {\r\n        if (this.props.imageData.id !== nextProps.imageData.id) {\r\n            if (nextProps.imageData.loadStatus) {\r\n                ImageLoadManager.addAndRun(this.loadImage(nextProps.imageData, nextProps.isScrolling));\r\n            }\r\n            else {\r\n                this.setState({ image: null });\r\n            }\r\n        }\r\n\r\n        if (this.props.isScrolling && !nextProps.isScrolling) {\r\n            ImageLoadManager.addAndRun(this.loadImage(nextProps.imageData, false));\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps: Readonly<IProps>, nextState: Readonly<IState>, nextContext: any): boolean {\r\n        return (\r\n            this.props.imageData.id !== nextProps.imageData.id ||\r\n            this.state.image !== nextState.image ||\r\n            this.props.isSelected !== nextProps.isSelected ||\r\n            this.props.isChecked !== nextProps.isChecked\r\n        )\r\n    }\r\n\r\n    private loadImage = async (imageData: ImageData, isScrolling: boolean) => {\r\n        if (imageData.loadStatus) {\r\n            const image = ImageRepository.getById(imageData.id);\r\n            if (this.state.image !== image) {\r\n                this.setState({ image });\r\n            }\r\n        }\r\n        else if (!isScrolling || !this.isLoading) {\r\n            this.isLoading = true;\r\n            const saveLoadedImagePartial = (image: HTMLImageElement) => this.saveLoadedImage(image, imageData);\r\n            FileUtil.loadImage(imageData.fileData)\r\n                .then((image: HTMLImageElement) => saveLoadedImagePartial(image))\r\n                .catch((error) => this.handleLoadImageError())\r\n        }\r\n    };\r\n\r\n    private saveLoadedImage = (image: HTMLImageElement, imageData: ImageData) => {\r\n        imageData.loadStatus = true;\r\n        this.props.updateImageDataById(imageData.id, imageData);\r\n        ImageRepository.storeImage(imageData.id, image);\r\n        if (imageData.id === this.props.imageData.id) {\r\n            this.setState({ image });\r\n            this.isLoading = false;\r\n        }\r\n    };\r\n\r\n    private getStyle = () => {\r\n        const { size } = this.props;\r\n\r\n        const containerRect: IRect = {\r\n            x: 0.15 * size.width,\r\n            y: 0.15 * size.height,\r\n            width: 0.7 * size.width,\r\n            height: 0.7 * size.height\r\n        };\r\n\r\n        const imageRect: IRect = {\r\n            x: 0,\r\n            y: 0,\r\n            width: this.state.image.width,\r\n            height: this.state.image.height\r\n        };\r\n\r\n        const imageRatio = RectUtil.getRatio(imageRect);\r\n        const imagePosition: IRect = RectUtil.fitInsideRectWithRatio(containerRect, imageRatio);\r\n\r\n        return {\r\n            width: imagePosition.width,\r\n            height: imagePosition.height,\r\n            left: imagePosition.x,\r\n            top: imagePosition.y\r\n        }\r\n    };\r\n\r\n    private handleLoadImageError = () => { };\r\n\r\n    private getClassName = () => {\r\n        return classNames(\r\n            \"ImagePreview\",\r\n            {\r\n                \"selected\": this.props.isSelected,\r\n            }\r\n        );\r\n    };\r\n\r\n    public render() {\r\n        const {\r\n            isChecked,\r\n            style,\r\n            onClick\r\n        } = this.props;\r\n\r\n        return (\r\n            <div\r\n                className={this.getClassName()}\r\n                style={style}\r\n                onClick={onClick ? onClick : undefined}\r\n            >\r\n                {(!!this.state.image) ?\r\n                    [\r\n                        <div\r\n                            className=\"Foreground\"\r\n                            key={\"Foreground\"}\r\n                            style={this.getStyle()}\r\n                        >\r\n                            <img\r\n                                className=\"Image\"\r\n                                draggable={false}\r\n                                src={this.state.image.src}\r\n                                alt={this.state.image.alt}\r\n                                style={{ ...this.getStyle(), left: 0, top: 0 }}\r\n                            />\r\n                            {isChecked && <img\r\n                                className=\"CheckBox\"\r\n                                draggable={false}\r\n                                src={\"ico/ok.png\"}\r\n                                alt={\"checkbox\"}\r\n                            />}\r\n                        </div>,\r\n                        <div\r\n                            className=\"Background\"\r\n                            key={\"Background\"}\r\n                            style={this.getStyle()}\r\n                        />\r\n                    ] :\r\n                    <ClipLoader\r\n                        size={30}\r\n                        color={CSSHelper.getLeadingColor()}\r\n                        loading={true}\r\n                    />}\r\n            </div>)\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    updateImageDataById\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(ImagePreview);","import {ISize} from '../../interfaces/ISize';\r\nimport {GeneralActionTypes, ProjectData} from './types';\r\nimport {Action} from '../Actions';\r\nimport {PopupWindowType} from '../../data/enums/PopupWindowType';\r\nimport {CustomCursorStyle} from '../../data/enums/CustomCursorStyle';\r\nimport {ContextType} from '../../data/enums/ContextType';\r\n\r\nexport function updateWindowSize(windowSize: ISize): GeneralActionTypes {\r\n    return {\r\n        type: Action.UPDATE_WINDOW_SIZE,\r\n        payload: {\r\n            windowSize,\r\n        },\r\n    };\r\n}\r\n\r\nexport function updateActivePopupType(activePopupType: PopupWindowType): GeneralActionTypes {\r\n    return {\r\n        type: Action.UPDATE_ACTIVE_POPUP_TYPE,\r\n        payload: {\r\n            activePopupType,\r\n        }\r\n    }\r\n}\r\n\r\nexport function updateCustomCursorStyle(customCursorStyle: CustomCursorStyle): GeneralActionTypes {\r\n    return {\r\n        type: Action.UPDATE_CUSTOM_CURSOR_STYLE,\r\n        payload: {\r\n            customCursorStyle,\r\n        }\r\n    }\r\n}\r\n\r\nexport function updateActiveContext(activeContext: ContextType): GeneralActionTypes {\r\n    return {\r\n        type: Action.UPDATE_CONTEXT,\r\n        payload: {\r\n            activeContext,\r\n        },\r\n    };\r\n}\r\n\r\nexport function updatePreventCustomCursorStatus(preventCustomCursor: boolean): GeneralActionTypes {\r\n    return {\r\n        type: Action.UPDATE_PREVENT_CUSTOM_CURSOR_STATUS,\r\n        payload: {\r\n            preventCustomCursor,\r\n        },\r\n    };\r\n}\r\n\r\nexport function updateImageDragModeStatus(imageDragMode: boolean): GeneralActionTypes {\r\n    return {\r\n        type: Action.UPDATE_IMAGE_DRAG_MODE_STATUS,\r\n        payload: {\r\n            imageDragMode,\r\n        },\r\n    };\r\n}\r\n\r\nexport function updateCrossHairVisibleStatus(crossHairVisible: boolean): GeneralActionTypes {\r\n    return {\r\n        type: Action.UPDATE_CROSS_HAIR_VISIBLE_STATUS,\r\n        payload: {\r\n            crossHairVisible,\r\n        },\r\n    };\r\n}\r\n\r\nexport function updateProjectData(projectData: ProjectData): GeneralActionTypes {\r\n    return {\r\n        type: Action.UPDATE_PROJECT_DATA,\r\n        payload: {\r\n            projectData,\r\n        },\r\n    };\r\n}\r\n\r\nexport function updateZoom(zoom: number): GeneralActionTypes {\r\n    return {\r\n        type: Action.UPDATE_ZOOM,\r\n        payload: {\r\n            zoom,\r\n        },\r\n    };\r\n}\r\n\r\nexport function updatePerClassColorationStatus(enablePerClassColoration: boolean): GeneralActionTypes {\r\n    return {\r\n        type: Action.UPDATE_ENABLE_PER_CLASS_COLORATION_STATUS,\r\n        payload: {\r\n            enablePerClassColoration,\r\n        },\r\n    };\r\n}\r\n","import {PrimaryEditorRenderEngine} from \"../logic/render/PrimaryEditorRenderEngine\";\r\nimport {BaseRenderEngine} from \"../logic/render/BaseRenderEngine\";\r\nimport {IRect} from \"../interfaces/IRect\";\r\nimport {IPoint} from \"../interfaces/IPoint\";\r\nimport {ISize} from \"../interfaces/ISize\";\r\nimport Scrollbars from \"react-custom-scrollbars\";\r\nimport {ViewPortHelper} from \"../logic/helpers/ViewPortHelper\";\r\n\r\nexport class EditorModel {\r\n    public static editor: HTMLDivElement;\r\n    public static canvas: HTMLCanvasElement;\r\n    public static mousePositionIndicator: HTMLDivElement;\r\n    public static cursor: HTMLDivElement;\r\n    public static viewPortScrollbars: Scrollbars;\r\n    public static image: HTMLImageElement;\r\n\r\n    public static primaryRenderingEngine: PrimaryEditorRenderEngine;\r\n    public static supportRenderingEngine: BaseRenderEngine;\r\n\r\n    public static viewPortHelper: ViewPortHelper;\r\n\r\n    public static isLoading: boolean = false;\r\n    public static viewPortActionsDisabled: boolean = false;\r\n    public static mousePositionOnViewPortContent: IPoint;\r\n    public static viewPortSize: ISize;\r\n\r\n    // x and y describe the dimension of the margin that remains constant regardless of the scale of the image\r\n    // width and height describes the render image size for 100% scale\r\n    public static defaultRenderImageRect: IRect;\r\n}","export class UnitUtil {\r\n\r\n    public static deg2rad(angleDeg:number) {\r\n        return(angleDeg * Math.PI/180);\r\n    }\r\n\r\n    public static rad2deg(angleRad:number) {\r\n        return(angleRad * 180/Math.PI);\r\n    }\r\n}","export enum CustomCursorStyle {\r\n    DEFAULT = \"DEFAULT\",\r\n    MOVE = \"MOVE\",\r\n    RESIZE = \"RESIZE\",\r\n    ADD = \"ADD\",\r\n    CANCEL = \"CANCEL\",\r\n    CLOSE = \"CLOSE\",\r\n    GRAB = \"GRAB\",\r\n    GRABBING = \"GRABBING\"\r\n}","\r\nimport {IPoint} from '../interfaces/IPoint';\r\nimport {IRect} from '../interfaces/IRect';\r\nimport {UnitUtil} from './UnitUtil';\r\n\r\nexport class DrawUtil {\r\n\r\n    public static clearCanvas(canvas:HTMLCanvasElement): void {\r\n        const ctx:CanvasRenderingContext2D = canvas.getContext('2d');\r\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    }\r\n\r\n    public static drawLine(canvas:HTMLCanvasElement, startPoint:IPoint, endPoint:IPoint, color:string = '#111111', thickness:number = 1): void {\r\n        const ctx:CanvasRenderingContext2D = canvas.getContext('2d');\r\n        ctx.save();\r\n        ctx.strokeStyle = color;\r\n        ctx.lineWidth = thickness;\r\n        ctx.lineCap = 'round';\r\n        ctx.beginPath();\r\n        ctx.moveTo(startPoint.x, startPoint.y);\r\n        ctx.lineTo(endPoint.x + 1, endPoint.y + 1);\r\n        ctx.stroke();\r\n        ctx.restore();\r\n    }\r\n\r\n    public static drawRect(canvas:HTMLCanvasElement, rect:IRect, color:string = '#fff', thickness:number = 1): void {\r\n        const ctx:CanvasRenderingContext2D = canvas.getContext('2d');\r\n        ctx.save();\r\n        ctx.strokeStyle = color;\r\n        ctx.lineWidth = thickness;\r\n        ctx.beginPath();\r\n        ctx.rect(rect.x, rect.y, rect.width, rect.height);\r\n        ctx.stroke();\r\n        ctx.restore();\r\n    }\r\n\r\n    public static drawRectWithFill(canvas:HTMLCanvasElement, rect:IRect, color:string = '#fff'): void {\r\n        const ctx:CanvasRenderingContext2D = canvas.getContext('2d');\r\n        ctx.save();\r\n        ctx.fillStyle = color;\r\n        ctx.beginPath();\r\n        ctx.rect(rect.x, rect.y, rect.width, rect.height);\r\n        ctx.fill();\r\n        ctx.restore();\r\n    }\r\n\r\n    public static shadeEverythingButRect(canvas:HTMLCanvasElement, rect:IRect, color:string = 'rgba(0, 0, 0, 0.7)'): void {\r\n        const ctx:CanvasRenderingContext2D = canvas.getContext('2d');\r\n        ctx.save();\r\n        ctx.fillStyle = color;\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n        ctx.globalCompositeOperation = 'destination-out';\r\n        ctx.fillRect(rect.x, rect.y, rect.width, rect.height);\r\n        ctx.restore();\r\n    }\r\n\r\n    public static drawCircleWithFill(canvas:HTMLCanvasElement, anchorPoint:IPoint, radius:number, color:string = '#ffffff'):void {\r\n        const ctx:CanvasRenderingContext2D = canvas.getContext('2d');\r\n        ctx.save();\r\n        const startAngleRad = UnitUtil.deg2rad(0);\r\n        const endAngleRad = UnitUtil.deg2rad(360);\r\n        ctx.fillStyle = color;\r\n        ctx.beginPath();\r\n        ctx.arc(anchorPoint.x, anchorPoint.y, radius, startAngleRad, endAngleRad, false);\r\n        ctx.fill();\r\n        ctx.restore();\r\n    }\r\n\r\n    public static drawCircle(canvas:HTMLCanvasElement, anchorPoint:IPoint, radius:number, startAngleDeg:number, endAngleDeg:number, thickness:number = 20, color:string = '#ffffff'): void {\r\n        const ctx:CanvasRenderingContext2D = canvas.getContext('2d');\r\n        const startAngleRad = UnitUtil.deg2rad(startAngleDeg);\r\n        const endAngleRad = UnitUtil.deg2rad(endAngleDeg);\r\n        ctx.save();\r\n        ctx.strokeStyle = color;\r\n        ctx.lineWidth = thickness;\r\n        ctx.beginPath();\r\n        ctx.arc(anchorPoint.x, anchorPoint.y, radius, startAngleRad, endAngleRad, false);\r\n        ctx.stroke();\r\n        ctx.restore();\r\n    }\r\n\r\n    public static drawPolygon(canvas:HTMLCanvasElement, anchors: IPoint[], color:string = '#fff', thickness:number = 1): void {\r\n        const ctx:CanvasRenderingContext2D = canvas.getContext('2d');\r\n        ctx.save();\r\n        ctx.strokeStyle = color;\r\n        ctx.lineWidth = thickness;\r\n        ctx.beginPath();\r\n        ctx.moveTo(anchors[0].x, anchors[0].y);\r\n        for (let i = 1; i < anchors.length; i ++) {\r\n            ctx.lineTo(anchors[i].x, anchors[i].y);\r\n        }\r\n        ctx.closePath();\r\n        ctx.stroke();\r\n        ctx.restore();\r\n    }\r\n\r\n    public static drawPolygonWithFill(canvas:HTMLCanvasElement, anchors: IPoint[], color:string = '#fff'): void {\r\n        const ctx:CanvasRenderingContext2D = canvas.getContext('2d');\r\n        ctx.save();\r\n        ctx.fillStyle = color;\r\n        ctx.beginPath();\r\n        ctx.moveTo(anchors[0].x, anchors[0].y);\r\n        for (let i = 1; i < anchors.length; i ++) {\r\n            ctx.lineTo(anchors[i].x, anchors[i].y);\r\n        }\r\n        ctx.closePath();\r\n        ctx.fill();\r\n        ctx.restore();\r\n    }\r\n\r\n    public static drawText(canvas:HTMLCanvasElement, text:string, textSize:number, anchorPoint:IPoint, color:string = '#ffffff', bold:boolean = false, align:string = 'center'):void {\r\n        const ctx:CanvasRenderingContext2D = canvas.getContext('2d');\r\n        ctx.save();\r\n        ctx.fillStyle = color;\r\n        ctx.textAlign = align as CanvasTextAlign;\r\n        ctx.textBaseline='middle';\r\n        ctx.font = (bold ? 'bold ' : '') + textSize + 'px Arial';\r\n        ctx.fillText(text, anchorPoint.x, anchorPoint.y);\r\n        ctx.restore();\r\n    }\r\n\r\n    public static hexToRGB(hex: string, alpha: number | null = null): string {\r\n        const r = parseInt(hex.slice(1, 3), 16);\r\n        const g = parseInt(hex.slice(3, 5), 16);\r\n        const b = parseInt(hex.slice(5, 7), 16);\r\n\r\n        if (alpha !== null) {\r\n            return 'rgba(' + r + ', ' + g + ', ' + b + ', ' + alpha + ')';\r\n        } else {\r\n            return 'rgb(' + r + ', ' + g + ', ' + b + ')';\r\n        }\r\n    }\r\n}\r\n","import {IPoint} from \"../interfaces/IPoint\";\r\n\r\nexport class PointUtil {\r\n    public static equals(p1: IPoint, p2: IPoint): boolean {\r\n        return p1.x === p2.x && p1.y === p2.y;\r\n    }\r\n\r\n    public static add(p1: IPoint, p2: IPoint): IPoint {\r\n        return {\r\n            x: p1.x + p2.x,\r\n            y: p1.y + p2.y\r\n        }\r\n    }\r\n\r\n    public static subtract(p1: IPoint, p2: IPoint): IPoint {\r\n        return {\r\n            x: p1.x - p2.x,\r\n            y: p1.y - p2.y\r\n        }\r\n    }\r\n\r\n    public static multiply(p1: IPoint, factor: number) {\r\n        return {\r\n            x: p1.x * factor,\r\n            y: p1.y * factor\r\n        }\r\n    }\r\n}","import {ISize} from '../interfaces/ISize';\r\nimport {Settings} from './Settings';\r\n\r\nexport class RenderEngineSettings {\r\n    public static readonly LINE_THICKNESS: number = 2;\r\n    public static readonly lineActiveColor: string = Settings.PRIMARY_COLOR;\r\n    public static readonly defaultLineColor: string = '#ffffff';\r\n    public static readonly CROSS_HAIR_LINE_COLOR: string = '#ffffff';\r\n    public static readonly crossHairPadding: number = 25;\r\n    public static readonly anchorSize: ISize = {\r\n        width: Settings.RESIZE_HANDLE_DIMENSION_PX,\r\n        height: Settings.RESIZE_HANDLE_DIMENSION_PX\r\n    };\r\n    public static readonly anchorHoverSize: ISize = {\r\n        width: Settings.RESIZE_HANDLE_HOVER_DIMENSION_PX,\r\n        height: Settings.RESIZE_HANDLE_HOVER_DIMENSION_PX\r\n    };\r\n    public static readonly suggestedAnchorDetectionSize: ISize = {\r\n        width: 100,\r\n        height: 100\r\n    };\r\n    public static readonly defaultAnchorColor: string = '#ffffff';\r\n    public static readonly inactiveAnchorColor: string = Settings.DARK_THEME_SECOND_COLOR;\r\n\r\n    public static readonly DEFAULT_ANCHOR_COLOR: string = '#ffffff';\r\n    public static readonly ACTIVE_ANCHOR_COLOR: string = Settings.SECONDARY_COLOR;\r\n    public static readonly INACTIVE_ANCHOR_COLOR: string = Settings.DARK_THEME_SECOND_COLOR;\r\n\r\n    public static readonly DEFAULT_LINE_COLOR: string = '#ffffff';\r\n    public static readonly ACTIVE_LINE_COLOR: string = Settings.PRIMARY_COLOR;\r\n    public static readonly INACTIVE_LINE_COLOR: string = '#ffffff';\r\n}\r\n","import {store} from '../..';\r\nimport {ImageData, LabelLine, LabelName, LabelPoint, LabelPolygon, LabelRect} from '../labels/types';\r\nimport {find} from 'lodash';\r\nimport {LabelType} from '../../data/enums/LabelType';\r\n\r\nexport class LabelsSelector {\r\n    public static getLabelNames(): LabelName[] {\r\n        return store.getState().labels.labels;\r\n    }\r\n\r\n    public static getLabelNameById(id: string): LabelName | undefined {\r\n        const labelName: LabelName[] = LabelsSelector.getLabelNames()\r\n        return find(labelName, {id});\r\n    }\r\n\r\n    public static getActiveLabelNameId(): string {\r\n        return store.getState().labels.activeLabelNameId;\r\n    }\r\n\r\n    public static getActiveLabelType(): LabelType {\r\n        return store.getState().labels.activeLabelType;\r\n    }\r\n\r\n    public static getImagesData(): ImageData[] {\r\n        return store.getState().labels.imagesData;\r\n    }\r\n\r\n    public static getActiveImageIndex(): number {\r\n        return store.getState().labels.activeImageIndex;\r\n    }\r\n\r\n    public static getActiveImageData(): ImageData | null {\r\n        const activeImageIndex: number | null = LabelsSelector.getActiveImageIndex();\r\n\r\n        if (activeImageIndex === null)\r\n            return null;\r\n\r\n        return LabelsSelector.getImageDataByIndex(activeImageIndex);\r\n    }\r\n\r\n    public static getImageDataByIndex(index: number): ImageData {\r\n        const imagesData: ImageData[] = LabelsSelector.getImagesData();\r\n        return imagesData[index];\r\n    }\r\n\r\n    public static getImageDataById(id: string): ImageData {\r\n        const imagesData: ImageData[] = LabelsSelector.getImagesData();\r\n        return find(imagesData, {id});\r\n    }\r\n\r\n    public static getActiveLabelId(): string | null {\r\n        return store.getState().labels.activeLabelId;\r\n    }\r\n\r\n    public static getHighlightedLabelId(): string | null {\r\n        return store.getState().labels.highlightedLabelId;\r\n    }\r\n\r\n    public static getActiveRectLabel(): LabelRect | null {\r\n        const activeLabelId: string | null = LabelsSelector.getActiveLabelId();\r\n\r\n        if (activeLabelId === null)\r\n            return null;\r\n\r\n        return find(LabelsSelector.getActiveImageData().labelRects, {id: activeLabelId});\r\n    }\r\n\r\n    public static getActivePointLabel(): LabelPoint | null {\r\n        const activeLabelId: string | null = LabelsSelector.getActiveLabelId();\r\n\r\n        if (activeLabelId === null)\r\n            return null;\r\n\r\n        return find(LabelsSelector.getActiveImageData().labelPoints, {id: activeLabelId});\r\n    }\r\n\r\n    public static getActivePolygonLabel(): LabelPolygon | null {\r\n        const activeLabelId: string | null = LabelsSelector.getActiveLabelId();\r\n\r\n        if (activeLabelId === null)\r\n            return null;\r\n\r\n        return find(LabelsSelector.getActiveImageData().labelPolygons, {id: activeLabelId});\r\n    }\r\n\r\n    public static getActiveLineLabel(): LabelLine | null {\r\n        const activeLabelId: string | null = LabelsSelector.getActiveLabelId();\r\n\r\n        if (activeLabelId === null)\r\n            return null;\r\n\r\n        return find(LabelsSelector.getActiveImageData().labelLines, {id: activeLabelId});\r\n    }\r\n}\r\n","export enum EventType {\r\n    RESIZE = \"resize\",\r\n    MOUSE_UP = \"mouseup\",\r\n    MOUSE_DOWN = \"mousedown\",\r\n    MOUSE_MOVE = \"mousemove\",\r\n    MOUSE_WHEEL = \"wheel\",\r\n    KEY_DOWN = \"keydown\",\r\n    KEY_PRESS = \"keypress\",\r\n    KEY_UP = \"keyup\",\r\n    FOCUS = \"focus\"\r\n}","import {EventType} from \"../data/enums/EventType\";\r\n\r\nexport class MouseEventUtil {\r\n    public static getEventType(event: Event): EventType | null {\r\n        if (!event) return null;\r\n\r\n        switch (event.type) {\r\n            case EventType.MOUSE_DOWN:\r\n                return EventType.MOUSE_DOWN;\r\n            case EventType.MOUSE_UP:\r\n                return EventType.MOUSE_UP;\r\n            case EventType.MOUSE_MOVE:\r\n                return EventType.MOUSE_MOVE;\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n}","export enum LabelStatus {\r\n    ACCEPTED = \"ACCEPTED\",\r\n    REJECTED = \"REJECTED\",\r\n    UNDECIDED = \"UNDECIDED\"\r\n}","import {store} from '../..';\r\nimport {PopupWindowType} from '../../data/enums/PopupWindowType';\r\nimport {ContextType} from '../../data/enums/ContextType';\r\nimport {CustomCursorStyle} from '../../data/enums/CustomCursorStyle';\r\nimport {ProjectType} from '../../data/enums/ProjectType';\r\n\r\nexport class GeneralSelector {\r\n    public static getActivePopupType(): PopupWindowType {\r\n        return store.getState().general.activePopupType;\r\n    }\r\n\r\n    public static getActiveContext(): ContextType {\r\n        return store.getState().general.activeContext;\r\n    }\r\n\r\n    public static getPreventCustomCursorStatus(): boolean {\r\n        return store.getState().general.preventCustomCursor;\r\n    }\r\n\r\n    public static getImageDragModeStatus(): boolean {\r\n        return store.getState().general.imageDragMode;\r\n    }\r\n\r\n    public static getCrossHairVisibleStatus(): boolean {\r\n        return store.getState().general.crossHairVisible;\r\n    }\r\n\r\n    public static getCustomCursorStyle(): CustomCursorStyle {\r\n        return store.getState().general.customCursorStyle;\r\n    }\r\n\r\n    public static getProjectName(): string {\r\n        return store.getState().general.projectData.name;\r\n    }\r\n\r\n    public static getProjectType(): ProjectType {\r\n        return store.getState().general.projectData.type;\r\n    }\r\n\r\n    public static getZoom(): number {\r\n        return store.getState().general.zoom;\r\n    }\r\n\r\n    public static getEnablePerClassColorationStatus(): boolean {\r\n        return store.getState().general.enablePerClassColoration\r\n    }\r\n}\r\n","import {EditorData} from '../../data/EditorData';\r\nimport {MouseEventUtil} from '../../utils/MouseEventUtil';\r\nimport {EventType} from '../../data/enums/EventType';\r\nimport {LabelType} from '../../data/enums/LabelType';\r\nimport {GeneralSelector} from '../../store/selectors/GeneralSelector';\r\nimport {RenderEngineSettings} from '../../settings/RenderEngineSettings';\r\nimport {LabelName} from '../../store/labels/types';\r\nimport {LabelsSelector} from '../../store/selectors/LabelsSelector';\r\n\r\nexport abstract class BaseRenderEngine {\r\n    protected readonly canvas: HTMLCanvasElement;\r\n    public labelType: LabelType;\r\n\r\n    protected constructor(canvas: HTMLCanvasElement) {\r\n        this.canvas = canvas;\r\n    }\r\n\r\n    public update(data: EditorData): void {\r\n        if (!!data.event) {\r\n            switch (MouseEventUtil.getEventType(data.event)) {\r\n                case EventType.MOUSE_MOVE:\r\n                    this.mouseMoveHandler(data);\r\n                    break;\r\n                case EventType.MOUSE_UP:\r\n                    this.mouseUpHandler(data);\r\n                    break;\r\n                case EventType.MOUSE_DOWN:\r\n                    this.mouseDownHandler(data);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    protected abstract mouseDownHandler(data: EditorData): void;\r\n    protected abstract mouseMoveHandler(data: EditorData): void;\r\n    protected abstract mouseUpHandler(data: EditorData): void;\r\n\r\n    abstract render(data: EditorData): void;\r\n\r\n    abstract isInProgress(): boolean;\r\n\r\n    protected static resolveLabelLineColor(labelId: string, isActive: boolean): string {\r\n        const perClassColor: boolean = GeneralSelector.getEnablePerClassColorationStatus();\r\n        if (perClassColor) {\r\n            const labelName: LabelName | null = LabelsSelector.getLabelNameById(labelId);\r\n            return labelName ? labelName.color : RenderEngineSettings.DEFAULT_LINE_COLOR;\r\n        } else {\r\n            return isActive ? RenderEngineSettings.ACTIVE_LINE_COLOR : RenderEngineSettings.INACTIVE_LINE_COLOR;\r\n        }\r\n    }\r\n\r\n    protected static resolveLabelAnchorColor(isActive: boolean): string {\r\n        const perClassColor: boolean = GeneralSelector.getEnablePerClassColorationStatus();\r\n        if (perClassColor) {\r\n            return RenderEngineSettings.DEFAULT_ANCHOR_COLOR;\r\n        } else {\r\n            return isActive ? RenderEngineSettings.ACTIVE_ANCHOR_COLOR : RenderEngineSettings.INACTIVE_ANCHOR_COLOR;\r\n        }\r\n    }\r\n}\r\n","import {ILine} from \"../interfaces/ILine\";\r\nimport {IPoint} from \"../interfaces/IPoint\";\r\n\r\nexport class LineUtil {\r\n    public static getDistanceFromLine(l: ILine, p: IPoint): number {\r\n        if (l.start.x !== l.end.x || l.start.y !== l.end.y) {\r\n            const nom: number = Math.abs((l.end.y - l.start.y) * p.x - (l.end.x - l.start.x) * p.y + l.end.x * l.start.y - l.end.y * l.start.x);\r\n            const denom: number = Math.sqrt(Math.pow(l.end.y - l.start.y, 2) + Math.pow(l.end.x - l.start.x, 2));\r\n            return nom / denom;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public static getCenter(l: ILine): IPoint {\r\n        return {\r\n            x: (l.start.x + l.end.x) / 2,\r\n            y: (l.start.y + l.end.y) / 2\r\n        }\r\n    }\r\n\r\n    public static getPoints(l: ILine): IPoint[] {\r\n        return [l.start, l.end]\r\n    }\r\n}","import {EditorData} from \"../data/EditorData\";\r\nimport {RectUtil} from \"./RectUtil\";\r\nimport {store} from \"../index\";\r\nimport {CustomCursorStyle} from \"../data/enums/CustomCursorStyle\";\r\nimport {updateCustomCursorStyle} from \"../store/general/actionCreators\";\r\nimport {IPoint} from \"../interfaces/IPoint\";\r\nimport {PointUtil} from \"./PointUtil\";\r\nimport {IRect} from \"../interfaces/IRect\";\r\nimport {ILine} from \"../interfaces/ILine\";\r\nimport {LineUtil} from \"./LineUtil\";\r\nimport {ISize} from \"../interfaces/ISize\";\r\n\r\nexport class RenderEngineUtil {\r\n    public static calculateImageScale(data: EditorData): number {\r\n        return data.realImageSize.width / data.viewPortContentImageRect.width;\r\n    }\r\n\r\n    public static isMouseOverImage(data: EditorData): boolean {\r\n        return RectUtil.isPointInside(data.viewPortContentImageRect, data.mousePositionOnViewPortContent);\r\n    }\r\n\r\n    public static isMouseOverCanvas(data: EditorData): boolean {\r\n        return RectUtil.isPointInside({x: 0, y: 0, ...data.viewPortContentSize}, data.mousePositionOnViewPortContent);\r\n    }\r\n\r\n    public static transferPointFromImageToViewPortContent(point: IPoint, data: EditorData): IPoint {\r\n        const scale = RenderEngineUtil.calculateImageScale(data);\r\n        return PointUtil.add(PointUtil.multiply(point, 1/scale), data.viewPortContentImageRect);\r\n    }\r\n\r\n    public static transferPolygonFromImageToViewPortContent(polygon: IPoint[], data: EditorData): IPoint[] {\r\n        return polygon.map((point: IPoint) => RenderEngineUtil.transferPointFromImageToViewPortContent(point, data));\r\n    }\r\n\r\n    public static transferLineFromImageToViewPortContent(line: ILine, data: EditorData): ILine {\r\n        return {\r\n            start: RenderEngineUtil.transferPointFromImageToViewPortContent(line.start, data),\r\n            end: RenderEngineUtil.transferPointFromImageToViewPortContent(line.end, data)\r\n        }\r\n    }\r\n\r\n    public static transferPointFromViewPortContentToImage(point: IPoint, data: EditorData): IPoint {\r\n        const scale = RenderEngineUtil.calculateImageScale(data);\r\n        return PointUtil.multiply(PointUtil.subtract(point, data.viewPortContentImageRect), scale);\r\n    }\r\n\r\n    public static transferPolygonFromViewPortContentToImage(polygon: IPoint[], data: EditorData): IPoint[] {\r\n        return polygon.map((point: IPoint) => RenderEngineUtil.transferPointFromViewPortContentToImage(point, data));\r\n    }\r\n\r\n    public static transferLineFromViewPortContentToImage(line: ILine, data: EditorData): ILine {\r\n        return {\r\n            start: RenderEngineUtil.transferPointFromViewPortContentToImage(line.start, data),\r\n            end: RenderEngineUtil.transferPointFromViewPortContentToImage(line.end, data)\r\n        }\r\n    }\r\n\r\n    public static transferRectFromViewPortContentToImage(rect: IRect, data: EditorData): IRect {\r\n        const scale = RenderEngineUtil.calculateImageScale(data);\r\n        return RectUtil.translate(RectUtil.scaleRect(rect, 1/scale), data.viewPortContentImageRect);\r\n    }\r\n\r\n    public static transferRectFromImageToViewPortContent(rect: IRect, data: EditorData): IRect {\r\n        const scale = RenderEngineUtil.calculateImageScale(data);\r\n        const translation: IPoint = {\r\n            x: - data.viewPortContentImageRect.x,\r\n            y: - data.viewPortContentImageRect.y\r\n        };\r\n\r\n        return RectUtil.scaleRect(RectUtil.translate(rect, translation), scale);\r\n    }\r\n\r\n    public static wrapDefaultCursorStyleInCancel(data: EditorData) {\r\n        if (RectUtil.isPointInside(data.viewPortContentImageRect, data.mousePositionOnViewPortContent)) {\r\n            store.dispatch(updateCustomCursorStyle(CustomCursorStyle.DEFAULT));\r\n        } else {\r\n            store.dispatch(updateCustomCursorStyle(CustomCursorStyle.CANCEL));\r\n        }\r\n    }\r\n\r\n    public static setValueBetweenPixels(value: number): number {\r\n        return Math.floor(value) + 0.5;\r\n    }\r\n\r\n    public static setPointBetweenPixels(point: IPoint): IPoint {\r\n        return {\r\n            x: RenderEngineUtil.setValueBetweenPixels(point.x),\r\n            y: RenderEngineUtil.setValueBetweenPixels(point.y)\r\n        }\r\n    }\r\n\r\n    public static setRectBetweenPixels(rect: IRect): IRect {\r\n        const topLeft: IPoint = {\r\n            x: rect.x,\r\n            y: rect.y\r\n        };\r\n        const bottomRight: IPoint = {\r\n            x: rect.x + rect.width,\r\n            y: rect.y + rect.height\r\n        };\r\n        const topLeftBetweenPixels = RenderEngineUtil.setPointBetweenPixels(topLeft);\r\n        const bottomRightBetweenPixels = RenderEngineUtil.setPointBetweenPixels(bottomRight);\r\n        return {\r\n            x: topLeftBetweenPixels.x,\r\n            y: topLeftBetweenPixels.y,\r\n            width: bottomRightBetweenPixels.x - topLeftBetweenPixels.x,\r\n            height: bottomRightBetweenPixels.y - topLeftBetweenPixels.y\r\n        }\r\n    }\r\n\r\n    public static isMouseOverLine(mouse: IPoint, l: ILine, radius: number): boolean {\r\n        const minX: number = Math.min(l.start.x, l.end.x);\r\n        const maxX: number = Math.max(l.start.x, l.end.x);\r\n        const minY: number = Math.min(l.start.y, l.end.y);\r\n        const maxY: number = Math.max(l.start.y, l.end.y);\r\n\r\n        return (minX - radius <= mouse.x && maxX + radius >= mouse.x) &&\r\n            (minY - radius <= mouse.y && maxY + radius >= mouse.y) &&\r\n            LineUtil.getDistanceFromLine(l, mouse) < radius;\r\n    }\r\n\r\n    public static isMouseOverAnchor(mouse: IPoint, anchor: IPoint, size: ISize): boolean {\r\n        if (!mouse || !anchor) return null;\r\n        return RectUtil.isPointInside(RectUtil.getRectWithCenterAndSize(anchor, size), mouse);\r\n    }\r\n}","import {LabelName, LabelPolygon, LabelRect} from '../store/labels/types';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport {find} from 'lodash';\r\nimport {IRect} from '../interfaces/IRect';\r\nimport {LabelStatus} from '../data/enums/LabelStatus';\r\nimport {IPoint} from '../interfaces/IPoint';\r\nimport { sample } from 'lodash';\r\nimport {Settings} from '../settings/Settings';\r\n\r\nexport class LabelUtil {\r\n    public static createLabelName(name: string): LabelName {\r\n        return {\r\n            id: uuidv4(),\r\n            name,\r\n            color: sample(Settings.LABEL_COLORS_PALETTE)\r\n        }\r\n    }\r\n\r\n    public static createLabelRect(labelId: string, rect: IRect): LabelRect {\r\n        return {\r\n            id: uuidv4(),\r\n            labelId,\r\n            rect,\r\n            isCreatedByAI: false,\r\n            status: LabelStatus.ACCEPTED,\r\n            suggestedLabel: null\r\n        }\r\n    }\r\n\r\n    public static createLabelPolygon(labelId: string, vertices: IPoint[]): LabelPolygon {\r\n        return {\r\n            id: uuidv4(),\r\n            labelId,\r\n            vertices,\r\n            isCreatedByAI: false,\r\n            status: LabelStatus.ACCEPTED,\r\n            suggestedLabel: null\r\n        }\r\n    }\r\n\r\n    public static labelNamesIdsDiff(oldLabelNames: LabelName[], newLabelNames: LabelName[]): string[] {\r\n        return oldLabelNames.reduce((missingIds: string[], labelName: LabelName) => {\r\n            if (!find(newLabelNames, { 'id': labelName.id })) {\r\n                missingIds.push(labelName.id);\r\n            }\r\n            return missingIds\r\n        }, [])\r\n    }\r\n}\r\n","import {IPoint} from '../../interfaces/IPoint';\r\nimport {IRect} from '../../interfaces/IRect';\r\nimport {RectUtil} from '../../utils/RectUtil';\r\nimport {DrawUtil} from '../../utils/DrawUtil';\r\nimport {store} from '../..';\r\nimport {ImageData, LabelRect} from '../../store/labels/types';\r\nimport {\r\n    updateActiveLabelId,\r\n    updateFirstLabelCreatedFlag,\r\n    updateHighlightedLabelId,\r\n    updateImageDataById\r\n} from '../../store/labels/actionCreators';\r\nimport {PointUtil} from '../../utils/PointUtil';\r\nimport {RectAnchor} from '../../data/RectAnchor';\r\nimport {RenderEngineSettings} from '../../settings/RenderEngineSettings';\r\nimport {updateCustomCursorStyle} from '../../store/general/actionCreators';\r\nimport {CustomCursorStyle} from '../../data/enums/CustomCursorStyle';\r\nimport {LabelsSelector} from '../../store/selectors/LabelsSelector';\r\nimport {EditorData} from '../../data/EditorData';\r\nimport {BaseRenderEngine} from './BaseRenderEngine';\r\nimport {RenderEngineUtil} from '../../utils/RenderEngineUtil';\r\nimport {LabelType} from '../../data/enums/LabelType';\r\nimport {EditorActions} from '../actions/EditorActions';\r\nimport {GeneralSelector} from '../../store/selectors/GeneralSelector';\r\nimport {LabelStatus} from '../../data/enums/LabelStatus';\r\nimport {LabelUtil} from '../../utils/LabelUtil';\r\n\r\nexport class RectRenderEngine extends BaseRenderEngine {\r\n\r\n    // =================================================================================================================\r\n    // STATE\r\n    // =================================================================================================================\r\n\r\n    private startCreateRectPoint: IPoint;\r\n    private startResizeRectAnchor: RectAnchor;\r\n\r\n    public constructor(canvas: HTMLCanvasElement) {\r\n        super(canvas);\r\n        this.labelType = LabelType.RECT;\r\n    }\r\n\r\n    // =================================================================================================================\r\n    // EVENT HANDLERS\r\n    // =================================================================================================================\r\n\r\n    public mouseDownHandler = (data: EditorData) => {\r\n        const isMouseOverImage: boolean = RenderEngineUtil.isMouseOverImage(data);\r\n        const isMouseOverCanvas: boolean = RenderEngineUtil.isMouseOverCanvas(data);\r\n        if (isMouseOverCanvas) {\r\n            const rectUnderMouse: LabelRect = this.getRectUnderMouse(data);\r\n            if (!!rectUnderMouse) {\r\n                const rect: IRect = this.calculateRectRelativeToActiveImage(rectUnderMouse.rect, data);\r\n                const anchorUnderMouse: RectAnchor = this.getAnchorUnderMouseByRect(rect, data.mousePositionOnViewPortContent, data.viewPortContentImageRect);\r\n                if (!!anchorUnderMouse && rectUnderMouse.status === LabelStatus.ACCEPTED) {\r\n                    store.dispatch(updateActiveLabelId(rectUnderMouse.id));\r\n                    this.startRectResize(anchorUnderMouse);\r\n                } else {\r\n                    if (!!LabelsSelector.getHighlightedLabelId())\r\n                        store.dispatch(updateActiveLabelId(LabelsSelector.getHighlightedLabelId()));\r\n                    else\r\n                        this.startRectCreation(data.mousePositionOnViewPortContent);\r\n                }\r\n            } else if (isMouseOverImage) {\r\n\r\n                this.startRectCreation(data.mousePositionOnViewPortContent);\r\n            }\r\n        }\r\n    };\r\n\r\n    public mouseUpHandler = (data: EditorData) => {\r\n        if (!!data.viewPortContentImageRect) {\r\n            const mousePositionSnapped: IPoint = RectUtil.snapPointToRect(data.mousePositionOnViewPortContent, data.viewPortContentImageRect);\r\n            const activeLabelRect: LabelRect = LabelsSelector.getActiveRectLabel();\r\n\r\n            if (!!this.startCreateRectPoint && !PointUtil.equals(this.startCreateRectPoint, mousePositionSnapped)) {\r\n\r\n                const minX: number = Math.min(this.startCreateRectPoint.x, mousePositionSnapped.x);\r\n                const minY: number = Math.min(this.startCreateRectPoint.y, mousePositionSnapped.y);\r\n                const maxX: number = Math.max(this.startCreateRectPoint.x, mousePositionSnapped.x);\r\n                const maxY: number = Math.max(this.startCreateRectPoint.y, mousePositionSnapped.y);\r\n\r\n                const rect = {x: minX, y: minY, width: maxX - minX, height: maxY - minY};\r\n                this.addRectLabel(RenderEngineUtil.transferRectFromImageToViewPortContent(rect, data));\r\n            }\r\n\r\n            if (!!this.startResizeRectAnchor && !!activeLabelRect) {\r\n                const rect: IRect = this.calculateRectRelativeToActiveImage(activeLabelRect.rect, data);\r\n                const startAnchorPosition: IPoint = PointUtil.add(this.startResizeRectAnchor.position,\r\n                    data.viewPortContentImageRect);\r\n                const delta: IPoint = PointUtil.subtract(mousePositionSnapped, startAnchorPosition);\r\n                const resizeRect: IRect = RectUtil.resizeRect(rect, this.startResizeRectAnchor.type, delta);\r\n                const scale: number = RenderEngineUtil.calculateImageScale(data);\r\n                const scaledRect: IRect = RectUtil.scaleRect(resizeRect, scale);\r\n\r\n                const imageData = LabelsSelector.getActiveImageData();\r\n                imageData.labelRects = imageData.labelRects.map((labelRect: LabelRect) => {\r\n                    if (labelRect.id === activeLabelRect.id) {\r\n                        return {\r\n                            ...labelRect,\r\n                            rect: scaledRect\r\n                        };\r\n                    }\r\n                    return labelRect;\r\n                });\r\n                store.dispatch(updateImageDataById(imageData.id, imageData));\r\n            }\r\n        }\r\n        this.endRectTransformation()\r\n    };\r\n\r\n    public mouseMoveHandler = (data: EditorData) => {\r\n        if (!!data.viewPortContentImageRect && !!data.mousePositionOnViewPortContent) {\r\n            const isOverImage: boolean = RenderEngineUtil.isMouseOverImage(data);\r\n            if (isOverImage && !this.startResizeRectAnchor) {\r\n                const labelRect: LabelRect = this.getRectUnderMouse(data);\r\n                if (!!labelRect && !this.isInProgress()) {\r\n                    if (LabelsSelector.getHighlightedLabelId() !== labelRect.id) {\r\n                        store.dispatch(updateHighlightedLabelId(labelRect.id))\r\n                    }\r\n                } else {\r\n                    if (LabelsSelector.getHighlightedLabelId() !== null) {\r\n                        store.dispatch(updateHighlightedLabelId(null))\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    // =================================================================================================================\r\n    // RENDERING\r\n    // =================================================================================================================\r\n\r\n    public render(data: EditorData) {\r\n        const activeLabelId: string = LabelsSelector.getActiveLabelId();\r\n        const imageData: ImageData = LabelsSelector.getActiveImageData();\r\n        if (imageData) {\r\n            imageData.labelRects.forEach((labelRect: LabelRect) => {\r\n                if (labelRect.status === LabelStatus.ACCEPTED && labelRect.id === activeLabelId) {\r\n                    this.drawActiveRect(labelRect, data)\r\n                } else {\r\n                    this.drawInactiveRect(labelRect, data);\r\n                }\r\n            });\r\n            this.drawCurrentlyCreatedRect(data.mousePositionOnViewPortContent, data.viewPortContentImageRect);\r\n            this.updateCursorStyle(data);\r\n        }\r\n    }\r\n\r\n    private drawCurrentlyCreatedRect(mousePosition: IPoint, imageRect: IRect) {\r\n        if (!!this.startCreateRectPoint) {\r\n            const mousePositionSnapped: IPoint = RectUtil.snapPointToRect(mousePosition, imageRect);\r\n            const activeRect: IRect = {\r\n                x: this.startCreateRectPoint.x,\r\n                y: this.startCreateRectPoint.y,\r\n                width: mousePositionSnapped.x - this.startCreateRectPoint.x,\r\n                height: mousePositionSnapped.y - this.startCreateRectPoint.y\r\n            };\r\n            const activeRectBetweenPixels = RenderEngineUtil.setRectBetweenPixels(activeRect);\r\n            const lineColor: string = BaseRenderEngine.resolveLabelLineColor(null, true)\r\n            DrawUtil.drawRect(this.canvas, activeRectBetweenPixels, lineColor, RenderEngineSettings.LINE_THICKNESS);\r\n        }\r\n    }\r\n\r\n    private drawInactiveRect(labelRect: LabelRect, data: EditorData) {\r\n        const rectOnImage: IRect = RenderEngineUtil.transferRectFromViewPortContentToImage(labelRect.rect, data)\r\n        const highlightedLabelId: string = LabelsSelector.getHighlightedLabelId()\r\n        const displayAsActive: boolean = labelRect.status === LabelStatus.ACCEPTED && labelRect.id === highlightedLabelId;\r\n        const lineColor: string = BaseRenderEngine.resolveLabelLineColor(labelRect.labelId, displayAsActive)\r\n        const anchorColor: string = BaseRenderEngine.resolveLabelAnchorColor(displayAsActive);\r\n        this.renderRect(rectOnImage, displayAsActive, lineColor, anchorColor);\r\n    }\r\n\r\n    private drawActiveRect(labelRect: LabelRect, data: EditorData) {\r\n        let rect: IRect = this.calculateRectRelativeToActiveImage(labelRect.rect, data);\r\n        if (!!this.startResizeRectAnchor) {\r\n            const startAnchorPosition: IPoint = PointUtil.add(this.startResizeRectAnchor.position, data.viewPortContentImageRect);\r\n            const endAnchorPositionSnapped: IPoint = RectUtil.snapPointToRect(data.mousePositionOnViewPortContent, data.viewPortContentImageRect);\r\n            const delta = PointUtil.subtract(endAnchorPositionSnapped, startAnchorPosition);\r\n            rect = RectUtil.resizeRect(rect, this.startResizeRectAnchor.type, delta);\r\n        }\r\n        const rectOnImage: IRect = RectUtil.translate(rect, data.viewPortContentImageRect);\r\n        const lineColor: string = BaseRenderEngine.resolveLabelLineColor(labelRect.labelId, true)\r\n        const anchorColor: string = BaseRenderEngine.resolveLabelAnchorColor(true);\r\n        this.renderRect(rectOnImage, true, lineColor, anchorColor);\r\n    }\r\n\r\n    private renderRect(rectOnImage: IRect, isActive: boolean, lineColor: string, anchorColor: string) {\r\n        const rectBetweenPixels = RenderEngineUtil.setRectBetweenPixels(rectOnImage);\r\n        DrawUtil.drawRectWithFill(this.canvas, rectBetweenPixels, DrawUtil.hexToRGB(lineColor, 0.2));\r\n        DrawUtil.drawRect(this.canvas, rectBetweenPixels, lineColor, RenderEngineSettings.LINE_THICKNESS);\r\n        if (isActive) {\r\n            const handleCenters: IPoint[] = RectUtil.mapRectToAnchors(rectOnImage).map((rectAnchor: RectAnchor) => rectAnchor.position);\r\n            handleCenters.forEach((center: IPoint) => {\r\n                const handleRect: IRect = RectUtil.getRectWithCenterAndSize(center, RenderEngineSettings.anchorSize);\r\n                const handleRectBetweenPixels: IRect = RenderEngineUtil.setRectBetweenPixels(handleRect);\r\n                DrawUtil.drawRectWithFill(this.canvas, handleRectBetweenPixels, anchorColor);\r\n            })\r\n        }\r\n    }\r\n\r\n    private updateCursorStyle(data: EditorData) {\r\n        if (!!this.canvas && !!data.mousePositionOnViewPortContent && !GeneralSelector.getImageDragModeStatus()) {\r\n            const rectUnderMouse: LabelRect = this.getRectUnderMouse(data);\r\n            const rectAnchorUnderMouse: RectAnchor = this.getAnchorUnderMouse(data);\r\n            if ((!!rectAnchorUnderMouse && rectUnderMouse && rectUnderMouse.status === LabelStatus.ACCEPTED) || !!this.startResizeRectAnchor) {\r\n                store.dispatch(updateCustomCursorStyle(CustomCursorStyle.MOVE));\r\n                return;\r\n            }\r\n            else if (RenderEngineUtil.isMouseOverCanvas(data)) {\r\n                if (!RenderEngineUtil.isMouseOverImage(data) && !!this.startCreateRectPoint)\r\n                    store.dispatch(updateCustomCursorStyle(CustomCursorStyle.MOVE));\r\n                else\r\n                    RenderEngineUtil.wrapDefaultCursorStyleInCancel(data);\r\n                this.canvas.style.cursor = 'none';\r\n            } else {\r\n                this.canvas.style.cursor = 'default';\r\n            }\r\n        }\r\n    }\r\n\r\n    // =================================================================================================================\r\n    // HELPERS\r\n    // =================================================================================================================\r\n\r\n    public isInProgress(): boolean {\r\n        return !!this.startCreateRectPoint || !!this.startResizeRectAnchor;\r\n    }\r\n\r\n    private calculateRectRelativeToActiveImage(rect: IRect, data: EditorData):IRect {\r\n        const scale: number = RenderEngineUtil.calculateImageScale(data);\r\n        return RectUtil.scaleRect(rect, 1/scale);\r\n    }\r\n\r\n    private addRectLabel = (rect: IRect) => {\r\n        const activeLabelId = LabelsSelector.getActiveLabelNameId();\r\n        const imageData: ImageData = LabelsSelector.getActiveImageData();\r\n        const labelRect: LabelRect = LabelUtil.createLabelRect(activeLabelId, rect);\r\n        imageData.labelRects.push(labelRect);\r\n        store.dispatch(updateImageDataById(imageData.id, imageData));\r\n        store.dispatch(updateFirstLabelCreatedFlag(true));\r\n        store.dispatch(updateActiveLabelId(labelRect.id));\r\n    };\r\n\r\n    private getRectUnderMouse(data: EditorData): LabelRect {\r\n        const activeRectLabel: LabelRect = LabelsSelector.getActiveRectLabel();\r\n        if (!!activeRectLabel && this.isMouseOverRectEdges(activeRectLabel.rect, data)) {\r\n            return activeRectLabel;\r\n        }\r\n\r\n        const labelRects: LabelRect[] = LabelsSelector.getActiveImageData().labelRects;\r\n        for (let i = 0; i < labelRects.length; i++) {\r\n            if (this.isMouseOverRectEdges(labelRects[i].rect, data)) {\r\n                return labelRects[i];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private isMouseOverRectEdges(rect: IRect, data: EditorData): boolean {\r\n        const rectOnImage: IRect = RectUtil.translate(\r\n            this.calculateRectRelativeToActiveImage(rect, data), data.viewPortContentImageRect);\r\n\r\n        const outerRectDelta: IPoint = {\r\n            x: RenderEngineSettings.anchorHoverSize.width / 2,\r\n            y: RenderEngineSettings.anchorHoverSize.height / 2\r\n        };\r\n        const outerRect: IRect = RectUtil.expand(rectOnImage, outerRectDelta);\r\n\r\n        const innerRectDelta: IPoint = {\r\n            x: - RenderEngineSettings.anchorHoverSize.width / 2,\r\n            y: - RenderEngineSettings.anchorHoverSize.height / 2\r\n        };\r\n        const innerRect: IRect = RectUtil.expand(rectOnImage, innerRectDelta);\r\n\r\n        return (RectUtil.isPointInside(outerRect, data.mousePositionOnViewPortContent) &&\r\n            !RectUtil.isPointInside(innerRect, data.mousePositionOnViewPortContent));\r\n    }\r\n\r\n    private getAnchorUnderMouseByRect(rect: IRect, mousePosition: IPoint, imageRect: IRect): RectAnchor {\r\n        const rectAnchors: RectAnchor[] = RectUtil.mapRectToAnchors(rect);\r\n        for (let i = 0; i < rectAnchors.length; i++) {\r\n            const anchorRect: IRect = RectUtil.translate(RectUtil.getRectWithCenterAndSize(rectAnchors[i].position, RenderEngineSettings.anchorHoverSize), imageRect);\r\n            if (!!mousePosition && RectUtil.isPointInside(anchorRect, mousePosition)) {\r\n                return rectAnchors[i];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private getAnchorUnderMouse(data: EditorData): RectAnchor {\r\n        const labelRects: LabelRect[] = LabelsSelector.getActiveImageData().labelRects;\r\n        for (let i = 0; i < labelRects.length; i++) {\r\n            const rect: IRect = this.calculateRectRelativeToActiveImage(labelRects[i].rect, data);\r\n            const rectAnchor = this.getAnchorUnderMouseByRect(rect, data.mousePositionOnViewPortContent, data.viewPortContentImageRect);\r\n            if (!!rectAnchor) return rectAnchor;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private startRectCreation(mousePosition: IPoint) {\r\n        this.startCreateRectPoint = mousePosition;\r\n        store.dispatch(updateActiveLabelId(null));\r\n        EditorActions.setViewPortActionsDisabledStatus(true);\r\n    }\r\n\r\n    private startRectResize(activatedAnchor: RectAnchor) {\r\n        this.startResizeRectAnchor = activatedAnchor;\r\n        EditorActions.setViewPortActionsDisabledStatus(true);\r\n    }\r\n\r\n    private endRectTransformation() {\r\n        this.startCreateRectPoint = null;\r\n        this.startResizeRectAnchor = null;\r\n        EditorActions.setViewPortActionsDisabledStatus(false);\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport {IPoint} from \"../interfaces/IPoint\";\r\nimport {IRect} from \"../interfaces/IRect\";\r\nimport {ISize} from \"../interfaces/ISize\";\r\n\r\nexport class CanvasUtil {\r\n    public static getMousePositionOnCanvasFromEvent(event: React.MouseEvent<HTMLCanvasElement, MouseEvent> | MouseEvent, canvas: HTMLCanvasElement): IPoint {\r\n        if (!!canvas && !!event) {\r\n            const canvasRect: ClientRect | DOMRect = canvas.getBoundingClientRect();\r\n            return {\r\n                x: event.clientX - canvasRect.left,\r\n                y: event.clientY - canvasRect.top\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public static getClientRect(canvas: HTMLCanvasElement): IRect {\r\n        if (!!canvas) {\r\n            const canvasRect: ClientRect | DOMRect = canvas.getBoundingClientRect();\r\n            return {\r\n                x: canvasRect.left,\r\n                y: canvasRect.top,\r\n                width: canvasRect.width,\r\n                height: canvasRect.height\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public static getSize(canvas: HTMLCanvasElement): ISize {\r\n        if (!!canvas) {\r\n            const canvasRect: ClientRect | DOMRect = canvas.getBoundingClientRect();\r\n            return {\r\n                width: canvasRect.width,\r\n                height: canvasRect.height\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}","import {IRect} from '../../interfaces/IRect';\r\nimport {RenderEngineSettings} from '../../settings/RenderEngineSettings';\r\nimport {IPoint} from '../../interfaces/IPoint';\r\nimport {CanvasUtil} from '../../utils/CanvasUtil';\r\nimport {store} from '../../index';\r\nimport {ImageData, LabelPoint} from '../../store/labels/types';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport {\r\n    updateActiveLabelId,\r\n    updateFirstLabelCreatedFlag,\r\n    updateHighlightedLabelId,\r\n    updateImageDataById\r\n} from '../../store/labels/actionCreators';\r\nimport {RectUtil} from '../../utils/RectUtil';\r\nimport {DrawUtil} from '../../utils/DrawUtil';\r\nimport {updateCustomCursorStyle} from '../../store/general/actionCreators';\r\nimport {CustomCursorStyle} from '../../data/enums/CustomCursorStyle';\r\nimport {LabelsSelector} from '../../store/selectors/LabelsSelector';\r\nimport {EditorData} from '../../data/EditorData';\r\nimport {BaseRenderEngine} from './BaseRenderEngine';\r\nimport {RenderEngineUtil} from '../../utils/RenderEngineUtil';\r\nimport {LabelType} from '../../data/enums/LabelType';\r\nimport {EditorActions} from '../actions/EditorActions';\r\nimport {EditorModel} from '../../staticModels/EditorModel';\r\nimport {GeneralSelector} from '../../store/selectors/GeneralSelector';\r\nimport {LabelStatus} from '../../data/enums/LabelStatus';\r\nimport {Settings} from '../../settings/Settings';\r\n\r\nexport class PointRenderEngine extends BaseRenderEngine {\r\n\r\n    // =================================================================================================================\r\n    // STATE\r\n    // =================================================================================================================\r\n\r\n    public constructor(canvas: HTMLCanvasElement) {\r\n        super(canvas);\r\n        this.labelType = LabelType.POINT;\r\n    }\r\n\r\n    // =================================================================================================================\r\n    // EVENT HANDLERS\r\n    // =================================================================================================================\r\n\r\n    public mouseDownHandler(data: EditorData): void {\r\n        const isMouseOverImage: boolean = RenderEngineUtil.isMouseOverImage(data);\r\n        const isMouseOverCanvas: boolean = RenderEngineUtil.isMouseOverCanvas(data);\r\n\r\n        if (isMouseOverCanvas) {\r\n            const labelPoint: LabelPoint = this.getLabelPointUnderMouse(data.mousePositionOnViewPortContent, data);\r\n            if (!!labelPoint) {\r\n                const pointOnCanvas: IPoint = RenderEngineUtil.transferPointFromImageToViewPortContent(labelPoint.point, data);\r\n                const pointBetweenPixels = RenderEngineUtil.setPointBetweenPixels(pointOnCanvas);\r\n                const handleRect: IRect = RectUtil.getRectWithCenterAndSize(pointBetweenPixels, RenderEngineSettings.anchorHoverSize);\r\n                if (RectUtil.isPointInside(handleRect, data.mousePositionOnViewPortContent)) {\r\n                    store.dispatch(updateActiveLabelId(labelPoint.id));\r\n                    EditorActions.setViewPortActionsDisabledStatus(true);\r\n                    return;\r\n                } else {\r\n                    store.dispatch(updateActiveLabelId(null));\r\n                    const pointOnImage: IPoint = RenderEngineUtil.transferPointFromViewPortContentToImage(data.mousePositionOnViewPortContent, data);\r\n                    this.addPointLabel(pointOnImage);\r\n                }\r\n            } else if (isMouseOverImage) {\r\n                const pointOnImage: IPoint = RenderEngineUtil.transferPointFromViewPortContentToImage(data.mousePositionOnViewPortContent, data);\r\n                this.addPointLabel(pointOnImage);\r\n            }\r\n        }\r\n    }\r\n\r\n    public mouseUpHandler(data: EditorData): void {\r\n        if (this.isInProgress()) {\r\n            const activeLabelPoint: LabelPoint = LabelsSelector.getActivePointLabel();\r\n            const pointSnapped: IPoint = RectUtil.snapPointToRect(data.mousePositionOnViewPortContent, data.viewPortContentImageRect);\r\n            const pointOnImage: IPoint = RenderEngineUtil.transferPointFromViewPortContentToImage(pointSnapped, data);\r\n            const imageData = LabelsSelector.getActiveImageData();\r\n\r\n            imageData.labelPoints = imageData.labelPoints.map((labelPoint: LabelPoint) => {\r\n                if (labelPoint.id === activeLabelPoint.id) {\r\n                    return {\r\n                        ...labelPoint,\r\n                        point: pointOnImage\r\n                    };\r\n                }\r\n                return labelPoint;\r\n            });\r\n            store.dispatch(updateImageDataById(imageData.id, imageData));\r\n        }\r\n        EditorActions.setViewPortActionsDisabledStatus(false);\r\n    }\r\n\r\n    public mouseMoveHandler(data: EditorData): void {\r\n        const isOverImage: boolean = RenderEngineUtil.isMouseOverImage(data);\r\n        if (isOverImage) {\r\n            const labelPoint: LabelPoint = this.getLabelPointUnderMouse(data.mousePositionOnViewPortContent, data);\r\n            if (!!labelPoint) {\r\n                if (LabelsSelector.getHighlightedLabelId() !== labelPoint.id) {\r\n                    store.dispatch(updateHighlightedLabelId(labelPoint.id))\r\n                }\r\n            } else {\r\n                if (LabelsSelector.getHighlightedLabelId() !== null) {\r\n                    store.dispatch(updateHighlightedLabelId(null))\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // =================================================================================================================\r\n    // RENDERING\r\n    // =================================================================================================================\r\n\r\n    public render(data: EditorData): void {\r\n        const activeLabelId: string = LabelsSelector.getActiveLabelId();\r\n        const highlightedLabelId: string = LabelsSelector.getHighlightedLabelId();\r\n        const imageData: ImageData = LabelsSelector.getActiveImageData();\r\n        if (imageData) {\r\n            imageData.labelPoints.forEach((labelPoint: LabelPoint) => {\r\n                if (labelPoint.id === activeLabelId) {\r\n                    if (this.isInProgress()) {\r\n                        const pointSnapped: IPoint = RectUtil.snapPointToRect(data.mousePositionOnViewPortContent, data.viewPortContentImageRect);\r\n                        const pointBetweenPixels: IPoint = RenderEngineUtil.setPointBetweenPixels(pointSnapped);\r\n                        const anchorColor: string = BaseRenderEngine.resolveLabelAnchorColor(true);\r\n                        DrawUtil.drawCircleWithFill(this.canvas, pointBetweenPixels, Settings.RESIZE_HANDLE_DIMENSION_PX/2, anchorColor)\r\n                    } else {\r\n                        this.renderPoint(labelPoint, true, data);\r\n                    }\r\n                } else {\r\n                    this.renderPoint(labelPoint, labelPoint.id === activeLabelId || labelPoint.id === highlightedLabelId, data);\r\n                }\r\n            });\r\n        }\r\n        this.updateCursorStyle(data);\r\n    }\r\n\r\n    private renderPoint(labelPoint: LabelPoint, isActive: boolean, data: EditorData) {\r\n        const pointOnImage: IPoint = RenderEngineUtil.transferPointFromImageToViewPortContent(labelPoint.point, data);\r\n        const pointBetweenPixels = RenderEngineUtil.setPointBetweenPixels(pointOnImage);\r\n        const anchorColor: string = BaseRenderEngine.resolveLabelAnchorColor(isActive);\r\n        DrawUtil.drawCircleWithFill(this.canvas, pointBetweenPixels, Settings.RESIZE_HANDLE_DIMENSION_PX/2, anchorColor)\r\n    }\r\n\r\n    private updateCursorStyle(data: EditorData) {\r\n        if (!!this.canvas && !!data.mousePositionOnViewPortContent && !GeneralSelector.getImageDragModeStatus()) {\r\n            const labelPoint: LabelPoint = this.getLabelPointUnderMouse(data.mousePositionOnViewPortContent, data);\r\n            if (!!labelPoint && labelPoint.status === LabelStatus.ACCEPTED) {\r\n                const pointOnCanvas: IPoint = RenderEngineUtil.transferPointFromImageToViewPortContent(labelPoint.point, data);\r\n                const pointBetweenPixels = RenderEngineUtil.setPointBetweenPixels(pointOnCanvas);\r\n                const handleRect: IRect = RectUtil.getRectWithCenterAndSize(pointBetweenPixels, RenderEngineSettings.anchorHoverSize);\r\n                if (RectUtil.isPointInside(handleRect, data.mousePositionOnViewPortContent)) {\r\n                    store.dispatch(updateCustomCursorStyle(CustomCursorStyle.MOVE));\r\n                    return;\r\n                }\r\n            } else if (this.isInProgress()) {\r\n                store.dispatch(updateCustomCursorStyle(CustomCursorStyle.MOVE));\r\n                return;\r\n            }\r\n\r\n            if (RectUtil.isPointInside({x: 0, y: 0, ...CanvasUtil.getSize(this.canvas)}, data.mousePositionOnViewPortContent)) {\r\n                RenderEngineUtil.wrapDefaultCursorStyleInCancel(data);\r\n                this.canvas.style.cursor = 'none';\r\n            } else {\r\n                this.canvas.style.cursor = 'default';\r\n            }\r\n        }\r\n    }\r\n\r\n    // =================================================================================================================\r\n    // HELPERS\r\n    // =================================================================================================================\r\n\r\n    public isInProgress(): boolean {\r\n        return EditorModel.viewPortActionsDisabled;\r\n    }\r\n\r\n    private getLabelPointUnderMouse(mousePosition: IPoint, data: EditorData): LabelPoint {\r\n        const labelPoints: LabelPoint[] = LabelsSelector.getActiveImageData().labelPoints;\r\n        for (let i = 0; i < labelPoints.length; i++) {\r\n            const pointOnCanvas: IPoint = RenderEngineUtil.transferPointFromImageToViewPortContent(labelPoints[i].point, data);\r\n            const handleRect: IRect = RectUtil.getRectWithCenterAndSize(pointOnCanvas, RenderEngineSettings.anchorHoverSize);\r\n            if (RectUtil.isPointInside(handleRect, mousePosition)) {\r\n                return labelPoints[i];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private addPointLabel = (point: IPoint) => {\r\n        const activeLabelId = LabelsSelector.getActiveLabelNameId();\r\n        const imageData: ImageData = LabelsSelector.getActiveImageData();\r\n        const labelPoint: LabelPoint = {\r\n            id: uuidv4(),\r\n            labelId: activeLabelId,\r\n            point,\r\n            isCreatedByAI: false,\r\n            status: LabelStatus.ACCEPTED,\r\n            suggestedLabel: null\r\n        };\r\n        imageData.labelPoints.push(labelPoint);\r\n        store.dispatch(updateImageDataById(imageData.id, imageData));\r\n        store.dispatch(updateFirstLabelCreatedFlag(true));\r\n        store.dispatch(updateActiveLabelId(labelPoint.id));\r\n    };\r\n}\r\n","import {store} from '../../index';\r\nimport {RectUtil} from '../../utils/RectUtil';\r\nimport {updateCustomCursorStyle} from '../../store/general/actionCreators';\r\nimport {CustomCursorStyle} from '../../data/enums/CustomCursorStyle';\r\nimport {EditorData} from '../../data/EditorData';\r\nimport {BaseRenderEngine} from './BaseRenderEngine';\r\nimport {RenderEngineSettings} from '../../settings/RenderEngineSettings';\r\nimport {IPoint} from '../../interfaces/IPoint';\r\nimport {ILine} from '../../interfaces/ILine';\r\nimport {DrawUtil} from '../../utils/DrawUtil';\r\nimport {IRect} from '../../interfaces/IRect';\r\nimport {ImageData, LabelPolygon} from '../../store/labels/types';\r\nimport {LabelsSelector} from '../../store/selectors/LabelsSelector';\r\nimport {\r\n    updateActiveLabelId,\r\n    updateFirstLabelCreatedFlag,\r\n    updateHighlightedLabelId,\r\n    updateImageDataById\r\n} from '../../store/labels/actionCreators';\r\nimport {LineUtil} from '../../utils/LineUtil';\r\nimport {MouseEventUtil} from '../../utils/MouseEventUtil';\r\nimport {EventType} from '../../data/enums/EventType';\r\nimport {RenderEngineUtil} from '../../utils/RenderEngineUtil';\r\nimport {LabelType} from '../../data/enums/LabelType';\r\nimport {EditorActions} from '../actions/EditorActions';\r\nimport {GeneralSelector} from '../../store/selectors/GeneralSelector';\r\nimport {Settings} from '../../settings/Settings';\r\nimport {LabelUtil} from '../../utils/LabelUtil';\r\n\r\nexport class PolygonRenderEngine extends BaseRenderEngine {\r\n\r\n    // =================================================================================================================\r\n    // STATE\r\n    // =================================================================================================================\r\n\r\n    private activePath: IPoint[] = [];\r\n    private resizeAnchorIndex: number = null;\r\n    private suggestedAnchorPositionOnCanvas: IPoint = null;\r\n    private suggestedAnchorIndexInPolygon: number = null;\r\n\r\n    public constructor(canvas: HTMLCanvasElement) {\r\n        super(canvas);\r\n        this.labelType = LabelType.POLYGON;\r\n    }\r\n\r\n    // =================================================================================================================\r\n    // EVENT HANDLERS\r\n    // =================================================================================================================\r\n\r\n    public update(data: EditorData): void {\r\n        if (!!data.event) {\r\n            switch (MouseEventUtil.getEventType(data.event)) {\r\n                case EventType.MOUSE_MOVE:\r\n                    this.mouseMoveHandler(data);\r\n                    break;\r\n                case EventType.MOUSE_UP:\r\n                    this.mouseUpHandler(data);\r\n                    break;\r\n                case EventType.MOUSE_DOWN:\r\n                    this.mouseDownHandler(data);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public mouseDownHandler(data: EditorData): void {\r\n        const isMouseOverCanvas: boolean = RenderEngineUtil.isMouseOverCanvas(data);\r\n        if (isMouseOverCanvas) {\r\n            if (this.isCreationInProgress()) {\r\n                const isMouseOverStartAnchor: boolean = RenderEngineUtil.isMouseOverAnchor(\r\n                    data.mousePositionOnViewPortContent, this.activePath[0], RenderEngineSettings.anchorSize);\r\n                if (isMouseOverStartAnchor) {\r\n                    this.addLabelAndFinishCreation(data);\r\n                } else  {\r\n                    this.updateActivelyCreatedLabel(data);\r\n                }\r\n            } else {\r\n                const polygonUnderMouse: LabelPolygon = this.getPolygonUnderMouse(data);\r\n                if (!!polygonUnderMouse) {\r\n                    const anchorIndex: number = polygonUnderMouse.vertices.reduce(\r\n                        (indexUnderMouse: number, anchor: IPoint, index: number) => {\r\n                        if (indexUnderMouse === null) {\r\n                            const anchorOnCanvas: IPoint = RenderEngineUtil.transferPointFromImageToViewPortContent(anchor, data);\r\n                            if (this.isMouseOverAnchor(data.mousePositionOnViewPortContent, anchorOnCanvas)) {\r\n                                return index;\r\n                            }\r\n                        }\r\n                        return indexUnderMouse;\r\n                    }, null);\r\n\r\n                    if (anchorIndex !== null) {\r\n                        this.startExistingLabelResize(data, polygonUnderMouse.id, anchorIndex);\r\n                    } else {\r\n                        store.dispatch(updateActiveLabelId(polygonUnderMouse.id));\r\n                        const isMouseOverNewAnchor: boolean = this.isMouseOverAnchor(data.mousePositionOnViewPortContent, this.suggestedAnchorPositionOnCanvas);\r\n                        if (isMouseOverNewAnchor) {\r\n                            this.addSuggestedAnchorToPolygonLabel(data);\r\n                        }\r\n                    }\r\n                } else {\r\n                    this.updateActivelyCreatedLabel(data);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public mouseUpHandler(data: EditorData): void {\r\n        if (this.isResizeInProgress())\r\n            this.endExistingLabelResize(data);\r\n    }\r\n\r\n    public mouseMoveHandler(data: EditorData): void {\r\n        if (!!data.viewPortContentImageRect && !!data.mousePositionOnViewPortContent) {\r\n            const isOverImage: boolean = RenderEngineUtil.isMouseOverImage(data);\r\n            if (isOverImage && !this.isCreationInProgress()) {\r\n                const labelPolygon: LabelPolygon = this.getPolygonUnderMouse(data);\r\n                if (!!labelPolygon && !this.isResizeInProgress()) {\r\n                    if (LabelsSelector.getHighlightedLabelId() !== labelPolygon.id) {\r\n                        store.dispatch(updateHighlightedLabelId(labelPolygon.id))\r\n                    }\r\n                    const pathOnCanvas: IPoint[] = RenderEngineUtil.transferPolygonFromImageToViewPortContent(labelPolygon.vertices, data);\r\n                    const linesOnCanvas: ILine[] = this.mapPointsToLines(pathOnCanvas.concat(pathOnCanvas[0]));\r\n\r\n                    for (let j = 0; j < linesOnCanvas.length; j++) {\r\n                        const mouseOverLine = RenderEngineUtil.isMouseOverLine(\r\n                            data.mousePositionOnViewPortContent,\r\n                            linesOnCanvas[j],\r\n                            RenderEngineSettings.anchorHoverSize.width / 2\r\n                        )\r\n                        if (mouseOverLine) {\r\n                            this.suggestedAnchorPositionOnCanvas = LineUtil.getCenter(linesOnCanvas[j]);\r\n                            this.suggestedAnchorIndexInPolygon = j + 1;\r\n                            break;\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (LabelsSelector.getHighlightedLabelId() !== null) {\r\n                        store.dispatch(updateHighlightedLabelId(null));\r\n                        this.discardSuggestedPoint();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // =================================================================================================================\r\n    // RENDERING\r\n    // =================================================================================================================\r\n\r\n    public render(data: EditorData): void {\r\n        const imageData: ImageData = LabelsSelector.getActiveImageData();\r\n        if (imageData) {\r\n            this.drawExistingLabels(data);\r\n            this.drawActivelyCreatedLabel(data);\r\n            this.drawActivelyResizeLabel(data);\r\n            this.updateCursorStyle(data);\r\n            this.drawSuggestedAnchor(data);\r\n        }\r\n    }\r\n\r\n    private updateCursorStyle(data: EditorData) {\r\n        if (!!this.canvas && !!data.mousePositionOnViewPortContent && !GeneralSelector.getImageDragModeStatus()) {\r\n            const isMouseOverCanvas: boolean = RenderEngineUtil.isMouseOverCanvas(data);\r\n            if (isMouseOverCanvas) {\r\n                if (this.isCreationInProgress()) {\r\n                    const isMouseOverStartAnchor: boolean = this.isMouseOverAnchor(data.mousePositionOnViewPortContent, this.activePath[0]);\r\n                    if (isMouseOverStartAnchor && this.activePath.length > 2)\r\n                        store.dispatch(updateCustomCursorStyle(CustomCursorStyle.CLOSE));\r\n                    else\r\n                        store.dispatch(updateCustomCursorStyle(CustomCursorStyle.DEFAULT));\r\n                } else {\r\n                    const anchorUnderMouse: IPoint = this.getAnchorUnderMouse(data);\r\n                    const isMouseOverNewAnchor: boolean = this.isMouseOverAnchor(data.mousePositionOnViewPortContent, this.suggestedAnchorPositionOnCanvas);\r\n                    if (!!isMouseOverNewAnchor) {\r\n                        store.dispatch(updateCustomCursorStyle(CustomCursorStyle.ADD));\r\n                    } else if (this.isResizeInProgress()) {\r\n                        store.dispatch(updateCustomCursorStyle(CustomCursorStyle.MOVE));\r\n                    } else if (!!anchorUnderMouse) {\r\n                        store.dispatch(updateCustomCursorStyle(CustomCursorStyle.MOVE));\r\n                    } else {\r\n                        RenderEngineUtil.wrapDefaultCursorStyleInCancel(data);\r\n                    }\r\n                }\r\n                this.canvas.style.cursor = 'none';\r\n            } else {\r\n                this.canvas.style.cursor = 'default';\r\n            }\r\n        }\r\n    }\r\n\r\n    private drawActivelyCreatedLabel(data: EditorData) {\r\n        const standardizedPoints: IPoint[] = this.activePath.map((point: IPoint) => RenderEngineUtil.setPointBetweenPixels(point));\r\n        const path = standardizedPoints.concat(data.mousePositionOnViewPortContent);\r\n        const lines: ILine[] = this.mapPointsToLines(path);\r\n        const lineColor: string = BaseRenderEngine.resolveLabelLineColor(null, true)\r\n        const anchorColor: string = BaseRenderEngine.resolveLabelAnchorColor(true)\r\n        DrawUtil.drawPolygonWithFill(this.canvas, path, DrawUtil.hexToRGB(lineColor, 0.2));\r\n        lines.forEach((line: ILine) => {\r\n            DrawUtil.drawLine(this.canvas, line.start, line.end, lineColor, RenderEngineSettings.LINE_THICKNESS);\r\n        });\r\n        standardizedPoints.forEach((point: IPoint) => {\r\n            DrawUtil.drawCircleWithFill(this.canvas, point, Settings.RESIZE_HANDLE_DIMENSION_PX/2, anchorColor);\r\n        })\r\n    }\r\n\r\n    private drawActivelyResizeLabel(data: EditorData) {\r\n        const activeLabelPolygon: LabelPolygon = LabelsSelector.getActivePolygonLabel();\r\n        if (!!activeLabelPolygon && this.isResizeInProgress()) {\r\n            const snappedMousePosition: IPoint = RectUtil.snapPointToRect(data.mousePositionOnViewPortContent, data.viewPortContentImageRect);\r\n            const polygonOnCanvas: IPoint[] = activeLabelPolygon.vertices.map((point: IPoint, index: number) => {\r\n                return index === this.resizeAnchorIndex ? snappedMousePosition : RenderEngineUtil.transferPointFromImageToViewPortContent(point, data);\r\n            });\r\n            this.drawPolygon(activeLabelPolygon.labelId, polygonOnCanvas, true);\r\n        }\r\n    }\r\n\r\n    private drawExistingLabels(data: EditorData) {\r\n        const activeLabelId: string = LabelsSelector.getActiveLabelId();\r\n        const highlightedLabelId: string = LabelsSelector.getHighlightedLabelId();\r\n        const imageData: ImageData = LabelsSelector.getActiveImageData();\r\n        imageData.labelPolygons.forEach((labelPolygon: LabelPolygon) => {\r\n            const isActive: boolean = labelPolygon.id === activeLabelId || labelPolygon.id === highlightedLabelId;\r\n            const pathOnCanvas: IPoint[] = RenderEngineUtil.transferPolygonFromImageToViewPortContent(labelPolygon.vertices, data);\r\n            if (!(labelPolygon.id === activeLabelId && this.isResizeInProgress())) {\r\n                this.drawPolygon(labelPolygon.labelId, pathOnCanvas, isActive);\r\n            }\r\n        });\r\n    }\r\n\r\n    private drawPolygon(labelId: string | null, polygon: IPoint[], isActive: boolean) {\r\n        const lineColor: string = BaseRenderEngine.resolveLabelLineColor(labelId, true)\r\n        const anchorColor: string = BaseRenderEngine.resolveLabelAnchorColor(true)\r\n        const standardizedPoints: IPoint[] = polygon.map((point: IPoint) => RenderEngineUtil.setPointBetweenPixels(point));\r\n        if (isActive) {\r\n            DrawUtil.drawPolygonWithFill(this.canvas, standardizedPoints, DrawUtil.hexToRGB(lineColor, 0.2));\r\n        }\r\n        DrawUtil.drawPolygon(this.canvas, standardizedPoints, lineColor, RenderEngineSettings.LINE_THICKNESS);\r\n        if (isActive) {\r\n            standardizedPoints.forEach((point: IPoint) => {\r\n                DrawUtil.drawCircleWithFill(this.canvas, point, Settings.RESIZE_HANDLE_DIMENSION_PX/2, anchorColor);\r\n            })\r\n        }\r\n    }\r\n\r\n    private drawSuggestedAnchor(data: EditorData) {\r\n        const anchorColor: string = BaseRenderEngine.resolveLabelAnchorColor(true)\r\n        if (this.suggestedAnchorPositionOnCanvas) {\r\n            const suggestedAnchorRect: IRect = RectUtil\r\n                .getRectWithCenterAndSize(this.suggestedAnchorPositionOnCanvas, RenderEngineSettings.suggestedAnchorDetectionSize);\r\n            const isMouseOverSuggestedAnchor: boolean = RectUtil.isPointInside(suggestedAnchorRect, data.mousePositionOnViewPortContent);\r\n\r\n            if (isMouseOverSuggestedAnchor) {\r\n                DrawUtil.drawCircleWithFill(\r\n                    this.canvas, this.suggestedAnchorPositionOnCanvas, Settings.RESIZE_HANDLE_DIMENSION_PX/2, anchorColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    // =================================================================================================================\r\n    // CREATION\r\n    // =================================================================================================================\r\n\r\n    private updateActivelyCreatedLabel(data: EditorData) {\r\n        if (this.isCreationInProgress()) {\r\n            const mousePositionSnapped: IPoint = RectUtil.snapPointToRect(data.mousePositionOnViewPortContent, data.viewPortContentImageRect);\r\n            this.activePath.push(mousePositionSnapped);\r\n        } else {\r\n            const isMouseOverImage: boolean = RectUtil.isPointInside(data.viewPortContentImageRect, data.mousePositionOnViewPortContent);\r\n            if (isMouseOverImage) {\r\n                EditorActions.setViewPortActionsDisabledStatus(true);\r\n                this.activePath.push(data.mousePositionOnViewPortContent);\r\n                store.dispatch(updateActiveLabelId(null));\r\n            }\r\n        }\r\n    }\r\n\r\n    public cancelLabelCreation() {\r\n        this.activePath = [];\r\n        EditorActions.setViewPortActionsDisabledStatus(false);\r\n    }\r\n\r\n    private finishLabelCreation() {\r\n        this.activePath = [];\r\n        EditorActions.setViewPortActionsDisabledStatus(false);\r\n    }\r\n\r\n    public addLabelAndFinishCreation(data: EditorData) {\r\n        if (this.isCreationInProgress() && this.activePath.length > 2) {\r\n            const polygonOnImage: IPoint[] = RenderEngineUtil.transferPolygonFromViewPortContentToImage(this.activePath, data);\r\n            this.addPolygonLabel(polygonOnImage);\r\n            this.finishLabelCreation();\r\n        }\r\n    }\r\n\r\n    private addPolygonLabel(polygon: IPoint[]) {\r\n        const activeLabelId = LabelsSelector.getActiveLabelNameId();\r\n        const imageData: ImageData = LabelsSelector.getActiveImageData();\r\n        const labelPolygon: LabelPolygon = LabelUtil.createLabelPolygon(activeLabelId, polygon);\r\n        imageData.labelPolygons.push(labelPolygon);\r\n        store.dispatch(updateImageDataById(imageData.id, imageData));\r\n        store.dispatch(updateFirstLabelCreatedFlag(true));\r\n        store.dispatch(updateActiveLabelId(labelPolygon.id));\r\n    };\r\n\r\n    // =================================================================================================================\r\n    // TRANSFER\r\n    // =================================================================================================================\r\n\r\n    private startExistingLabelResize(data: EditorData, labelId: string, anchorIndex: number) {\r\n        store.dispatch(updateActiveLabelId(labelId));\r\n        this.resizeAnchorIndex = anchorIndex;\r\n        EditorActions.setViewPortActionsDisabledStatus(true);\r\n    }\r\n\r\n    private endExistingLabelResize(data: EditorData) {\r\n        this.applyResizeToPolygonLabel(data);\r\n        this.resizeAnchorIndex = null;\r\n        EditorActions.setViewPortActionsDisabledStatus(false);\r\n    }\r\n\r\n    private applyResizeToPolygonLabel(data: EditorData) {\r\n        const imageData: ImageData = LabelsSelector.getActiveImageData();\r\n        const activeLabel: LabelPolygon = LabelsSelector.getActivePolygonLabel();\r\n        imageData.labelPolygons = imageData.labelPolygons.map((polygon: LabelPolygon) => {\r\n            if (polygon.id !== activeLabel.id) {\r\n                return polygon\r\n            } else {\r\n                return {\r\n                    ...polygon,\r\n                    vertices: polygon.vertices.map((value: IPoint, index: number) => {\r\n                        if (index !== this.resizeAnchorIndex) {\r\n                            return value;\r\n                        } else {\r\n                            const snappedMousePosition: IPoint =\r\n                                RectUtil.snapPointToRect(data.mousePositionOnViewPortContent, data.viewPortContentImageRect);\r\n                            return RenderEngineUtil.transferPointFromViewPortContentToImage(snappedMousePosition, data);\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        });\r\n        store.dispatch(updateImageDataById(imageData.id, imageData));\r\n        store.dispatch(updateActiveLabelId(activeLabel.id));\r\n    }\r\n\r\n    private discardSuggestedPoint(): void {\r\n        this.suggestedAnchorIndexInPolygon = null;\r\n        this.suggestedAnchorPositionOnCanvas = null;\r\n    }\r\n\r\n    // =================================================================================================================\r\n    // UPDATE\r\n    // =================================================================================================================\r\n\r\n    private addSuggestedAnchorToPolygonLabel(data: EditorData) {\r\n        const imageData: ImageData = LabelsSelector.getActiveImageData();\r\n        const activeLabel: LabelPolygon = LabelsSelector.getActivePolygonLabel();\r\n        const newAnchorPositionOnImage: IPoint =\r\n            RenderEngineUtil.transferPointFromViewPortContentToImage(this.suggestedAnchorPositionOnCanvas, data);\r\n        const insert = (arr, index, newItem) => [...arr.slice(0, index), newItem, ...arr.slice(index)];\r\n\r\n        const newImageData: ImageData = {\r\n            ...imageData,\r\n            labelPolygons: imageData.labelPolygons.map((polygon: LabelPolygon) => {\r\n                if (polygon.id !== activeLabel.id) {\r\n                    return polygon\r\n                } else {\r\n                    return {\r\n                        ...polygon,\r\n                        vertices: insert(polygon.vertices, this.suggestedAnchorIndexInPolygon, newAnchorPositionOnImage)\r\n                    }\r\n                }\r\n            })\r\n        };\r\n\r\n        store.dispatch(updateImageDataById(newImageData.id, newImageData));\r\n        this.startExistingLabelResize(data, activeLabel.id, this.suggestedAnchorIndexInPolygon);\r\n        this.discardSuggestedPoint();\r\n    }\r\n\r\n    // =================================================================================================================\r\n    // VALIDATORS\r\n    // =================================================================================================================\r\n\r\n    public isInProgress(): boolean {\r\n        return this.isCreationInProgress() || this.isResizeInProgress();\r\n    }\r\n\r\n    private isCreationInProgress(): boolean {\r\n        return this.activePath !== null && this.activePath.length !== 0;\r\n    }\r\n\r\n    private isResizeInProgress(): boolean {\r\n        return this.resizeAnchorIndex !== null;\r\n    }\r\n\r\n    private isMouseOverAnchor(mouse: IPoint, anchor: IPoint): boolean {\r\n        if (!mouse || !anchor) return null;\r\n        return RectUtil.isPointInside(RectUtil.getRectWithCenterAndSize(anchor, RenderEngineSettings.anchorSize), mouse);\r\n    }\r\n\r\n    // =================================================================================================================\r\n    // MAPPERS\r\n    // =================================================================================================================\r\n\r\n    private mapPointsToLines(points: IPoint[]): ILine[] {\r\n        const lines: ILine[] = [];\r\n        for (let i = 0; i < points.length - 1; i++) {\r\n            lines.push({start: points[i], end: points[i + 1]})\r\n        }\r\n        return lines;\r\n    }\r\n\r\n    // =================================================================================================================\r\n    // GETTERS\r\n    // =================================================================================================================\r\n\r\n    private getPolygonUnderMouse(data: EditorData): LabelPolygon {\r\n        const labelPolygons: LabelPolygon[] = LabelsSelector.getActiveImageData().labelPolygons;\r\n        for (let i = 0; i < labelPolygons.length; i++) {\r\n            const pathOnCanvas: IPoint[] = RenderEngineUtil.transferPolygonFromImageToViewPortContent(labelPolygons[i].vertices, data);\r\n            const linesOnCanvas: ILine[] = this.mapPointsToLines(pathOnCanvas.concat(pathOnCanvas[0]));\r\n\r\n            for (let j = 0; j < linesOnCanvas.length; j++) {\r\n                const mouseOverLine = RenderEngineUtil.isMouseOverLine(\r\n                    data.mousePositionOnViewPortContent,\r\n                    linesOnCanvas[j],\r\n                    RenderEngineSettings.anchorHoverSize.width / 2\r\n                )\r\n                if (mouseOverLine)\r\n                    return labelPolygons[i];\r\n            }\r\n            for (let j = 0; j < pathOnCanvas.length; j ++) {\r\n                if (this.isMouseOverAnchor(data.mousePositionOnViewPortContent, pathOnCanvas[j]))\r\n                    return labelPolygons[i];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private getAnchorUnderMouse(data: EditorData): IPoint {\r\n        const labelPolygons: LabelPolygon[] = LabelsSelector.getActiveImageData().labelPolygons;\r\n        for (let i = 0; i < labelPolygons.length; i++) {\r\n            const pathOnCanvas: IPoint[] = RenderEngineUtil.transferPolygonFromImageToViewPortContent(labelPolygons[i].vertices, data);\r\n            for (let j = 0; j < pathOnCanvas.length; j ++) {\r\n                if (this.isMouseOverAnchor(data.mousePositionOnViewPortContent, pathOnCanvas[j]))\r\n                    return pathOnCanvas[j];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n","export class ViewPointSettings {\r\n    public static readonly CANVAS_MIN_MARGIN_PX: number = 20;\r\n    public static readonly MIN_ZOOM: number = 1;\r\n    public static readonly MAX_ZOOM: number = 4;\r\n    public static readonly ZOOM_STEP: number = 0.1;\r\n    public static readonly TRANSLATION_STEP_PX: number = 20;\r\n}","import {ISize} from \"../interfaces/ISize\";\r\n\r\nexport class ImageUtil {\r\n    public static getSize(image: HTMLImageElement): ISize {\r\n        if (!image) return null;\r\n        return {\r\n            width: image.width,\r\n            height: image.height\r\n        }\r\n    }\r\n}","export enum ProjectType {\r\n    IMAGE_RECOGNITION = 'IMAGE_RECOGNITION',\r\n    OBJECT_DETECTION = 'OBJECT_DETECTION'\r\n}\r\n","import {ISize} from \"../interfaces/ISize\";\r\n\r\nexport class SizeUtil {\r\n    public static scale(size: ISize, scale: number): ISize {\r\n        return {\r\n            width: size.width * scale,\r\n            height: size.height * scale\r\n        }\r\n    }\r\n}","import {Direction} from \"../data/enums/Direction\";\r\nimport {IPoint} from \"../interfaces/IPoint\";\r\n\r\nexport class DirectionUtil {\r\n    public static convertDirectionToVector(direction: Direction): IPoint {\r\n        switch (direction) {\r\n            case Direction.RIGHT:\r\n                return {x: 1, y: 0};\r\n            case Direction.LEFT:\r\n                return {x: -1, y: 0};\r\n            case Direction.TOP:\r\n                return {x: 0, y: 1};\r\n            case Direction.BOTTOM:\r\n                return {x: 0, y: -1};\r\n            case Direction.TOP_RIGHT:\r\n                return {x: 1, y: 1};\r\n            case Direction.TOP_LEFT:\r\n                return {x: -1, y: 1};\r\n            case Direction.BOTTOM_RIGHT:\r\n                return {x: 1, y: -1};\r\n            case Direction.BOTTOM_LEFT:\r\n                return {x: -1, y: -1};\r\n            case Direction.CENTER:\r\n                return {x: 0, y: 0};\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n}","import {EditorModel} from '../../staticModels/EditorModel';\r\nimport {NumberUtil} from '../../utils/NumberUtil';\r\nimport {ViewPointSettings} from '../../settings/ViewPointSettings';\r\nimport {ISize} from '../../interfaces/ISize';\r\nimport {IRect} from '../../interfaces/IRect';\r\nimport {ImageUtil} from '../../utils/ImageUtil';\r\nimport {RectUtil} from '../../utils/RectUtil';\r\nimport {IPoint} from '../../interfaces/IPoint';\r\nimport {PointUtil} from '../../utils/PointUtil';\r\nimport {SizeUtil} from '../../utils/SizeUtil';\r\nimport {EditorActions} from './EditorActions';\r\nimport {Direction} from '../../data/enums/Direction';\r\nimport {DirectionUtil} from '../../utils/DirectionUtil';\r\nimport {GeneralSelector} from '../../store/selectors/GeneralSelector';\r\nimport {store} from '../../index';\r\nimport {updateZoom} from '../../store/general/actionCreators';\r\n\r\nexport class ViewPortActions {\r\n    public static updateViewPortSize() {\r\n        if (!!EditorModel.editor) {\r\n            EditorModel.viewPortSize = {\r\n                width: EditorModel.editor.offsetWidth,\r\n                height: EditorModel.editor.offsetHeight\r\n            }\r\n        }\r\n    }\r\n\r\n    public static updateDefaultViewPortImageRect() {\r\n        if (!!EditorModel.viewPortSize && !!EditorModel.image) {\r\n            const minMargin: IPoint = {\r\n                x: ViewPointSettings.CANVAS_MIN_MARGIN_PX,\r\n                y: ViewPointSettings.CANVAS_MIN_MARGIN_PX\r\n            };\r\n            const realImageRect: IRect = {x: 0, y: 0, ...ImageUtil.getSize(EditorModel.image)};\r\n            const viewPortWithMarginRect: IRect = {x: 0, y: 0, ...EditorModel.viewPortSize};\r\n            const viewPortWithoutMarginRect: IRect = RectUtil\r\n                .expand(viewPortWithMarginRect, PointUtil.multiply(minMargin, -1));\r\n            EditorModel.defaultRenderImageRect = RectUtil\r\n                .fitInsideRectWithRatio(viewPortWithoutMarginRect, RectUtil.getRatio(realImageRect));\r\n        }\r\n    }\r\n\r\n    public static calculateViewPortContentSize(): ISize {\r\n        if (!!EditorModel.viewPortSize && !!EditorModel.image) {\r\n            const defaultViewPortImageRect: IRect = EditorModel.defaultRenderImageRect;\r\n            const scaledImageSize: ISize = SizeUtil\r\n                .scale(EditorModel.defaultRenderImageRect, GeneralSelector.getZoom());\r\n            return {\r\n                width: scaledImageSize.width + 2 * defaultViewPortImageRect.x,\r\n                height: scaledImageSize.height + 2 * defaultViewPortImageRect.y\r\n            }\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public static calculateViewPortContentImageRect(): IRect {\r\n        if (!!EditorModel.viewPortSize && !!EditorModel.image) {\r\n            const defaultViewPortImageRect: IRect = EditorModel.defaultRenderImageRect;\r\n            const viewPortContentSize: ISize = ViewPortActions.calculateViewPortContentSize();\r\n            return {\r\n                ...defaultViewPortImageRect,\r\n                width: viewPortContentSize.width - 2 * defaultViewPortImageRect.x,\r\n                height: viewPortContentSize.height - 2 * defaultViewPortImageRect.y\r\n            }\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public static resizeCanvas(newCanvasSize: ISize) {\r\n        if (!!newCanvasSize && !!EditorModel.canvas) {\r\n            EditorModel.canvas.width = newCanvasSize.width;\r\n            EditorModel.canvas.height = newCanvasSize.height;\r\n        }\r\n    };\r\n\r\n    public static resizeViewPortContent() {\r\n        const viewPortContentSize = ViewPortActions.calculateViewPortContentSize();\r\n        if (viewPortContentSize) {\r\n            ViewPortActions.resizeCanvas(viewPortContentSize);\r\n        }\r\n    }\r\n\r\n    public static calculateAbsoluteScrollPosition(relativePosition: IPoint): IPoint {\r\n        const viewPortContentSize = ViewPortActions.calculateViewPortContentSize();\r\n        const viewPortSize = EditorModel.viewPortSize;\r\n        return {\r\n            x: relativePosition.x * (viewPortContentSize.width - viewPortSize.width),\r\n            y: relativePosition.y * (viewPortContentSize.height - viewPortSize.height)\r\n        };\r\n    }\r\n\r\n    public static getRelativeScrollPosition(): IPoint {\r\n        if (!!EditorModel.viewPortScrollbars) {\r\n            const values = EditorModel.viewPortScrollbars.getValues();\r\n            return {\r\n                x: values.left,\r\n                y: values.top\r\n            }\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public static getAbsoluteScrollPosition(): IPoint {\r\n        if (!!EditorModel.viewPortScrollbars) {\r\n            const values = EditorModel.viewPortScrollbars.getValues();\r\n            return {\r\n                x: values.scrollLeft,\r\n                y: values.scrollTop\r\n            }\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public static setScrollPosition(position: IPoint) {\r\n        EditorModel.viewPortScrollbars.scrollLeft(position.x);\r\n        EditorModel.viewPortScrollbars.scrollTop(position.y);\r\n    }\r\n\r\n    public static translateViewPortPosition(direction: Direction) {\r\n        if (EditorModel.viewPortActionsDisabled || GeneralSelector.getZoom() === ViewPointSettings.MIN_ZOOM) return;\r\n\r\n        const directionVector: IPoint = DirectionUtil.convertDirectionToVector(direction);\r\n        const translationVector: IPoint = PointUtil.multiply(directionVector, ViewPointSettings.TRANSLATION_STEP_PX);\r\n        const currentScrollPosition = ViewPortActions.getAbsoluteScrollPosition();\r\n        const nextScrollPosition = PointUtil.add(currentScrollPosition, translationVector);\r\n        ViewPortActions.setScrollPosition(nextScrollPosition);\r\n        EditorModel.mousePositionOnViewPortContent = PointUtil\r\n            .add(EditorModel.mousePositionOnViewPortContent, translationVector);\r\n        EditorActions.fullRender();\r\n    }\r\n\r\n    public static zoomIn() {\r\n        if (EditorModel.viewPortActionsDisabled) return;\r\n\r\n        const currentZoom: number = GeneralSelector.getZoom();\r\n        const currentRelativeScrollPosition: IPoint = ViewPortActions.getRelativeScrollPosition();\r\n        const nextRelativeScrollPosition = currentZoom === 1 ? {x: 0.5, y: 0.5} : currentRelativeScrollPosition;\r\n        ViewPortActions.setZoom(currentZoom + ViewPointSettings.ZOOM_STEP);\r\n        ViewPortActions.resizeViewPortContent();\r\n        ViewPortActions.setScrollPosition(ViewPortActions.calculateAbsoluteScrollPosition(nextRelativeScrollPosition));\r\n        EditorActions.fullRender();\r\n    }\r\n\r\n    public static zoomOut() {\r\n        if (EditorModel.viewPortActionsDisabled) return;\r\n\r\n        const currentZoom: number = GeneralSelector.getZoom();\r\n        const currentRelativeScrollPosition: IPoint = ViewPortActions.getRelativeScrollPosition();\r\n        ViewPortActions.setZoom(currentZoom - ViewPointSettings.ZOOM_STEP);\r\n        ViewPortActions.resizeViewPortContent();\r\n        ViewPortActions.setScrollPosition(ViewPortActions\r\n            .calculateAbsoluteScrollPosition(currentRelativeScrollPosition));\r\n        EditorActions.fullRender();\r\n    }\r\n\r\n    public static setDefaultZoom() {\r\n        const currentRelativeScrollPosition: IPoint = ViewPortActions.getRelativeScrollPosition();\r\n        ViewPortActions.setZoom(ViewPointSettings.MIN_ZOOM);\r\n        ViewPortActions.resizeViewPortContent();\r\n        ViewPortActions.setScrollPosition(ViewPortActions\r\n            .calculateAbsoluteScrollPosition(currentRelativeScrollPosition));\r\n        EditorActions.fullRender();\r\n    }\r\n\r\n    public static setOneForOneZoom() {\r\n        const currentZoom: number = GeneralSelector.getZoom();\r\n        const currentRelativeScrollPosition: IPoint = ViewPortActions.getRelativeScrollPosition();\r\n        const nextRelativeScrollPosition = currentZoom === 1 ? {x: 0.5, y: 0.5} : currentRelativeScrollPosition;\r\n        const nextZoom: number = EditorModel.image.width / EditorModel.defaultRenderImageRect.width\r\n        ViewPortActions.setZoom(nextZoom);\r\n        ViewPortActions.resizeViewPortContent();\r\n        ViewPortActions.setScrollPosition(ViewPortActions.calculateAbsoluteScrollPosition(nextRelativeScrollPosition));\r\n        EditorActions.fullRender();\r\n    }\r\n\r\n    public static setZoom(value: number) {\r\n        const currentZoom: number = GeneralSelector.getZoom();\r\n        const isNewValueValid: boolean = NumberUtil.isValueInRange(\r\n            value, ViewPointSettings.MIN_ZOOM, ViewPointSettings.MAX_ZOOM);\r\n        if (isNewValueValid && value !== currentZoom) {\r\n            store.dispatch(updateZoom(value));\r\n        }\r\n    }\r\n}\r\n","import {IRect} from '../../interfaces/IRect';\r\nimport {BaseRenderEngine} from './BaseRenderEngine';\r\nimport {EditorData} from '../../data/EditorData';\r\nimport {EditorModel} from '../../staticModels/EditorModel';\r\nimport {ViewPortActions} from '../actions/ViewPortActions';\r\nimport {DrawUtil} from '../../utils/DrawUtil';\r\nimport {RenderEngineUtil} from '../../utils/RenderEngineUtil';\r\nimport {RenderEngineSettings} from '../../settings/RenderEngineSettings';\r\nimport {IPoint} from '../../interfaces/IPoint';\r\nimport {GeneralSelector} from '../../store/selectors/GeneralSelector';\r\nimport {ProjectType} from '../../data/enums/ProjectType';\r\nimport {PopupWindowType} from '../../data/enums/PopupWindowType';\r\n\r\nexport class PrimaryEditorRenderEngine extends BaseRenderEngine {\r\n\r\n    public constructor(canvas: HTMLCanvasElement) {\r\n        super(canvas);\r\n    }\r\n\r\n    // =================================================================================================================\r\n    // EVENT HANDLERS\r\n    // =================================================================================================================\r\n\r\n    public mouseMoveHandler(data: EditorData): void {}\r\n    public mouseDownHandler(data: EditorData): void {}\r\n    public mouseUpHandler(data: EditorData): void {}\r\n\r\n    // =================================================================================================================\r\n    // RENDERING\r\n    // =================================================================================================================\r\n\r\n    public render(data: EditorData): void {\r\n        this.drawImage(EditorModel.image, ViewPortActions.calculateViewPortContentImageRect());\r\n        this.renderCrossHair(data);\r\n    }\r\n\r\n    public renderCrossHair(data: EditorData): void {\r\n        if (!this.shouldRenderCrossHair(data)) return;\r\n\r\n        const mouse = RenderEngineUtil.setPointBetweenPixels(data.mousePositionOnViewPortContent);\r\n        const drawLine = (startPoint: IPoint, endPoint: IPoint) => {\r\n            DrawUtil.drawLine(this.canvas, startPoint, endPoint, RenderEngineSettings.CROSS_HAIR_LINE_COLOR, 2)\r\n        }\r\n        drawLine(\r\n            {x: mouse.x, y: 0},\r\n            {x: mouse.x - 1, y: mouse.y - RenderEngineSettings.crossHairPadding}\r\n        )\r\n        drawLine(\r\n            {x: mouse.x, y: mouse.y + RenderEngineSettings.crossHairPadding},\r\n            {x: mouse.x - 1, y: data.viewPortContentSize.height}\r\n        )\r\n        drawLine(\r\n            {x: 0, y: mouse.y},\r\n            {x: mouse.x - RenderEngineSettings.crossHairPadding, y: mouse.y - 1}\r\n        )\r\n        drawLine(\r\n            {x: mouse.x + RenderEngineSettings.crossHairPadding, y: mouse.y},\r\n            {x: data.viewPortContentSize.width, y: mouse.y - 1}\r\n        )\r\n    }\r\n\r\n    public shouldRenderCrossHair(data: EditorData): boolean {\r\n        const isCrossHairVisible = GeneralSelector.getCrossHairVisibleStatus();\r\n        const isImageInDragMode = GeneralSelector.getImageDragModeStatus();\r\n        const projectType: ProjectType = GeneralSelector.getProjectType();\r\n        const activePopupType: PopupWindowType = GeneralSelector.getActivePopupType();\r\n        const isMouseOverCanvas: boolean = RenderEngineUtil.isMouseOverCanvas(data);\r\n        const isCustomCursorBlocked =  GeneralSelector.getPreventCustomCursorStatus();\r\n\r\n        return [\r\n            !!this.canvas,\r\n            isCrossHairVisible,\r\n            !isImageInDragMode,\r\n            projectType !== ProjectType.IMAGE_RECOGNITION,\r\n            !activePopupType,\r\n            isMouseOverCanvas,\r\n            !isCustomCursorBlocked\r\n        ].every(Boolean)\r\n    }\r\n\r\n    public drawImage(image: HTMLImageElement, imageRect: IRect) {\r\n        if (!!image && !!this.canvas) {\r\n            const ctx = this.canvas.getContext('2d');\r\n            ctx.drawImage(image, imageRect.x, imageRect.y, imageRect.width, imageRect.height);\r\n        }\r\n    }\r\n\r\n    isInProgress(): boolean {\r\n        return false;\r\n    }\r\n}\r\n","export enum LineAnchorType {\r\n    START = \"START\",\r\n    END = \"END\"\r\n}","import {EditorData} from \"../../data/EditorData\";\r\nimport {MouseEventUtil} from \"../../utils/MouseEventUtil\";\r\nimport {EventType} from \"../../data/enums/EventType\";\r\nimport {store} from \"../../index\";\r\nimport {updateCustomCursorStyle} from \"../../store/general/actionCreators\";\r\nimport {CustomCursorStyle} from \"../../data/enums/CustomCursorStyle\";\r\nimport {EditorModel} from \"../../staticModels/EditorModel\";\r\nimport {IPoint} from \"../../interfaces/IPoint\";\r\nimport {PointUtil} from \"../../utils/PointUtil\";\r\nimport {ViewPortActions} from \"../actions/ViewPortActions\";\r\n\r\nexport class ViewPortHelper {\r\n    private startScrollPosition: IPoint;\r\n    private mouseStartPosition: IPoint;\r\n\r\n    public update(data: EditorData): void {\r\n        if (!!data.event) {\r\n            switch (MouseEventUtil.getEventType(data.event)) {\r\n                case EventType.MOUSE_MOVE:\r\n                    this.mouseMoveHandler(data);\r\n                    break;\r\n                case EventType.MOUSE_UP:\r\n                    this.mouseUpHandler(data);\r\n                    break;\r\n                case EventType.MOUSE_DOWN:\r\n                    this.mouseDownHandler(data);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    private mouseDownHandler(data: EditorData) {\r\n        const event = data.event as MouseEvent;\r\n        this.startScrollPosition = data.absoluteViewPortContentScrollPosition;\r\n        this.mouseStartPosition = {x: event.screenX, y: event.screenY};\r\n\r\n        store.dispatch(updateCustomCursorStyle(CustomCursorStyle.GRABBING));\r\n        EditorModel.canvas.style.cursor = \"none\";\r\n    }\r\n\r\n    private mouseUpHandler(data: EditorData) {\r\n        this.startScrollPosition = null;\r\n        this.mouseStartPosition = null;\r\n        store.dispatch(updateCustomCursorStyle(CustomCursorStyle.GRAB));\r\n        EditorModel.canvas.style.cursor = \"none\";\r\n    }\r\n\r\n    private mouseMoveHandler(data: EditorData) {\r\n        if (!!this.startScrollPosition && !!this.mouseStartPosition) {\r\n            const event = data.event as MouseEvent;\r\n            const currentMousePosition: IPoint = {x: event.screenX, y: event.screenY};\r\n            const mousePositionDelta: IPoint = PointUtil.subtract(currentMousePosition, this.mouseStartPosition);\r\n            const nextScrollPosition = PointUtil.subtract(this.startScrollPosition, mousePositionDelta);\r\n            ViewPortActions.setScrollPosition(nextScrollPosition);\r\n            store.dispatch(updateCustomCursorStyle(CustomCursorStyle.GRABBING));\r\n        } else {\r\n            store.dispatch(updateCustomCursorStyle(CustomCursorStyle.GRAB));\r\n        }\r\n        EditorModel.canvas.style.cursor = \"none\";\r\n    }\r\n}","import {BaseRenderEngine} from './BaseRenderEngine';\r\nimport {RenderEngineSettings} from '../../settings/RenderEngineSettings';\r\nimport {LabelType} from '../../data/enums/LabelType';\r\nimport {EditorData} from '../../data/EditorData';\r\nimport {RenderEngineUtil} from '../../utils/RenderEngineUtil';\r\nimport {ImageData, LabelLine} from '../../store/labels/types';\r\nimport {IPoint} from '../../interfaces/IPoint';\r\nimport {RectUtil} from '../../utils/RectUtil';\r\nimport {store} from '../../index';\r\nimport {\r\n    updateActiveLabelId,\r\n    updateFirstLabelCreatedFlag,\r\n    updateHighlightedLabelId,\r\n    updateImageDataById\r\n} from '../../store/labels/actionCreators';\r\nimport {EditorActions} from '../actions/EditorActions';\r\nimport {LabelsSelector} from '../../store/selectors/LabelsSelector';\r\nimport {DrawUtil} from '../../utils/DrawUtil';\r\nimport {GeneralSelector} from '../../store/selectors/GeneralSelector';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport {ILine} from '../../interfaces/ILine';\r\nimport {LineUtil} from '../../utils/LineUtil';\r\nimport {updateCustomCursorStyle} from '../../store/general/actionCreators';\r\nimport {CustomCursorStyle} from '../../data/enums/CustomCursorStyle';\r\nimport {LineAnchorType} from '../../data/enums/LineAnchorType';\r\nimport {Settings} from '../../settings/Settings';\r\n\r\nexport class LineRenderEngine extends BaseRenderEngine {\r\n\r\n    // =================================================================================================================\r\n    // STATE\r\n    // =================================================================================================================\r\n\r\n    private lineCreationStartPoint: IPoint;\r\n    private lineUpdateAnchorType: LineAnchorType;\r\n\r\n    public constructor(canvas: HTMLCanvasElement) {\r\n        super(canvas);\r\n        this.labelType = LabelType.LINE;\r\n    }\r\n\r\n    // =================================================================================================================\r\n    // EVENT HANDLERS\r\n    // =================================================================================================================\r\n\r\n    public mouseDownHandler(data: EditorData): void {\r\n        const isMouseOverImage: boolean = RenderEngineUtil.isMouseOverImage(data);\r\n        const isMouseOverCanvas: boolean = RenderEngineUtil.isMouseOverCanvas(data);\r\n        const anchorTypeUnderMouse = this.getAnchorTypeUnderMouse(data);\r\n        const labelLineUnderMouse: LabelLine = this.getLineUnderMouse(data);\r\n\r\n        if (isMouseOverCanvas) {\r\n            if (!!anchorTypeUnderMouse && !this.isResizeInProgress()) {\r\n                const labelLine: LabelLine = this.getLineUnderMouse(data);\r\n                this.startExistingLabelUpdate(labelLine.id, anchorTypeUnderMouse)\r\n            } else if (!!labelLineUnderMouse) {\r\n                store.dispatch(updateActiveLabelId(labelLineUnderMouse.id));\r\n            } else if (!this.isInProgress() && isMouseOverImage) {\r\n                this.startNewLabelCreation(data)\r\n            } else if (this.isInProgress()) {\r\n                this.finishNewLabelCreation(data);\r\n            }\r\n        }\r\n    }\r\n\r\n    public mouseUpHandler(data: EditorData): void {\r\n        if (this.isResizeInProgress()) {\r\n            this.endExistingLabelUpdate(data)\r\n        }\r\n    }\r\n\r\n    public mouseMoveHandler(data: EditorData): void {\r\n        const isOverImage: boolean = RenderEngineUtil.isMouseOverImage(data);\r\n        if (isOverImage) {\r\n            const labelLine: LabelLine = this.getLineUnderMouse(data);\r\n            if (!!labelLine) {\r\n                if (LabelsSelector.getHighlightedLabelId() !== labelLine.id) {\r\n                    store.dispatch(updateHighlightedLabelId(labelLine.id))\r\n                }\r\n            } else {\r\n                if (LabelsSelector.getHighlightedLabelId() !== null) {\r\n                    store.dispatch(updateHighlightedLabelId(null));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // =================================================================================================================\r\n    // RENDERING\r\n    // =================================================================================================================\r\n\r\n    public render(data: EditorData): void {\r\n        this.drawExistingLabels(data);\r\n        this.drawActivelyCreatedLabel(data)\r\n        this.drawActivelyResizeLabel(data)\r\n        this.updateCursorStyle(data);\r\n    }\r\n\r\n    private drawExistingLabels(data: EditorData) {\r\n        const activeLabelId: string = LabelsSelector.getActiveLabelId();\r\n        const highlightedLabelId: string = LabelsSelector.getHighlightedLabelId();\r\n        const imageData: ImageData = LabelsSelector.getActiveImageData();\r\n        imageData.labelLines.forEach((labelLine: LabelLine) => {\r\n            const isActive: boolean = labelLine.id === activeLabelId || labelLine.id === highlightedLabelId;\r\n            const lineOnCanvas = RenderEngineUtil.transferLineFromImageToViewPortContent(labelLine.line, data)\r\n            if (!(labelLine.id === activeLabelId && this.isResizeInProgress())) {\r\n                this.drawLine(labelLine.labelId, lineOnCanvas, isActive)\r\n            }\r\n        });\r\n    }\r\n\r\n    private drawActivelyCreatedLabel(data: EditorData) {\r\n        if (this.isInProgress()) {\r\n            const line = {start: this.lineCreationStartPoint, end: data.mousePositionOnViewPortContent}\r\n            DrawUtil.drawLine(this.canvas, line.start, line.end, RenderEngineSettings.lineActiveColor, RenderEngineSettings.LINE_THICKNESS);\r\n            DrawUtil.drawCircleWithFill(this.canvas, this.lineCreationStartPoint, Settings.RESIZE_HANDLE_DIMENSION_PX/2, RenderEngineSettings.defaultAnchorColor)\r\n        }\r\n    }\r\n\r\n    private drawActivelyResizeLabel(data: EditorData) {\r\n        const activeLabelLine: LabelLine = LabelsSelector.getActiveLineLabel();\r\n        if (!!activeLabelLine && this.isResizeInProgress()) {\r\n            const snappedMousePosition: IPoint =\r\n                RectUtil.snapPointToRect(data.mousePositionOnViewPortContent, data.viewPortContentImageRect);\r\n            const lineOnCanvas = RenderEngineUtil.transferLineFromImageToViewPortContent(activeLabelLine.line, data)\r\n            const lineToDraw = {\r\n                start: this.lineUpdateAnchorType === LineAnchorType.START ? snappedMousePosition : lineOnCanvas.start,\r\n                end: this.lineUpdateAnchorType === LineAnchorType.END ? snappedMousePosition : lineOnCanvas.end\r\n            }\r\n            this.drawLine(activeLabelLine.labelId, lineToDraw, true)\r\n        }\r\n    }\r\n\r\n    private updateCursorStyle(data: EditorData) {\r\n        if (!!this.canvas && !!data.mousePositionOnViewPortContent && !GeneralSelector.getImageDragModeStatus()) {\r\n            const isMouseOverCanvas: boolean = RenderEngineUtil.isMouseOverCanvas(data);\r\n            if (isMouseOverCanvas) {\r\n                const anchorTypeUnderMouse = this.getAnchorTypeUnderMouse(data);\r\n                if (!this.isInProgress() && !!anchorTypeUnderMouse) {\r\n                    store.dispatch(updateCustomCursorStyle(CustomCursorStyle.MOVE));\r\n                } else if (this.isResizeInProgress()) {\r\n                    store.dispatch(updateCustomCursorStyle(CustomCursorStyle.MOVE));\r\n                } else {\r\n                    RenderEngineUtil.wrapDefaultCursorStyleInCancel(data);\r\n                }\r\n                this.canvas.style.cursor = 'none';\r\n            } else {\r\n                this.canvas.style.cursor = 'default';\r\n            }\r\n        }\r\n    }\r\n\r\n    private drawLine(labelId: string, line: ILine, isActive: boolean) {\r\n        const lineColor: string = BaseRenderEngine.resolveLabelLineColor(labelId, isActive)\r\n        const anchorColor = BaseRenderEngine.resolveLabelAnchorColor(isActive)\r\n        const standardizedLine: ILine = {\r\n            start: RenderEngineUtil.setPointBetweenPixels(line.start),\r\n            end: RenderEngineUtil.setPointBetweenPixels(line.end)\r\n        }\r\n        DrawUtil.drawLine(this.canvas, standardizedLine.start, standardizedLine.end, lineColor, RenderEngineSettings.LINE_THICKNESS);\r\n        if (isActive) {\r\n\r\n            LineUtil\r\n                .getPoints(line)\r\n                .forEach((point: IPoint) => DrawUtil.drawCircleWithFill(this.canvas, point,\r\n                    Settings.RESIZE_HANDLE_DIMENSION_PX/2, anchorColor))\r\n        }\r\n    }\r\n\r\n    // =================================================================================================================\r\n    // VALIDATORS\r\n    // =================================================================================================================\r\n\r\n    public isInProgress(): boolean {\r\n        return !!this.lineCreationStartPoint\r\n    }\r\n\r\n    public isResizeInProgress(): boolean {\r\n        return !!this.lineUpdateAnchorType;\r\n    }\r\n\r\n    private isMouseOverAnchor(mouse: IPoint, anchor: IPoint): boolean {\r\n        if (!mouse || !anchor) return null;\r\n        return RectUtil.isPointInside(RectUtil.getRectWithCenterAndSize(anchor, RenderEngineSettings.anchorSize), mouse);\r\n    }\r\n\r\n    // =================================================================================================================\r\n    // CREATION\r\n    // =================================================================================================================\r\n\r\n    private startNewLabelCreation = (data: EditorData) => {\r\n        this.lineCreationStartPoint = RenderEngineUtil.setPointBetweenPixels(data.mousePositionOnViewPortContent)\r\n        EditorActions.setViewPortActionsDisabledStatus(true);\r\n    }\r\n\r\n    private finishNewLabelCreation = (data: EditorData) => {\r\n        const mousePositionOnCanvasSnapped: IPoint = RectUtil.snapPointToRect(\r\n            data.mousePositionOnViewPortContent, data.viewPortContentImageRect\r\n        );\r\n        const lineOnCanvas = {start: this.lineCreationStartPoint, end: mousePositionOnCanvasSnapped}\r\n        const lineOnImage = RenderEngineUtil.transferLineFromViewPortContentToImage(lineOnCanvas, data);\r\n        const activeLabelId = LabelsSelector.getActiveLabelNameId();\r\n        const imageData: ImageData = LabelsSelector.getActiveImageData();\r\n        const labelLine: LabelLine = {\r\n            id: uuidv4(),\r\n            labelId: activeLabelId,\r\n            line: lineOnImage\r\n        };\r\n        imageData.labelLines.push(labelLine);\r\n        store.dispatch(updateImageDataById(imageData.id, imageData));\r\n        store.dispatch(updateFirstLabelCreatedFlag(true));\r\n        store.dispatch(updateActiveLabelId(labelLine.id));\r\n        this.lineCreationStartPoint = null\r\n        EditorActions.setViewPortActionsDisabledStatus(false);\r\n    };\r\n\r\n    public cancelLabelCreation() {\r\n        this.lineCreationStartPoint = null\r\n        EditorActions.setViewPortActionsDisabledStatus(false);\r\n    }\r\n\r\n    // =================================================================================================================\r\n    // UPDATE\r\n    // =================================================================================================================\r\n\r\n    private startExistingLabelUpdate(labelId: string, anchorType: LineAnchorType) {\r\n        store.dispatch(updateActiveLabelId(labelId));\r\n        this.lineUpdateAnchorType = anchorType;\r\n        EditorActions.setViewPortActionsDisabledStatus(true);\r\n    }\r\n\r\n    private endExistingLabelUpdate(data: EditorData) {\r\n        this.applyUpdateToLineLabel(data);\r\n        this.lineUpdateAnchorType = null;\r\n        EditorActions.setViewPortActionsDisabledStatus(false);\r\n    }\r\n\r\n    private applyUpdateToLineLabel(data: EditorData) {\r\n        const imageData: ImageData = LabelsSelector.getActiveImageData();\r\n        const activeLabel: LabelLine = LabelsSelector.getActiveLineLabel();\r\n        imageData.labelLines = imageData.labelLines.map((lineLabel: LabelLine) => {\r\n            if (lineLabel.id !== activeLabel.id) {\r\n                return lineLabel\r\n            } else {\r\n                const snappedMousePosition: IPoint =\r\n                    RectUtil.snapPointToRect(data.mousePositionOnViewPortContent, data.viewPortContentImageRect);\r\n                const mousePositionOnImage = RenderEngineUtil.transferPointFromViewPortContentToImage(\r\n                    snappedMousePosition, data\r\n                );\r\n                return {\r\n                    ...lineLabel,\r\n                    line: {\r\n                        start: this.lineUpdateAnchorType === LineAnchorType.START ? mousePositionOnImage : lineLabel.line.start,\r\n                        end: this.lineUpdateAnchorType === LineAnchorType.END ? mousePositionOnImage : lineLabel.line.end\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        store.dispatch(updateImageDataById(imageData.id, imageData));\r\n        store.dispatch(updateActiveLabelId(activeLabel.id));\r\n    }\r\n\r\n    // =================================================================================================================\r\n    // GETTERS\r\n    // =================================================================================================================\r\n\r\n    private getLineUnderMouse(data: EditorData): LabelLine {\r\n        const labelLines: LabelLine[] = LabelsSelector.getActiveImageData().labelLines;\r\n        for (let i = 0; i < labelLines.length; i++) {\r\n            const lineOnCanvas: ILine = RenderEngineUtil.transferLineFromImageToViewPortContent(labelLines[i].line, data);\r\n            const mouseOverLine = RenderEngineUtil.isMouseOverLine(\r\n                data.mousePositionOnViewPortContent,\r\n                lineOnCanvas,\r\n                RenderEngineSettings.anchorHoverSize.width / 2\r\n            )\r\n            if (mouseOverLine) return labelLines[i]\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private getAnchorTypeUnderMouse(data: EditorData): LineAnchorType {\r\n        const labelLines: LabelLine[] = LabelsSelector.getActiveImageData().labelLines;\r\n        for (let i = 0; i < labelLines.length; i++) {\r\n            const lineOnCanvas: ILine = RenderEngineUtil.transferLineFromImageToViewPortContent(labelLines[i].line, data);\r\n            if (this.isMouseOverAnchor(data.mousePositionOnViewPortContent, lineOnCanvas.start)) {\r\n                return LineAnchorType.START\r\n            }\r\n            if (this.isMouseOverAnchor(data.mousePositionOnViewPortContent, lineOnCanvas.end)) {\r\n                return LineAnchorType.END\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n","import {LabelType} from \"../../data/enums/LabelType\";\r\nimport {EditorModel} from \"../../staticModels/EditorModel\";\r\nimport {RectRenderEngine} from \"../render/RectRenderEngine\";\r\nimport {PointRenderEngine} from \"../render/PointRenderEngine\";\r\nimport {PolygonRenderEngine} from \"../render/PolygonRenderEngine\";\r\nimport {IRect} from \"../../interfaces/IRect\";\r\nimport {RectUtil} from \"../../utils/RectUtil\";\r\nimport {EditorData} from \"../../data/EditorData\";\r\nimport {CanvasUtil} from \"../../utils/CanvasUtil\";\r\nimport React from \"react\";\r\nimport {IPoint} from \"../../interfaces/IPoint\";\r\nimport {DrawUtil} from \"../../utils/DrawUtil\";\r\nimport {PrimaryEditorRenderEngine} from \"../render/PrimaryEditorRenderEngine\";\r\nimport {ContextManager} from \"../context/ContextManager\";\r\nimport {PointUtil} from \"../../utils/PointUtil\";\r\nimport {ViewPortActions} from \"./ViewPortActions\";\r\nimport {ISize} from \"../../interfaces/ISize\";\r\nimport {ImageUtil} from \"../../utils/ImageUtil\";\r\nimport {GeneralSelector} from \"../../store/selectors/GeneralSelector\";\r\nimport {ViewPortHelper} from \"../helpers/ViewPortHelper\";\r\nimport {CustomCursorStyle} from \"../../data/enums/CustomCursorStyle\";\r\nimport {LineRenderEngine} from \"../render/LineRenderEngine\";\r\n\r\nexport class EditorActions {\r\n\r\n    // =================================================================================================================\r\n    // RENDER ENGINES\r\n    // =================================================================================================================\r\n\r\n    public static mountSupportRenderingEngine(activeLabelType: LabelType) {\r\n        switch (activeLabelType) {\r\n            case LabelType.RECT:\r\n                EditorModel.supportRenderingEngine = new RectRenderEngine(EditorModel.canvas);\r\n                break;\r\n            case LabelType.POINT:\r\n                EditorModel.supportRenderingEngine = new PointRenderEngine(EditorModel.canvas);\r\n                break;\r\n            case LabelType.LINE:\r\n                EditorModel.supportRenderingEngine = new LineRenderEngine(EditorModel.canvas);\r\n                break;\r\n            case LabelType.POLYGON:\r\n                EditorModel.supportRenderingEngine = new PolygonRenderEngine(EditorModel.canvas);\r\n                break;\r\n            default:\r\n                EditorModel.supportRenderingEngine = null;\r\n                break;\r\n        }\r\n    };\r\n\r\n    public static swapSupportRenderingEngine(activeLabelType: LabelType) {\r\n        EditorActions.mountSupportRenderingEngine(activeLabelType);\r\n    };\r\n\r\n    public static mountRenderEnginesAndHelpers(activeLabelType: LabelType) {\r\n        EditorModel.viewPortHelper = new ViewPortHelper();\r\n        EditorModel.primaryRenderingEngine = new PrimaryEditorRenderEngine(EditorModel.canvas);\r\n        EditorActions.mountSupportRenderingEngine(activeLabelType);\r\n    }\r\n\r\n    // =================================================================================================================\r\n    // RENDER\r\n    // =================================================================================================================\r\n\r\n    public static fullRender() {\r\n        DrawUtil.clearCanvas(EditorModel.canvas);\r\n        EditorModel.primaryRenderingEngine.render(EditorActions.getEditorData());\r\n        EditorModel.supportRenderingEngine && EditorModel.supportRenderingEngine.render(EditorActions.getEditorData());\r\n    }\r\n\r\n    // =================================================================================================================\r\n    // SETTERS\r\n    // =================================================================================================================\r\n\r\n    public static setLoadingStatus(status: boolean) {\r\n        EditorModel.isLoading = status;\r\n    }\r\n    public static setActiveImage(image: HTMLImageElement) {\r\n        EditorModel.image = image;\r\n    }\r\n\r\n    public static setViewPortActionsDisabledStatus(status: boolean) {\r\n        EditorModel.viewPortActionsDisabled = status;\r\n    }\r\n\r\n    // =================================================================================================================\r\n    // GETTERS\r\n    // =================================================================================================================\r\n\r\n    public static getEditorData(event?: Event): EditorData {\r\n        return {\r\n            mousePositionOnViewPortContent: EditorModel.mousePositionOnViewPortContent,\r\n            viewPortContentSize: CanvasUtil.getSize(EditorModel.canvas),\r\n            activeKeyCombo: ContextManager.getActiveCombo(),\r\n            event: event,\r\n            zoom: GeneralSelector.getZoom(),\r\n            viewPortSize: EditorModel.viewPortSize,\r\n            defaultRenderImageRect: EditorModel.defaultRenderImageRect,\r\n            viewPortContentImageRect: ViewPortActions.calculateViewPortContentImageRect(),\r\n            realImageSize: ImageUtil.getSize(EditorModel.image),\r\n            absoluteViewPortContentScrollPosition: ViewPortActions.getAbsoluteScrollPosition()\r\n        }\r\n    }\r\n\r\n    // =================================================================================================================\r\n    // HELPERS\r\n    // =================================================================================================================\r\n\r\n    public static updateMousePositionIndicator(event: React.MouseEvent<HTMLCanvasElement, MouseEvent> | MouseEvent) {\r\n        if (!EditorModel.image || !EditorModel.canvas) {\r\n            EditorModel.mousePositionIndicator.style.display = \"none\";\r\n            EditorModel.cursor.style.display = \"none\";\r\n            return;\r\n        }\r\n\r\n        const mousePositionOverViewPortContent: IPoint = CanvasUtil.getMousePositionOnCanvasFromEvent(event, EditorModel.canvas);\r\n        const viewPortContentScrollPosition: IPoint = ViewPortActions.getAbsoluteScrollPosition();\r\n        const viewPortContentImageRect: IRect = ViewPortActions.calculateViewPortContentImageRect();\r\n        const mousePositionOverViewPort: IPoint = PointUtil.subtract(mousePositionOverViewPortContent, viewPortContentScrollPosition);\r\n        const isMouseOverImage: boolean = RectUtil.isPointInside(viewPortContentImageRect, mousePositionOverViewPortContent);\r\n        const isMouseOverViewPort: boolean = RectUtil.isPointInside({x: 0, y: 0, ...EditorModel.viewPortSize}, mousePositionOverViewPort);\r\n\r\n        if (isMouseOverViewPort && !GeneralSelector.getPreventCustomCursorStatus()) {\r\n            EditorModel.cursor.style.left = mousePositionOverViewPort.x + \"px\";\r\n            EditorModel.cursor.style.top = mousePositionOverViewPort.y + \"px\";\r\n            EditorModel.cursor.style.display = \"block\";\r\n\r\n            if (isMouseOverImage && ![CustomCursorStyle.GRAB, CustomCursorStyle.GRABBING].includes(GeneralSelector.getCustomCursorStyle())) {\r\n                const imageSize: ISize = ImageUtil.getSize(EditorModel.image);\r\n                const scale: number = imageSize.width / viewPortContentImageRect.width;\r\n                const mousePositionOverImage: IPoint = PointUtil.multiply(\r\n                    PointUtil.subtract(mousePositionOverViewPortContent, viewPortContentImageRect), scale);\r\n                const text: string = \"x: \" + Math.round(mousePositionOverImage.x) + \", y: \" + Math.round(mousePositionOverImage.y);\r\n\r\n                EditorModel.mousePositionIndicator.innerHTML = text;\r\n                EditorModel.mousePositionIndicator.style.left = (mousePositionOverViewPort.x + 15) + \"px\";\r\n                EditorModel.mousePositionIndicator.style.top = (mousePositionOverViewPort.y + 15) + \"px\";\r\n                EditorModel.mousePositionIndicator.style.display = \"block\";\r\n            } else {\r\n                EditorModel.mousePositionIndicator.style.display = \"none\";\r\n            }\r\n        } else {\r\n            EditorModel.cursor.style.display = \"none\";\r\n            EditorModel.mousePositionIndicator.style.display = \"none\";\r\n        }\r\n    };\r\n}","import {HotKeyAction} from \"../../data/HotKeyAction\";\r\n\r\nexport class BaseContext {\r\n    public static actions: HotKeyAction[] = [];\r\n\r\n    public static getActions(): HotKeyAction[] {\r\n        return this.actions;\r\n    }\r\n}","import { LabelsSelector } from \"../../store/selectors/LabelsSelector\";\r\nimport { store } from \"../../index\";\r\nimport {\r\n  updateActiveImageIndex,\r\n  updateActiveLabelId,\r\n  updateActiveLabelNameId,\r\n  updateImageDataById,\r\n} from \"../../store/labels/actionCreators\";\r\nimport { ViewPortActions } from \"./ViewPortActions\";\r\nimport { EditorModel } from \"../../staticModels/EditorModel\";\r\nimport { LabelType } from \"../../data/enums/LabelType\";\r\nimport {\r\n  ImageData,\r\n  LabelLine,\r\n  LabelPoint,\r\n  LabelPolygon,\r\n  LabelRect,\r\n} from \"../../store/labels/types\";\r\nimport { LabelStatus } from \"../../data/enums/LabelStatus\";\r\nimport { remove } from \"lodash\";\r\n\r\nexport class ImageActions {\r\n  public static getPreviousImage(): void {\r\n    const currentImageIndex: number = LabelsSelector.getActiveImageIndex();\r\n    ImageActions.getImageByIndex(currentImageIndex - 1);\r\n  }\r\n\r\n  public static getNextImage(): void {\r\n    const currentImageIndex: number = LabelsSelector.getActiveImageIndex();\r\n    ImageActions.getImageByIndex(currentImageIndex + 1);\r\n  }\r\n\r\n  public static getImageByIndex(index: number): void {\r\n    if (EditorModel.viewPortActionsDisabled) return;\r\n\r\n    const imageCount: number = LabelsSelector.getImagesData().length;\r\n\r\n    if (index < 0 || index > imageCount - 1) {\r\n      return;\r\n    } else {\r\n      ViewPortActions.setZoom(1);\r\n      store.dispatch(updateActiveImageIndex(index));\r\n      store.dispatch(updateActiveLabelId(null));\r\n    }\r\n  }\r\n\r\n  public static setActiveLabelOnActiveImage(labelIndex: number): void {\r\n    const labelNames = LabelsSelector.getLabelNames();\r\n    if (labelNames.length < labelIndex + 1) {\r\n      return;\r\n    }\r\n\r\n    const imageData: ImageData = LabelsSelector.getActiveImageData();\r\n    store.dispatch(\r\n      updateImageDataById(\r\n        imageData.id,\r\n        ImageActions.mapNewImageData(imageData, labelIndex)\r\n      )\r\n    );\r\n    store.dispatch(updateActiveLabelNameId(labelNames[1].id));\r\n  }\r\n\r\n  private static mapNewImageData(\r\n    imageData: ImageData,\r\n    labelIndex: number\r\n  ): ImageData {\r\n    const labelType: LabelType = LabelsSelector.getActiveLabelType();\r\n    const labelNames = LabelsSelector.getLabelNames();\r\n    let newImageData: ImageData = {\r\n      ...imageData,\r\n    };\r\n    switch (labelType) {\r\n      case LabelType.POINT:\r\n        const point = LabelsSelector.getActivePointLabel();\r\n        newImageData.labelPoints = imageData.labelPoints.map(\r\n          (labelPoint: LabelPoint) => {\r\n            if (labelPoint.id === point.id) {\r\n              return {\r\n                ...labelPoint,\r\n                labelId: labelNames[labelIndex].id,\r\n                status: LabelStatus.ACCEPTED,\r\n              };\r\n            }\r\n            return labelPoint;\r\n          }\r\n        );\r\n        store.dispatch(updateActiveLabelId(point.id));\r\n        break;\r\n      case LabelType.LINE:\r\n        const line = LabelsSelector.getActiveLineLabel();\r\n        newImageData.labelLines = imageData.labelLines.map(\r\n          (labelLine: LabelLine) => {\r\n            if (labelLine.id === line.id) {\r\n              return {\r\n                ...labelLine,\r\n                labelId: labelNames[labelIndex].id,\r\n                status: LabelStatus.ACCEPTED,\r\n              };\r\n            }\r\n            return labelLine;\r\n          }\r\n        );\r\n        store.dispatch(updateActiveLabelId(line.id));\r\n        break;\r\n      case LabelType.RECT:\r\n        const rect = LabelsSelector.getActiveRectLabel();\r\n        newImageData.labelRects = imageData.labelRects.map(\r\n          (labelRectangle: LabelRect) => {\r\n            if (labelRectangle.id === rect.id) {\r\n              return {\r\n                ...labelRectangle,\r\n                labelId: labelNames[labelIndex].id,\r\n                status: LabelStatus.ACCEPTED,\r\n              };\r\n            }\r\n            return labelRectangle;\r\n          }\r\n        );\r\n        store.dispatch(updateActiveLabelId(rect.id));\r\n        break;\r\n      case LabelType.POLYGON:\r\n        const polygon = LabelsSelector.getActivePolygonLabel();\r\n        newImageData.labelPolygons = imageData.labelPolygons.map(\r\n          (labelPolygon: LabelPolygon) => {\r\n            if (labelPolygon.id === polygon.id) {\r\n              return {\r\n                ...labelPolygon,\r\n                labelId: labelNames[labelIndex].id,\r\n                status: LabelStatus.ACCEPTED,\r\n              };\r\n            }\r\n            return labelPolygon;\r\n          }\r\n        );\r\n        store.dispatch(updateActiveLabelId(polygon.id));\r\n        break;\r\n      case LabelType.IMAGE_RECOGNITION:\r\n        const labelId: string = labelNames[labelIndex].id;\r\n        if (imageData.labelNameIds.includes(labelId)) {\r\n          newImageData.labelNameIds = remove(\r\n            imageData.labelNameIds,\r\n            (element: string) => element !== labelId\r\n          );\r\n        } else {\r\n          newImageData.labelNameIds = imageData.labelNameIds.concat(labelId);\r\n        }\r\n        break;\r\n    }\r\n\r\n    return newImageData;\r\n  }\r\n}\r\n","import {MobileDeviceData} from \"../data/MobileDeviceData\";\r\nimport MobileDetect from 'mobile-detect'\r\n\r\nexport class PlatformUtil {\r\n    public static getMobileDeviceData(userAgent: string): MobileDeviceData {\r\n        const mobileDetect = new MobileDetect(userAgent);\r\n        return {\r\n            manufacturer: mobileDetect.mobile(),\r\n            browser: mobileDetect.userAgent(),\r\n            os: mobileDetect.os()\r\n        }\r\n    }\r\n\r\n    public static isMac(userAgent: string): boolean {\r\n        return !!userAgent.toLowerCase().match(\"mac\");\r\n    }\r\n\r\n    public static isSafari(userAgent: string): boolean {\r\n        return !!userAgent.toLowerCase().match(\"safari\");\r\n    }\r\n\r\n    public static isFirefox(userAgent: string): boolean {\r\n        return !!userAgent.toLowerCase().match(\"firefox\");\r\n    }\r\n}","import {LabelsSelector} from '../../store/selectors/LabelsSelector';\r\nimport {ImageData, LabelLine, LabelName, LabelPoint, LabelPolygon, LabelRect} from '../../store/labels/types';\r\nimport {filter} from 'lodash';\r\nimport {store} from '../../index';\r\nimport {updateImageData, updateImageDataById} from '../../store/labels/actionCreators';\r\nimport {LabelType} from '../../data/enums/LabelType';\r\n\r\nexport class LabelActions {\r\n    public static deleteActiveLabel() {\r\n        const activeImageData: ImageData = LabelsSelector.getActiveImageData();\r\n        const activeLabelId: string = LabelsSelector.getActiveLabelId();\r\n        LabelActions.deleteImageLabelById(activeImageData.id, activeLabelId);\r\n    }\r\n\r\n    public static deleteImageLabelById(imageId: string, labelId: string) {\r\n        switch (LabelsSelector.getActiveLabelType()) {\r\n            case LabelType.POINT:\r\n                LabelActions.deletePointLabelById(imageId, labelId);\r\n                break;\r\n            case LabelType.RECT:\r\n                LabelActions.deleteRectLabelById(imageId, labelId);\r\n                break;\r\n            case LabelType.POLYGON:\r\n                LabelActions.deletePolygonLabelById(imageId, labelId);\r\n                break;\r\n        }\r\n    }\r\n\r\n    public static deleteRectLabelById(imageId: string, labelRectId: string) {\r\n        const imageData: ImageData = LabelsSelector.getImageDataById(imageId);\r\n        const newImageData = {\r\n            ...imageData,\r\n            labelRects: filter(imageData.labelRects, (currentLabel: LabelRect) => {\r\n                return currentLabel.id !== labelRectId;\r\n            })\r\n        };\r\n        store.dispatch(updateImageDataById(imageData.id, newImageData));\r\n    }\r\n\r\n    public static deletePointLabelById(imageId: string, labelPointId: string) {\r\n        const imageData: ImageData = LabelsSelector.getImageDataById(imageId);\r\n        const newImageData = {\r\n            ...imageData,\r\n            labelPoints: filter(imageData.labelPoints, (currentLabel: LabelPoint) => {\r\n                return currentLabel.id !== labelPointId;\r\n            })\r\n        };\r\n        store.dispatch(updateImageDataById(imageData.id, newImageData));\r\n    }\r\n\r\n    public static deleteLineLabelById(imageId: string, labelLineId: string) {\r\n        const imageData: ImageData = LabelsSelector.getImageDataById(imageId);\r\n        const newImageData = {\r\n            ...imageData,\r\n            labelLines: filter(imageData.labelLines, (currentLabel: LabelLine) => {\r\n                return currentLabel.id !== labelLineId;\r\n            })\r\n        };\r\n        store.dispatch(updateImageDataById(imageData.id, newImageData));\r\n    }\r\n\r\n    public static deletePolygonLabelById(imageId: string, labelPolygonId: string) {\r\n        const imageData: ImageData = LabelsSelector.getImageDataById(imageId);\r\n        const newImageData = {\r\n            ...imageData,\r\n            labelPolygons: filter(imageData.labelPolygons, (currentLabel: LabelPolygon) => {\r\n                return currentLabel.id !== labelPolygonId;\r\n            })\r\n        };\r\n        store.dispatch(updateImageDataById(imageData.id, newImageData));\r\n    }\r\n\r\n    public static removeLabelNames(labelNamesIds: string[]) {\r\n        const imagesData: ImageData[] = LabelsSelector.getImagesData();\r\n        const newImagesData: ImageData[] = imagesData.map((imageData: ImageData) => {\r\n            return LabelActions.removeLabelNamesFromImageData(imageData, labelNamesIds);\r\n        });\r\n        store.dispatch(updateImageData(newImagesData))\r\n    }\r\n\r\n    private static removeLabelNamesFromImageData(imageData: ImageData, labelNamesIds: string[]): ImageData {\r\n        return {\r\n            ...imageData,\r\n            labelRects: imageData.labelRects.map((labelRect: LabelRect) => {\r\n                if (labelNamesIds.includes(labelRect.id)) {\r\n                    return {\r\n                        ...labelRect,\r\n                        id: null\r\n                    }\r\n                } else {\r\n                    return labelRect\r\n                }\r\n            }),\r\n            labelPoints: imageData.labelPoints.map((labelPoint: LabelPoint) => {\r\n                if (labelNamesIds.includes(labelPoint.id)) {\r\n                    return {\r\n                        ...labelPoint,\r\n                        id: null\r\n                    }\r\n                } else {\r\n                    return labelPoint\r\n                }\r\n            }),\r\n            labelPolygons: imageData.labelPolygons.map((labelPolygon: LabelPolygon) => {\r\n                if (labelNamesIds.includes(labelPolygon.id)) {\r\n                    return {\r\n                        ...labelPolygon,\r\n                        id: null\r\n                    }\r\n                } else {\r\n                    return labelPolygon\r\n                }\r\n            }),\r\n            labelNameIds: imageData.labelNameIds.filter((labelNameId: string) => {\r\n                return !labelNamesIds.includes(labelNameId)\r\n            })\r\n        }\r\n    }\r\n\r\n    public static labelExistsInLabelNames(label: string): boolean {\r\n        const labelNames: LabelName[] = LabelsSelector.getLabelNames();\r\n        return labelNames\r\n            .map((labelName: LabelName) => labelName.name)\r\n            .includes(label)\r\n    }\r\n}\r\n","import {HotKeyAction} from \"../../data/HotKeyAction\";\r\nimport {EditorModel} from \"../../staticModels/EditorModel\";\r\nimport {LabelType} from \"../../data/enums/LabelType\";\r\nimport {EditorData} from \"../../data/EditorData\";\r\nimport {EditorActions} from \"../actions/EditorActions\";\r\nimport {PolygonRenderEngine} from \"../render/PolygonRenderEngine\";\r\nimport {BaseContext} from \"./BaseContext\";\r\nimport {ImageActions} from \"../actions/ImageActions\";\r\nimport {ViewPortActions} from \"../actions/ViewPortActions\";\r\nimport {Direction} from \"../../data/enums/Direction\";\r\nimport {PlatformUtil} from \"../../utils/PlatformUtil\";\r\nimport {LabelActions} from \"../actions/LabelActions\";\r\nimport {LineRenderEngine} from \"../render/LineRenderEngine\";\r\n\r\nexport class EditorContext extends BaseContext {\r\n    public static actions: HotKeyAction[] = [\r\n        {\r\n            keyCombo: [\"Enter\"],\r\n            action: (event: KeyboardEvent) => {\r\n                if (EditorModel.supportRenderingEngine && EditorModel.supportRenderingEngine.labelType === LabelType.POLYGON) {\r\n                    const editorData: EditorData = EditorActions.getEditorData();\r\n                    (EditorModel.supportRenderingEngine as PolygonRenderEngine).addLabelAndFinishCreation(editorData);\r\n                }\r\n                EditorActions.fullRender();\r\n            }\r\n        },\r\n        {\r\n            keyCombo: [\"Escape\"],\r\n            action: (event: KeyboardEvent) => {\r\n                if (EditorModel.supportRenderingEngine) {\r\n                    switch (EditorModel.supportRenderingEngine.labelType) {\r\n                        case LabelType.POLYGON:\r\n                            (EditorModel.supportRenderingEngine as PolygonRenderEngine).cancelLabelCreation();\r\n                            break;\r\n                        case LabelType.LINE:\r\n                            (EditorModel.supportRenderingEngine as LineRenderEngine).cancelLabelCreation();\r\n                            break;\r\n                    }\r\n                }\r\n                EditorActions.fullRender();\r\n            }\r\n        },\r\n        {\r\n            keyCombo: PlatformUtil.isMac(window.navigator.userAgent) ? [\"Alt\", \"ArrowLeft\"] : [\"Control\", \"ArrowLeft\"],\r\n            action: (event: KeyboardEvent) => {\r\n                ImageActions.getPreviousImage()\r\n            }\r\n        },\r\n        {\r\n            keyCombo: PlatformUtil.isMac(window.navigator.userAgent) ? [\"Alt\", \"ArrowRight\"] : [\"Control\", \"ArrowRight\"],\r\n            action: (event: KeyboardEvent) => {\r\n                ImageActions.getNextImage();\r\n            }\r\n        },\r\n        {\r\n            keyCombo: PlatformUtil.isMac(window.navigator.userAgent) ? [\"Alt\", \"+\"] : [\"Control\", \"+\"],\r\n            action: (event: KeyboardEvent) => {\r\n                ViewPortActions.zoomIn();\r\n            }\r\n        },\r\n        {\r\n            keyCombo: PlatformUtil.isMac(window.navigator.userAgent) ? [\"Alt\", \"-\"] : [\"Control\", \"-\"],\r\n            action: (event: KeyboardEvent) => {\r\n                ViewPortActions.zoomOut();\r\n            }\r\n        },\r\n        {\r\n            keyCombo: [\"ArrowRight\"],\r\n            action: (event: KeyboardEvent) => {\r\n                event.preventDefault();\r\n                ViewPortActions.translateViewPortPosition(Direction.RIGHT);\r\n            }\r\n        },\r\n        {\r\n            keyCombo: [\"ArrowLeft\"],\r\n            action: (event: KeyboardEvent) => {\r\n                event.preventDefault();\r\n                ViewPortActions.translateViewPortPosition(Direction.LEFT);\r\n            }\r\n        },\r\n        {\r\n            keyCombo: [\"ArrowUp\"],\r\n            action: (event: KeyboardEvent) => {\r\n                event.preventDefault();\r\n                ViewPortActions.translateViewPortPosition(Direction.BOTTOM);\r\n            }\r\n        },\r\n        {\r\n            keyCombo: [\"ArrowDown\"],\r\n            action: (event: KeyboardEvent) => {\r\n                event.preventDefault();\r\n                ViewPortActions.translateViewPortPosition(Direction.TOP);\r\n            }\r\n        },\r\n        {\r\n            keyCombo: PlatformUtil.isMac(window.navigator.userAgent) ? [\"Backspace\"] : [\"Delete\"],\r\n            action: (event: KeyboardEvent) => {\r\n                LabelActions.deleteActiveLabel();\r\n            }\r\n        },\r\n        {\r\n            keyCombo: PlatformUtil.isMac(window.navigator.userAgent) ? [\"Alt\", \"0\"] : [\"Control\", \"0\"],\r\n            action: (event: KeyboardEvent) => {\r\n                ImageActions.setActiveLabelOnActiveImage(0);\r\n                EditorActions.fullRender();\r\n            }\r\n        },\r\n        {\r\n            keyCombo: PlatformUtil.isMac(window.navigator.userAgent) ? [\"Alt\", \"1\"] : [\"Control\", \"1\"],\r\n            action: (event: KeyboardEvent) => {\r\n                ImageActions.setActiveLabelOnActiveImage(1);\r\n                EditorActions.fullRender();\r\n            }\r\n        },\r\n        {\r\n            keyCombo: PlatformUtil.isMac(window.navigator.userAgent) ? [\"Alt\", \"2\"] : [\"Control\", \"2\"],\r\n            action: (event: KeyboardEvent) => {\r\n                ImageActions.setActiveLabelOnActiveImage(2);\r\n                EditorActions.fullRender();\r\n            }\r\n        },\r\n        {\r\n            keyCombo: PlatformUtil.isMac(window.navigator.userAgent) ? [\"Alt\", \"3\"] : [\"Control\", \"3\"],\r\n            action: (event: KeyboardEvent) => {\r\n                ImageActions.setActiveLabelOnActiveImage(3);\r\n                EditorActions.fullRender();\r\n            }\r\n        },\r\n        {\r\n            keyCombo: PlatformUtil.isMac(window.navigator.userAgent) ? [\"Alt\", \"4\"] : [\"Control\", \"4\"],\r\n            action: (event: KeyboardEvent) => {\r\n                ImageActions.setActiveLabelOnActiveImage(4);\r\n                EditorActions.fullRender();\r\n            }\r\n        },\r\n        {\r\n            keyCombo: PlatformUtil.isMac(window.navigator.userAgent) ? [\"Alt\", \"5\"] : [\"Control\", \"5\"],\r\n            action: (event: KeyboardEvent) => {\r\n                ImageActions.setActiveLabelOnActiveImage(5);\r\n                EditorActions.fullRender();\r\n            }\r\n        },\r\n        {\r\n            keyCombo: PlatformUtil.isMac(window.navigator.userAgent) ? [\"Alt\", \"6\"] : [\"Control\", \"6\"],\r\n            action: (event: KeyboardEvent) => {\r\n                ImageActions.setActiveLabelOnActiveImage(6);\r\n                EditorActions.fullRender();\r\n            }\r\n        },\r\n        {\r\n            keyCombo: PlatformUtil.isMac(window.navigator.userAgent) ? [\"Alt\", \"7\"] : [\"Control\", \"7\"],\r\n            action: (event: KeyboardEvent) => {\r\n                ImageActions.setActiveLabelOnActiveImage(7);\r\n                EditorActions.fullRender();\r\n            }\r\n        },\r\n        {\r\n            keyCombo: PlatformUtil.isMac(window.navigator.userAgent) ? [\"Alt\", \"8\"] : [\"Control\", \"8\"],\r\n            action: (event: KeyboardEvent) => {\r\n                ImageActions.setActiveLabelOnActiveImage(8);\r\n                EditorActions.fullRender();\r\n            }\r\n        },\r\n        {\r\n            keyCombo: PlatformUtil.isMac(window.navigator.userAgent) ? [\"Alt\", \"9\"] : [\"Control\", \"9\"],\r\n            action: (event: KeyboardEvent) => {\r\n                ImageActions.setActiveLabelOnActiveImage(9);\r\n                EditorActions.fullRender();\r\n            }\r\n        }\r\n    ];\r\n}","import {ContextManager} from \"../context/ContextManager\";\r\nimport {store} from \"../../index\";\r\nimport {updateActivePopupType} from \"../../store/general/actionCreators\";\r\n\r\nexport class PopupActions {\r\n    public static close() {\r\n        store.dispatch(updateActivePopupType(null));\r\n        ContextManager.restoreCtx();\r\n    }\r\n}","import {HotKeyAction} from \"../../data/HotKeyAction\";\r\nimport {PopupWindowType} from \"../../data/enums/PopupWindowType\";\r\nimport {GeneralSelector} from \"../../store/selectors/GeneralSelector\";\r\nimport {BaseContext} from \"./BaseContext\";\r\nimport {PopupActions} from \"../actions/PopupActions\";\r\nimport {Settings} from \"../../settings/Settings\";\r\n\r\nexport class PopupContext extends BaseContext {\r\n    public static actions: HotKeyAction[] = [\r\n        {\r\n            keyCombo: [\"Escape\"],\r\n            action: (event: KeyboardEvent) => {\r\n                const popupType: PopupWindowType = GeneralSelector.getActivePopupType();\r\n                const canBeClosed: boolean = Settings.CLOSEABLE_POPUPS.includes(popupType);\r\n                if (canBeClosed) {\r\n                    PopupActions.close();\r\n                }\r\n            }\r\n        }\r\n    ];\r\n}","import {ContextType} from \"../../data/enums/ContextType\";\r\nimport {HotKeyAction} from \"../../data/HotKeyAction\";\r\nimport {store} from \"../../index\";\r\nimport {updateActiveContext} from \"../../store/general/actionCreators\";\r\nimport {xor, isEmpty} from \"lodash\";\r\nimport {EditorContext} from \"./EditorContext\";\r\nimport {PopupContext} from \"./PopupContext\";\r\nimport {GeneralSelector} from \"../../store/selectors/GeneralSelector\";\r\nimport {EventType} from \"../../data/enums/EventType\";\r\n\r\nexport class ContextManager {\r\n    private static activeCombo: string[] = [];\r\n    private static actions: HotKeyAction[] = [];\r\n    private static contextHistory: ContextType[] = [];\r\n\r\n    public static getActiveCombo(): string[] {\r\n        return ContextManager.activeCombo;\r\n    }\r\n\r\n    public static init(): void {\r\n        window.addEventListener(EventType.KEY_DOWN, ContextManager.onDown);\r\n        window.addEventListener(EventType.KEY_UP, ContextManager.onUp);\r\n        window.addEventListener(EventType.FOCUS, ContextManager.onFocus);\r\n    }\r\n\r\n    public static switchCtx(context: ContextType): void {\r\n        const activeCtx: ContextType = GeneralSelector.getActiveContext();\r\n\r\n        if (activeCtx !== context) {\r\n            ContextManager.contextHistory.push(activeCtx);\r\n            ContextManager.updateCtx(context);\r\n        }\r\n    }\r\n\r\n    private static updateCtx(context: ContextType): void {\r\n        store.dispatch(updateActiveContext(context));\r\n        switch (context) {\r\n            case ContextType.EDITOR:\r\n                ContextManager.actions = EditorContext.getActions();\r\n                break;\r\n            case ContextType.POPUP:\r\n                ContextManager.actions = PopupContext.getActions();\r\n                break;\r\n            default:\r\n                ContextManager.actions = [];\r\n        }\r\n    }\r\n\r\n    public static restoreCtx(): void {\r\n        ContextManager.updateCtx(ContextManager.contextHistory.pop());\r\n    }\r\n\r\n    private static onDown(event: KeyboardEvent): void {\r\n        const keyCode: string = ContextManager.getKeyCodeFromEvent(event);\r\n        if (!ContextManager.isInCombo(keyCode)) {\r\n            ContextManager.addToCombo(keyCode);\r\n        }\r\n        ContextManager.execute(event);\r\n    }\r\n\r\n    private static onUp(event: KeyboardEvent): void {\r\n        const keyCode: string = ContextManager.getKeyCodeFromEvent(event);\r\n        ContextManager.removeFromCombo(keyCode);\r\n    }\r\n\r\n    public static onFocus() {\r\n        ContextManager.activeCombo = [];\r\n    }\r\n\r\n    private static execute(event: KeyboardEvent): void {\r\n        for (let i = 0; i < ContextManager.actions.length; i++) {\r\n            const hotKey: HotKeyAction = ContextManager.actions[i];\r\n            if (ContextManager.matchCombo(ContextManager.activeCombo, hotKey.keyCombo)) {\r\n                hotKey.action(event);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static isInCombo(keyCode: string): boolean {\r\n        return ContextManager.activeCombo.indexOf(keyCode) >= 0;\r\n    }\r\n\r\n    private static addToCombo(keyCode: string): void {\r\n        ContextManager.activeCombo.push(keyCode);\r\n    }\r\n\r\n    private static removeFromCombo(keyCode: string): void {\r\n        const index: number = ContextManager.activeCombo.indexOf(keyCode);\r\n        if (index >= 0) {\r\n            ContextManager.activeCombo.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    private static getKeyCodeFromEvent(event: KeyboardEvent): string {\r\n        return event.key;\r\n    }\r\n\r\n    private static matchCombo(combo1: string[], combo2: string[]): boolean {\r\n        return isEmpty(xor(combo1, combo2))\r\n    }\r\n}","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {LabelType} from \"../../../../data/enums/LabelType\";\r\nimport {ISize} from \"../../../../interfaces/ISize\";\r\nimport {AppState} from \"../../../../store\";\r\nimport {ImageData, LabelPoint, LabelRect} from \"../../../../store/labels/types\";\r\nimport {VirtualList} from \"../../../Common/VirtualList/VirtualList\";\r\nimport ImagePreview from \"../ImagePreview/ImagePreview\";\r\nimport './ImagesList.scss';\r\nimport {ContextManager} from \"../../../../logic/context/ContextManager\";\r\nimport {ContextType} from \"../../../../data/enums/ContextType\";\r\nimport {ImageActions} from \"../../../../logic/actions/ImageActions\";\r\nimport {EventType} from \"../../../../data/enums/EventType\";\r\nimport {LabelStatus} from \"../../../../data/enums/LabelStatus\";\r\n\r\ninterface IProps {\r\n    activeImageIndex: number;\r\n    imagesData: ImageData[];\r\n    activeLabelType: LabelType;\r\n}\r\n\r\ninterface IState {\r\n    size: ISize;\r\n}\r\n\r\nclass ImagesList extends React.Component<IProps, IState> {\r\n    private imagesListRef: HTMLDivElement;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            size: null,\r\n        }\r\n    }\r\n\r\n    public componentDidMount(): void {\r\n        this.updateListSize();\r\n        window.addEventListener(EventType.RESIZE, this.updateListSize);\r\n    }\r\n\r\n    public componentWillUnmount(): void {\r\n        window.removeEventListener(EventType.RESIZE, this.updateListSize);\r\n    }\r\n\r\n    private updateListSize = () => {\r\n        if (!this.imagesListRef)\r\n            return;\r\n\r\n        const listBoundingBox = this.imagesListRef.getBoundingClientRect();\r\n        this.setState({\r\n            size: {\r\n                width: listBoundingBox.width,\r\n                height: listBoundingBox.height\r\n            }\r\n        })\r\n    };\r\n\r\n    private isImageChecked = (index:number): boolean => {\r\n        const imageData = this.props.imagesData[index]\r\n        switch (this.props.activeLabelType) {\r\n            case LabelType.LINE:\r\n                return imageData.labelLines.length > 0\r\n            case LabelType.IMAGE_RECOGNITION:\r\n                return imageData.labelNameIds.length > 0\r\n            case LabelType.POINT:\r\n                return imageData.labelPoints\r\n                    .filter((labelPoint: LabelPoint) => labelPoint.status === LabelStatus.ACCEPTED)\r\n                    .length > 0\r\n            case LabelType.POLYGON:\r\n                return imageData.labelPolygons.length > 0\r\n            case LabelType.RECT:\r\n                return imageData.labelRects\r\n                    .filter((labelRect: LabelRect) => labelRect.status === LabelStatus.ACCEPTED)\r\n                    .length > 0\r\n        }\r\n    };\r\n\r\n    private onClickHandler = (index: number) => {\r\n        ImageActions.getImageByIndex(index)\r\n    };\r\n\r\n    private renderImagePreview = (index: number, isScrolling: boolean, isVisible: boolean, style: React.CSSProperties) => {\r\n        return <ImagePreview\r\n            key={index}\r\n            style={style}\r\n            size={{width: 150, height: 150}}\r\n            isScrolling={isScrolling}\r\n            isChecked={this.isImageChecked(index)}\r\n            imageData={this.props.imagesData[index]}\r\n            onClick={() => this.onClickHandler(index)}\r\n            isSelected={this.props.activeImageIndex === index}\r\n        />\r\n    };\r\n\r\n    public render() {\r\n        const { size } = this.state;\r\n        return(\r\n            <div\r\n                className=\"ImagesList\"\r\n                ref={ref => this.imagesListRef = ref}\r\n                onClick={() => ContextManager.switchCtx(ContextType.LEFT_NAVBAR)}\r\n            >\r\n                {!!size && <VirtualList\r\n                    size={size}\r\n                    childSize={{width: 150, height: 150}}\r\n                    childCount={this.props.imagesData.length}\r\n                    childRender={this.renderImagePreview}\r\n                    overScanHeight={200}\r\n                />}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    activeImageIndex: state.labels.activeImageIndex,\r\n    imagesData: state.labels.imagesData,\r\n    activeLabelType: state.labels.activeLabelType\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(ImagesList);","import {LabelType} from '../enums/LabelType';\r\nimport {ProjectType} from '../enums/ProjectType';\r\n\r\nexport interface ILabelToolkit {\r\n    labelType: LabelType;\r\n    headerText: string;\r\n    imageSrc: string;\r\n    imageAlt: string;\r\n    projectType: ProjectType;\r\n}\r\n\r\nexport const LabelToolkitData: ILabelToolkit[] = [\r\n    {\r\n        labelType: LabelType.IMAGE_RECOGNITION,\r\n        headerText: 'Image recognition',\r\n        imageSrc: 'ico/object.png',\r\n        imageAlt: 'object',\r\n        projectType: ProjectType.IMAGE_RECOGNITION,\r\n    },\r\n    {\r\n        labelType: LabelType.RECT,\r\n        headerText: 'Rect',\r\n        imageSrc: 'ico/rectangle.png',\r\n        imageAlt: 'rectangle',\r\n        projectType: ProjectType.OBJECT_DETECTION,\r\n    },\r\n    // {\r\n    //     labelType: LabelType.POINT,\r\n    //     headerText: 'Point',\r\n    //     imageSrc: 'ico/point.png',\r\n    //     imageAlt: 'point',\r\n    //     projectType: ProjectType.OBJECT_DETECTION,\r\n    // },\r\n    // {\r\n    //     labelType: LabelType.LINE,\r\n    //     headerText: 'Line',\r\n    //     imageSrc: 'ico/line.png',\r\n    //     imageAlt: 'line',\r\n    //     projectType: ProjectType.OBJECT_DETECTION,\r\n    // },\r\n    {\r\n        labelType: LabelType.POLYGON,\r\n        headerText: 'Polygon',\r\n        imageSrc: 'ico/polygon.png',\r\n        imageAlt: 'polygon',\r\n        projectType: ProjectType.OBJECT_DETECTION,\r\n    },\r\n];","import * as React from 'react';\r\nimport {ISize} from \"../../../interfaces/ISize\";\r\nimport './ImageButton.scss';\r\nimport classNames from \"classnames\";\r\nimport {LegacyRef} from \"react\";\r\n\r\nexport interface ImageButtonProps extends React.HTMLProps<HTMLDivElement> {\r\n    buttonSize:ISize,\r\n    padding?:number;\r\n    image:string,\r\n    imageAlt:string,\r\n    href?:string\r\n    onClick?:() => any;\r\n    style?:React.CSSProperties\r\n    isActive?:boolean;\r\n    isDisabled?:boolean;\r\n    externalClassName?:string;\r\n}\r\n\r\nexport const ImageButton = React.forwardRef((props: ImageButtonProps, ref: LegacyRef<HTMLDivElement>) => {\r\n    const {buttonSize, padding, image, imageAlt, href, onClick, style, isActive, isDisabled, externalClassName} = props;\r\n    const imagePadding:number = !!padding ? padding : 10;\r\n\r\n    const onClickHandler = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n        event.stopPropagation();\r\n        !!onClick && onClick();\r\n    };\r\n\r\n    const buttonStyle:React.CSSProperties = {\r\n        ...style,\r\n        width: buttonSize.width,\r\n        height: buttonSize.height\r\n    };\r\n\r\n    const imageStyle:React.CSSProperties = {\r\n        maxWidth: buttonSize.width - imagePadding,\r\n        maxHeight: buttonSize.height - imagePadding\r\n    };\r\n\r\n    const getClassName = () => {\r\n        return classNames(\r\n            \"ImageButton\",\r\n            externalClassName,\r\n            {\r\n                \"active\": isActive,\r\n                \"disabled\": isDisabled,\r\n            }\r\n        );\r\n    };\r\n    \r\n    return(\r\n        <div\r\n            className={getClassName()}\r\n            style={buttonStyle}\r\n            onClick={onClickHandler}\r\n            ref={ref}\r\n        >\r\n            {!!href && <a href={href} style={imageStyle} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                <img\r\n                    draggable={false}\r\n                    alt={imageAlt}\r\n                    src={image}\r\n                    style={imageStyle}\r\n                />\r\n            </a>}\r\n            {!href && <img\r\n                draggable={false}\r\n                alt={imageAlt}\r\n                src={image}\r\n                style={imageStyle}\r\n            />}\r\n        </div>\r\n    );\r\n});\r\n","import React from 'react';\r\nimport {ISize} from \"../../../../interfaces/ISize\";\r\nimport './LabelInputField.scss';\r\nimport classNames from \"classnames\";\r\nimport {ImageButton} from \"../../../Common/ImageButton/ImageButton\";\r\nimport {IRect} from \"../../../../interfaces/IRect\";\r\nimport {IPoint} from \"../../../../interfaces/IPoint\";\r\nimport {RectUtil} from \"../../../../utils/RectUtil\";\r\nimport {AppState} from \"../../../../store\";\r\nimport {connect} from \"react-redux\";\r\nimport {updateActiveLabelId, updateHighlightedLabelId} from \"../../../../store/labels/actionCreators\";\r\nimport Scrollbars from 'react-custom-scrollbars';\r\nimport {EventType} from \"../../../../data/enums/EventType\";\r\nimport {LabelName} from \"../../../../store/labels/types\";\r\nimport {LabelsSelector} from \"../../../../store/selectors/LabelsSelector\";\r\nimport {PopupWindowType} from \"../../../../data/enums/PopupWindowType\";\r\nimport {updateActivePopupType} from \"../../../../store/general/actionCreators\";\r\n\r\ninterface IProps {\r\n    size: ISize;\r\n    isActive: boolean;\r\n    isHighlighted: boolean;\r\n    id: string;\r\n    value: LabelName;\r\n    options: LabelName[];\r\n    onDelete: (id: string) => any;\r\n    onSelectLabel: (labelRectId: string, labelNameId: string) => any;\r\n    updateHighlightedLabelId: (highlightedLabelId: string) => any;\r\n    updateActiveLabelId: (highlightedLabelId: string) => any;\r\n    updateActivePopupType: (activePopupType: PopupWindowType) => any;\r\n}\r\n\r\ninterface IState {\r\n    animate: boolean;\r\n    isOpen: boolean;\r\n}\r\n\r\nclass LabelInputField extends React.Component<IProps, IState> {\r\n    private dropdownOptionHeight: number = 30;\r\n    private dropdownOptionCount: number = 6;\r\n    private dropdownMargin: number = 4;\r\n    private dropdownLabel: HTMLDivElement;\r\n    private dropdown: HTMLDivElement;\r\n\r\n    public constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            animate: false,\r\n            isOpen: false\r\n        }\r\n    }\r\n\r\n    public componentDidMount(): void {\r\n        requestAnimationFrame(() => {\r\n            this.setState({ animate: true });\r\n        });\r\n    }\r\n\r\n    private getClassName() {\r\n        return classNames(\r\n            \"LabelInputField\",\r\n            {\r\n                \"loaded\": this.state.animate,\r\n                \"active\": this.props.isActive,\r\n                \"highlighted\": this.props.isHighlighted\r\n            }\r\n        );\r\n    }\r\n\r\n    private openDropdown = () => {\r\n        if (LabelsSelector.getLabelNames().length === 0) {\r\n            this.props.updateActivePopupType(PopupWindowType.UPDATE_LABEL);\r\n        } else {\r\n            this.setState({isOpen: true});\r\n            window.addEventListener(EventType.MOUSE_DOWN, this.closeDropdown);\r\n        }\r\n    };\r\n\r\n    private closeDropdown = (event: MouseEvent) => {\r\n        const mousePosition: IPoint = {x: event.clientX, y: event.clientY};\r\n        const clientRect = this.dropdown.getBoundingClientRect();\r\n        const dropDownRect: IRect = {\r\n            x: clientRect.left,\r\n            y: clientRect.top,\r\n            width: clientRect.width,\r\n            height: clientRect.height\r\n        };\r\n\r\n        if (!RectUtil.isPointInside(dropDownRect, mousePosition)) {\r\n            this.setState({isOpen: false});\r\n            window.removeEventListener(EventType.MOUSE_DOWN, this.closeDropdown)\r\n        }\r\n    };\r\n\r\n    private getDropdownStyle = ():React.CSSProperties => {\r\n        const clientRect = this.dropdownLabel.getBoundingClientRect();\r\n        const height: number = Math.min(this.props.options.length, this.dropdownOptionCount) * this.dropdownOptionHeight;\r\n        const style = {\r\n            width: clientRect.width,\r\n            height: height,\r\n            left: clientRect.left\r\n        };\r\n\r\n        if (window.innerHeight * 2/3 < clientRect.top)\r\n            return Object.assign(style, {top: clientRect.top - this.dropdownMargin - height});\r\n        else\r\n            return Object.assign(style, {top: clientRect.bottom + this.dropdownMargin});\r\n    };\r\n\r\n    private getDropdownOptions = () => {\r\n        const onClick = (id: string, event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n            this.setState({isOpen: false});\r\n            window.removeEventListener(EventType.MOUSE_DOWN, this.closeDropdown);\r\n            this.props.onSelectLabel(this.props.id, id);\r\n            this.props.updateHighlightedLabelId(null);\r\n            this.props.updateActiveLabelId(this.props.id);\r\n            event.stopPropagation();\r\n        };\r\n\r\n        return this.props.options.map((option: LabelName) => {\r\n            return <div\r\n                className=\"DropdownOption\"\r\n                key={option.id}\r\n                style={{height: this.dropdownOptionHeight}}\r\n                onClick={(event) => onClick(option.id, event)}\r\n            >\r\n                {option.name}\r\n            </div>\r\n        })\r\n    };\r\n\r\n    private mouseEnterHandler = () => {\r\n        this.props.updateHighlightedLabelId(this.props.id);\r\n    };\r\n\r\n    private mouseLeaveHandler =() => {\r\n        this.props.updateHighlightedLabelId(null);\r\n    };\r\n\r\n    private onClickHandler = () => {\r\n        this.props.updateActiveLabelId(this.props.id);\r\n    };\r\n\r\n    public render() {\r\n        const {size, id, value, onDelete} = this.props;\r\n        return(\r\n            <div\r\n                className={this.getClassName()}\r\n                style={{\r\n                    width: size.width,\r\n                    height: size.height,\r\n                }}\r\n                key={id}\r\n                onMouseEnter={this.mouseEnterHandler}\r\n                onMouseLeave={this.mouseLeaveHandler}\r\n                onClick={this.onClickHandler}\r\n            >\r\n                <div\r\n                    className=\"LabelInputFieldWrapper\"\r\n                    style={{\r\n                        width: size.width,\r\n                        height: size.height,\r\n                    }}\r\n                >\r\n                    <div className=\"Marker\"/>\r\n                    <div className=\"Content\">\r\n                        <div className=\"ContentWrapper\">\r\n                            <div className=\"DropdownLabel\"\r\n                                 ref={ref => this.dropdownLabel = ref}\r\n                                 onClick={this.openDropdown}\r\n                            >\r\n                                {value ? value.name : \"Select label\"}\r\n                            </div>\r\n                            {this.state.isOpen && <div\r\n                                className=\"Dropdown\"\r\n                                style={this.getDropdownStyle()}\r\n                                ref={ref => this.dropdown = ref}\r\n                            >\r\n                                <Scrollbars\r\n                                    renderTrackHorizontal={props => <div {...props} className=\"track-horizontal\"/>}\r\n                                >\r\n                                    <div>\r\n                                        {this.getDropdownOptions()}\r\n                                    </div>\r\n                                </Scrollbars>\r\n\r\n                            </div>}\r\n                        </div>\r\n                        <div className=\"ContentWrapper\">\r\n                            <ImageButton\r\n                                externalClassName={\"trash\"}\r\n                                image={\"ico/trash.png\"}\r\n                                imageAlt={\"remove_rect\"}\r\n                                buttonSize={{width: 30, height: 30}}\r\n                                onClick={() => onDelete(id)}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    updateHighlightedLabelId,\r\n    updateActiveLabelId,\r\n    updateActivePopupType\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(LabelInputField);","import React from 'react';\r\nimport './EmptyLabelList.scss';\r\nimport {AppState} from \"../../../../store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ninterface IProps {\r\n    firstLabelCreatedFlag: boolean;\r\n    labelBefore: string;\r\n    labelAfter: string;\r\n}\r\n\r\nconst EmptyLabelList: React.FC<IProps> = ({firstLabelCreatedFlag, labelBefore, labelAfter}) => {\r\n    const before = <>\r\n        {/* <img\r\n            draggable={false}\r\n            alt={\"lets_start\"}\r\n            src={\"ico/rocket.png\"}\r\n        /> */}\r\n        <p className=\"extraBold\">{labelBefore}</p>\r\n    </>;\r\n\r\n    const after = <>\r\n        <img\r\n            draggable={false}\r\n            alt={\"no_labels\"}\r\n            src={\"ico/box-opened.png\"}\r\n        />\r\n        <p className=\"extraBold\">{labelAfter}</p>\r\n    </>;\r\n\r\n    return(<div className=\"EmptyLabelList\">\r\n        {!firstLabelCreatedFlag ? before : after}\r\n    </div>)\r\n};\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    firstLabelCreatedFlag: state.labels.firstLabelCreatedFlag\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(EmptyLabelList);","import React from 'react';\r\nimport {ISize} from \"../../../../interfaces/ISize\";\r\nimport Scrollbars from 'react-custom-scrollbars';\r\nimport {ImageData, LabelName, LabelRect} from \"../../../../store/labels/types\";\r\nimport './RectLabelsList.scss';\r\nimport {\r\n    updateActiveLabelId,\r\n    updateActiveLabelNameId,\r\n    updateImageDataById\r\n} from \"../../../../store/labels/actionCreators\";\r\nimport {AppState} from \"../../../../store\";\r\nimport {connect} from \"react-redux\";\r\nimport LabelInputField from \"../LabelInputField/LabelInputField\";\r\nimport EmptyLabelList from \"../EmptyLabelList/EmptyLabelList\";\r\nimport {LabelActions} from \"../../../../logic/actions/LabelActions\";\r\nimport {LabelStatus} from \"../../../../data/enums/LabelStatus\";\r\nimport {findLast} from \"lodash\";\r\n\r\ninterface IProps {\r\n    size: ISize;\r\n    imageData: ImageData;\r\n    updateImageDataById: (id: string, newImageData: ImageData) => any;\r\n    activeLabelId: string;\r\n    highlightedLabelId: string;\r\n    updateActiveLabelNameId: (activeLabelId: string) => any;\r\n    labelNames: LabelName[];\r\n    updateActiveLabelId: (activeLabelId: string) => any;\r\n}\r\n\r\nconst RectLabelsList: React.FC<IProps> = ({size, imageData, updateImageDataById, labelNames, updateActiveLabelNameId, activeLabelId, highlightedLabelId, updateActiveLabelId}) => {\r\n    const labelInputFieldHeight = 40;\r\n    const listStyle: React.CSSProperties = {\r\n        width: size.width,\r\n        height: size.height\r\n    };\r\n    const listStyleContent: React.CSSProperties = {\r\n        width: size.width,\r\n        height: imageData.labelRects.length * labelInputFieldHeight\r\n    };\r\n\r\n    const deleteRectLabelById = (labelRectId: string) => {\r\n        LabelActions.deleteRectLabelById(imageData.id, labelRectId);\r\n    };\r\n\r\n    const updateRectLabel = (labelRectId: string, labelNameId: string) => {\r\n        const newImageData = {\r\n            ...imageData,\r\n            labelRects: imageData.labelRects\r\n                .map((labelRect: LabelRect) => {\r\n                if (labelRect.id === labelRectId) {\r\n                    return {\r\n                        ...labelRect,\r\n                        labelId: labelNameId,\r\n                        status: LabelStatus.ACCEPTED\r\n                    }\r\n                } else {\r\n                    return labelRect\r\n                }\r\n            })\r\n        };\r\n        updateImageDataById(imageData.id, newImageData);\r\n        updateActiveLabelNameId(labelNameId);\r\n    };\r\n\r\n    const onClickHandler = () => {\r\n        updateActiveLabelId(null);\r\n    };\r\n\r\n    const getChildren = () => {\r\n        return imageData.labelRects\r\n            .filter((labelRect: LabelRect) => labelRect.status === LabelStatus.ACCEPTED)\r\n            .map((labelRect: LabelRect) => {\r\n            return <LabelInputField\r\n                size={{\r\n                    width: size.width,\r\n                    height: labelInputFieldHeight\r\n                }}\r\n                isActive={labelRect.id === activeLabelId}\r\n                isHighlighted={labelRect.id === highlightedLabelId}\r\n                id={labelRect.id}\r\n                key={labelRect.id}\r\n                onDelete={deleteRectLabelById}\r\n                value={labelRect.labelId !== null ? findLast(labelNames, {id: labelRect.labelId}) : null}\r\n                options={labelNames}\r\n                onSelectLabel={updateRectLabel}\r\n            />\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className=\"RectLabelsList\"\r\n            style={listStyle}\r\n            onClickCapture={onClickHandler}\r\n        >\r\n            {imageData.labelRects.filter((labelRect: LabelRect) => labelRect.status === LabelStatus.ACCEPTED).length === 0 ?\r\n                <EmptyLabelList\r\n                    labelBefore={\"draw your first bounding box\"}\r\n                    labelAfter={\"no labels created for this image yet\"}\r\n                /> :\r\n                <Scrollbars>\r\n                    <div\r\n                        className=\"RectLabelsListContent\"\r\n                        style={listStyleContent}\r\n                    >\r\n                        {getChildren()}\r\n                    </div>\r\n                </Scrollbars>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    updateImageDataById,\r\n    updateActiveLabelNameId,\r\n    updateActiveLabelId\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    activeLabelId: state.labels.activeLabelId,\r\n    highlightedLabelId: state.labels.highlightedLabelId,\r\n    labelNames : state.labels.labels\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(RectLabelsList);","import React from 'react';\r\nimport {ISize} from \"../../../../interfaces/ISize\";\r\nimport Scrollbars from 'react-custom-scrollbars';\r\nimport {ImageData, LabelName, LabelPolygon} from \"../../../../store/labels/types\";\r\nimport './PolygonLabelsList.scss';\r\nimport {\r\n    updateActiveLabelId,\r\n    updateActiveLabelNameId,\r\n    updateImageDataById\r\n} from \"../../../../store/labels/actionCreators\";\r\nimport {AppState} from \"../../../../store\";\r\nimport {connect} from \"react-redux\";\r\nimport LabelInputField from \"../LabelInputField/LabelInputField\";\r\nimport EmptyLabelList from \"../EmptyLabelList/EmptyLabelList\";\r\nimport {LabelActions} from \"../../../../logic/actions/LabelActions\";\r\nimport {findLast} from \"lodash\";\r\n\r\ninterface IProps {\r\n    size: ISize;\r\n    imageData: ImageData;\r\n    updateImageDataById: (id: string, newImageData: ImageData) => any;\r\n    activeLabelId: string;\r\n    highlightedLabelId: string;\r\n    updateActiveLabelNameId: (activeLabelId: string) => any;\r\n    labelNames: LabelName[];\r\n    updateActiveLabelId: (activeLabelId: string) => any;\r\n}\r\n\r\nconst PolygonLabelsList: React.FC<IProps> = ({size, imageData, updateImageDataById, labelNames, updateActiveLabelNameId, activeLabelId, highlightedLabelId, updateActiveLabelId}) => {\r\n    const labelInputFieldHeight = 40;\r\n    const listStyle: React.CSSProperties = {\r\n        width: size.width,\r\n        height: size.height\r\n    };\r\n    const listStyleContent: React.CSSProperties = {\r\n        width: size.width,\r\n        height: imageData.labelPolygons.length * labelInputFieldHeight\r\n    };\r\n\r\n    const deletePolygonLabelById = (labelPolygonId: string) => {\r\n        LabelActions.deletePolygonLabelById(imageData.id, labelPolygonId);\r\n    };\r\n\r\n    const updatePolygonLabel = (labelPolygonId: string, labelNameId: string) => {\r\n        const newImageData = {\r\n            ...imageData,\r\n            labelPolygons: imageData.labelPolygons.map((currentLabel: LabelPolygon) => {\r\n                if (currentLabel.id === labelPolygonId) {\r\n                    return {\r\n                        ...currentLabel,\r\n                        labelId: labelNameId\r\n                    }\r\n                }\r\n                return currentLabel\r\n            })\r\n        };\r\n        updateImageDataById(imageData.id, newImageData);\r\n        updateActiveLabelNameId(labelNameId);\r\n    };\r\n\r\n    const onClickHandler = () => {\r\n        updateActiveLabelId(null);\r\n    };\r\n\r\n    const getChildren = () => {\r\n        return imageData.labelPolygons.map((labelPolygon: LabelPolygon) => {\r\n            return <LabelInputField\r\n                size={{\r\n                    width: size.width,\r\n                    height: labelInputFieldHeight\r\n                }}\r\n                isActive={labelPolygon.id === activeLabelId}\r\n                isHighlighted={labelPolygon.id === highlightedLabelId}\r\n                id={labelPolygon.id}\r\n                key={labelPolygon.id}\r\n                onDelete={deletePolygonLabelById}\r\n                value={labelPolygon.labelId !== null ? findLast(labelNames, {id: labelPolygon.labelId}) : null}\r\n                options={labelNames}\r\n                onSelectLabel={updatePolygonLabel}\r\n            />\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className=\"PolygonLabelsList\"\r\n            style={listStyle}\r\n            onClickCapture={onClickHandler}\r\n        >\r\n            {imageData.labelPolygons.length === 0 ?\r\n                <EmptyLabelList\r\n                    labelBefore={\"draw your first polygon\"}\r\n                    labelAfter={\"no labels created for this image yet\"}\r\n                /> :\r\n                <Scrollbars>\r\n                    <div\r\n                        className=\"PolygonLabelsListContent\"\r\n                        style={listStyleContent}\r\n                    >\r\n                        {getChildren()}\r\n                    </div>\r\n                </Scrollbars>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    updateImageDataById,\r\n    updateActiveLabelNameId,\r\n    updateActiveLabelId\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    activeLabelId: state.labels.activeLabelId,\r\n    highlightedLabelId: state.labels.highlightedLabelId,\r\n    labelNames : state.labels.labels\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(PolygonLabelsList);","import {ISize} from \"../../../../interfaces/ISize\";\r\nimport {ImageData, LabelName} from \"../../../../store/labels/types\";\r\nimport React from \"react\";\r\nimport Scrollbars from \"react-custom-scrollbars\";\r\nimport {updateImageDataById} from \"../../../../store/labels/actionCreators\";\r\nimport {AppState} from \"../../../../store\";\r\nimport {connect} from \"react-redux\";\r\nimport {remove} from \"lodash\";\r\nimport './TagLabelsList.scss';\r\nimport classNames from \"classnames\";\r\nimport {ImageButton} from \"../../../Common/ImageButton/ImageButton\";\r\nimport {PopupWindowType} from \"../../../../data/enums/PopupWindowType\";\r\nimport {updateActivePopupType} from \"../../../../store/general/actionCreators\";\r\ninterface IProps {\r\n    size: ISize;\r\n    imageData: ImageData;\r\n    updateImageDataById: (id: string, newImageData: ImageData) => any;\r\n    labelNames: LabelName[];\r\n    updateActivePopupType: (activePopupType: PopupWindowType) => any;\r\n}\r\n\r\nconst TagLabelsList: React.FC<IProps> = (\r\n    {\r\n        size,\r\n        imageData,\r\n        updateImageDataById,\r\n        labelNames,\r\n        updateActivePopupType\r\n    }) => {\r\n    const labelInputFieldHeight = 40;\r\n    const listStyle: React.CSSProperties = {\r\n        width: size.width,\r\n        height: size.height\r\n    };\r\n    const listStyleContent: React.CSSProperties = {\r\n        width: size.width,\r\n        height: imageData.labelPolygons.length * labelInputFieldHeight\r\n    };\r\n\r\n    const onTagClick = (labelId: string)  => {\r\n        if (imageData.labelNameIds.includes(labelId)) {\r\n            updateImageDataById(imageData.id, {\r\n                ...imageData,\r\n                labelNameIds: remove(imageData.labelNameIds, (element: string) => element !== labelId)\r\n            })\r\n        } else {\r\n            updateImageDataById(imageData.id, {\r\n                ...imageData,\r\n                labelNameIds: imageData.labelNameIds.concat(labelId)\r\n            })\r\n        }\r\n    }\r\n\r\n    const getClassName = (labelId: string) => {\r\n        return classNames(\r\n            \"TagItem\",\r\n            {\r\n                \"active\": imageData.labelNameIds.includes(labelId)\r\n            }\r\n        );\r\n    };\r\n\r\n    const addNewOnClick = () => {\r\n        updateActivePopupType(PopupWindowType.UPDATE_LABEL)\r\n    }\r\n\r\n    const getChildren = () => {\r\n        return [\r\n            ...labelNames.map((labelName: LabelName) => {\r\n                return <div\r\n                    className={getClassName(labelName.id)}\r\n                    onClickCapture={() => onTagClick(labelName.id)}\r\n                    key={labelName.id}\r\n                >\r\n                    {labelName.name}\r\n                </div>\r\n            }),\r\n            <ImageButton\r\n                image={\"ico/plus.png\"}\r\n                imageAlt={\"plus\"}\r\n                buttonSize={{width: 32, height: 32}}\r\n                onClick={addNewOnClick}\r\n            />\r\n        ]\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className=\"TagLabelsList\"\r\n            style={listStyle}\r\n            key=\"tag-labels-list\"\r\n        >\r\n            {labelNames.length === 0 ?\r\n                <div\r\n                    className=\"EmptyLabelList\"\r\n                    onClick={addNewOnClick}\r\n                    key=\"empty-label-list\"\r\n                >\r\n                    <img\r\n                        draggable={false}\r\n                        alt={\"upload\"}\r\n                        src={\"ico/type-writer.png\"}\r\n                    />\r\n                    <p className=\"extraBold\">Your label list is empty</p>\r\n                </div> :\r\n                <Scrollbars>\r\n                    <div\r\n                        className=\"TagLabelsListContent\"\r\n                        style={listStyleContent}\r\n                        key=\"tag-labels-list-content\"\r\n                    >\r\n                        {getChildren()}\r\n                    </div>\r\n                </Scrollbars>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    updateImageDataById,\r\n    updateActivePopupType\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    labelNames : state.labels.labels\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(TagLabelsList);","import React from \"react\";\r\nimport './LabelsToolkit.scss';\r\nimport {ImageData} from \"../../../../store/labels/types\";\r\nimport {updateActiveLabelId, updateActiveLabelType, updateImageDataById} from \"../../../../store/labels/actionCreators\";\r\nimport {AppState} from \"../../../../store\";\r\nimport {connect} from \"react-redux\";\r\nimport {LabelType} from \"../../../../data/enums/LabelType\";\r\nimport {ProjectType} from \"../../../../data/enums/ProjectType\";\r\nimport {ISize} from \"../../../../interfaces/ISize\";\r\nimport classNames from \"classnames\";\r\nimport {find} from \"lodash\";\r\nimport {ILabelToolkit, LabelToolkitData} from \"../../../../data/info/LabelToolkitData\";\r\nimport {Settings} from \"../../../../settings/Settings\";\r\nimport RectLabelsList from \"../RectLabelsList/RectLabelsList\";\r\nimport PointLabelsList from \"../PointLabelsList/PointLabelsList\";\r\nimport PolygonLabelsList from \"../PolygonLabelsList/PolygonLabelsList\";\r\nimport {ContextManager} from \"../../../../logic/context/ContextManager\";\r\nimport {ContextType} from \"../../../../data/enums/ContextType\";\r\nimport {EventType} from \"../../../../data/enums/EventType\";\r\nimport LineLabelsList from \"../LineLabelsList/LineLabelsList\";\r\nimport TagLabelsList from \"../TagLabelsList/TagLabelsList\";\r\n\r\ninterface IProps {\r\n    activeImageIndex:number,\r\n    activeLabelType: LabelType;\r\n    imagesData: ImageData[];\r\n    projectType: ProjectType;\r\n    updateImageDataById: (id: string, newImageData: ImageData) => any;\r\n    updateActiveLabelType: (activeLabelType: LabelType) => any;\r\n    updateActiveLabelId: (highlightedLabelId: string) => any;\r\n}\r\n\r\ninterface IState {\r\n    size: ISize;\r\n}\r\n\r\nclass LabelsToolkit extends React.Component<IProps, IState> {\r\n    private labelsToolkitRef: HTMLDivElement;\r\n    private readonly tabs: LabelType[];\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            size: null,\r\n        };\r\n\r\n        this.tabs = props.projectType === ProjectType.IMAGE_RECOGNITION ?\r\n            [\r\n                LabelType.IMAGE_RECOGNITION\r\n            ] :\r\n            [\r\n                LabelType.RECT,\r\n                // LabelType.POINT,\r\n                // LabelType.LINE,\r\n                LabelType.POLYGON\r\n            ];\r\n\r\n        const activeTab: LabelType = props.activeLabelType ? props.activeLabelType : this.tabs[0];\r\n        props.updateActiveLabelType(activeTab);\r\n    }\r\n\r\n    public componentDidMount(): void {\r\n        this.updateToolkitSize();\r\n        window.addEventListener(EventType.RESIZE, this.updateToolkitSize);\r\n    }\r\n\r\n    public componentWillUnmount(): void {\r\n        window.removeEventListener(EventType.RESIZE, this.updateToolkitSize);\r\n    }\r\n\r\n    private updateToolkitSize = () => {\r\n        if (!this.labelsToolkitRef)\r\n            return;\r\n\r\n        const listBoundingBox = this.labelsToolkitRef.getBoundingClientRect();\r\n        this.setState({\r\n            size: {\r\n                width: listBoundingBox.width,\r\n                height: listBoundingBox.height\r\n            }\r\n        })\r\n    };\r\n\r\n    private headerClickHandler = (activeTab: LabelType) => {\r\n        this.props.updateActiveLabelType(activeTab);\r\n        this.props.updateActiveLabelId(null);\r\n    };\r\n\r\n    private renderChildren = () => {\r\n        const {size} = this.state;\r\n        const {activeImageIndex, imagesData, activeLabelType} = this.props;\r\n        return this.tabs.reduce((children, labelType: LabelType, index: number) => {\r\n            const isActive: boolean = labelType === activeLabelType;\r\n            const tabData: ILabelToolkit = find(LabelToolkitData, {labelType});\r\n            const activeTabContentHeight: number = size.height - this.tabs.length * Settings.TOOLKIT_TAB_HEIGHT_PX;\r\n            const getClassName = (baseClass: string) => classNames(\r\n                baseClass,\r\n                {\r\n                    \"active\": isActive,\r\n                }\r\n            );\r\n\r\n            const header =\r\n                <div\r\n                    key={\"Header_\" + index}\r\n                    className={getClassName(\"Header\")}\r\n                    onClick={() => this.headerClickHandler(labelType)}\r\n                    style={{height: Settings.TOOLKIT_TAB_HEIGHT_PX}}\r\n                >\r\n                    <div className=\"Marker\"/>\r\n                    <div className=\"HeaderGroupWrapper\">\r\n                        <img\r\n                            draggable={false}\r\n                            className=\"Ico\"\r\n                            src={tabData.imageSrc}\r\n                            alt={tabData.imageAlt}\r\n                        />\r\n                        {tabData.headerText}\r\n                    </div>\r\n                    <div className=\"HeaderGroupWrapper\">\r\n                        <img\r\n                            draggable={false}\r\n                            className=\"Arrow\"\r\n                            src={\"ico/down.png\"}\r\n                            alt={\"down_arrow\"}\r\n                        />\r\n                    </div>\r\n                </div>;\r\n\r\n            const content =\r\n                <div\r\n                    key={\"Content_\" + index}\r\n                    className={getClassName(\"Content\")}\r\n                    style={{height: isActive ? activeTabContentHeight : 0}}\r\n                >\r\n                    {labelType === LabelType.RECT && <RectLabelsList\r\n                        size={{\r\n                            width: size.width - 20,\r\n                            height: activeTabContentHeight - 20\r\n                        }}\r\n                        imageData={imagesData[activeImageIndex]}\r\n                    />}\r\n                    {/* {labelType === LabelType.POINT && <PointLabelsList\r\n                        size={{\r\n                            width: size.width - 20,\r\n                            height: activeTabContentHeight - 20\r\n                        }}\r\n                        imageData={imagesData[activeImageIndex]}\r\n                    />}\r\n                    {labelType === LabelType.LINE && <LineLabelsList\r\n                        size={{\r\n                            width: size.width - 20,\r\n                            height: activeTabContentHeight - 20\r\n                        }}\r\n                        imageData={imagesData[activeImageIndex]}\r\n                    />} */}\r\n                    {labelType === LabelType.POLYGON && <PolygonLabelsList\r\n                        size={{\r\n                            width: size.width - 20,\r\n                            height: activeTabContentHeight - 20\r\n                        }}\r\n                        imageData={imagesData[activeImageIndex]}\r\n                    />}\r\n                    {labelType === LabelType.IMAGE_RECOGNITION && <TagLabelsList\r\n                        size={{\r\n                            width: size.width - 20,\r\n                            height: activeTabContentHeight - 20\r\n                        }}\r\n                        imageData={imagesData[activeImageIndex]}\r\n                    />}\r\n                </div>;\r\n\r\n            children.push([header, content]);\r\n            return children;\r\n        }, [])\r\n    };\r\n\r\n    public render() {\r\n        return(\r\n            <div\r\n                className=\"LabelsToolkit\"\r\n                ref={ref => this.labelsToolkitRef = ref}\r\n                onClick={() => ContextManager.switchCtx(ContextType.RIGHT_NAVBAR)}\r\n            >\r\n                {this.state.size && this.renderChildren()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    updateImageDataById,\r\n    updateActiveLabelType,\r\n    updateActiveLabelId\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    activeImageIndex: state.labels.activeImageIndex,\r\n    activeLabelType: state.labels.activeLabelType,\r\n    imagesData: state.labels.imagesData,\r\n    projectType: state.general.projectData.type,\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(LabelsToolkit);","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport './SideNavigationBar.scss';\r\nimport {Direction} from \"../../../data/enums/Direction\";\r\n\r\ninterface IProps {\r\n    direction: Direction\r\n    isOpen: boolean;\r\n    isWithContext?: boolean;\r\n    renderCompanion?: () => any;\r\n    renderContent?: () => any;\r\n}\r\n\r\nexport const SideNavigationBar: React.FC<IProps> = (props) => {\r\n    const {direction, isOpen, isWithContext, renderContent, renderCompanion} = props;\r\n\r\n    const getClassName = () => {\r\n        return classNames(\r\n            \"SideNavigationBar\",\r\n            {\r\n                \"left\": direction === Direction.LEFT,\r\n                \"right\": direction === Direction.RIGHT,\r\n                \"with-context\": isWithContext,\r\n                \"closed\": !isOpen\r\n            }\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className={getClassName()}>\r\n            <div className=\"CompanionBar\">\r\n                {renderCompanion && renderCompanion()}\r\n            </div>\r\n            {isOpen && <div className=\"NavigationBarContentWrapper\">\r\n                {renderContent && renderContent()}\r\n            </div>}\r\n        </div>\r\n    );\r\n};","import * as React from \"react\";\r\nimport classNames from \"classnames\";\r\nimport './VerticalEditorButton.scss';\r\n\r\ninterface IProps {\r\n    key?:string;\r\n    label:string;\r\n    onClick?:() => any;\r\n    style?:React.CSSProperties;\r\n    isActive?:boolean;\r\n    isDisabled?:boolean;\r\n    image?:string,\r\n    imageAlt?:string,\r\n}\r\n\r\nexport const VerticalEditorButton = (props:IProps) => {\r\n\r\n    const { key, label, onClick, style, isActive, isDisabled, image, imageAlt} = props;\r\n\r\n    const getClassName = () => {\r\n        return classNames(\r\n            \"VerticalEditorButton\",\r\n            {\r\n                \"active\": isActive,\r\n                \"disabled\": isDisabled\r\n            }\r\n        );\r\n    };\r\n\r\n    return(\r\n        <div\r\n            className={getClassName()}\r\n            onClick={!!onClick ? onClick : undefined}\r\n            key={key}\r\n            style={style}\r\n        >\r\n            {image && <img \r\n                draggable={false}\r\n                alt={imageAlt} \r\n                src={image}\r\n            />}\r\n            {label}\r\n        </div>\r\n    )\r\n};","import {CustomCursorStyle} from \"../data/enums/CustomCursorStyle\";\r\nimport classNames from \"classnames\";\r\n\r\nexport class EditorUtil {\r\n    public static getIndicator = (cursorStyle: CustomCursorStyle): string => {\r\n        switch (cursorStyle) {\r\n            case CustomCursorStyle.ADD:\r\n                return \"ico/plus.png\";\r\n            case CustomCursorStyle.RESIZE:\r\n                return \"ico/resize.png\";\r\n            case CustomCursorStyle.CLOSE:\r\n                return \"ico/close.png\";\r\n            case CustomCursorStyle.MOVE:\r\n                return \"ico/move.png\";\r\n            case CustomCursorStyle.CANCEL:\r\n                return \"ico/cancel.png\";\r\n            case CustomCursorStyle.GRAB:\r\n                return \"ico/hand-fill.png\";\r\n            case CustomCursorStyle.GRABBING:\r\n                return \"ico/hand-fill-grab.png\";\r\n            default:\r\n                return null;\r\n        }\r\n    };\r\n\r\n    public static getCursorStyle = (cursorStyle: CustomCursorStyle) => {\r\n        return classNames(\r\n            \"Cursor\", {\r\n                \"move\": cursorStyle === CustomCursorStyle.MOVE,\r\n                \"add\": cursorStyle === CustomCursorStyle.ADD,\r\n                \"resize\": cursorStyle === CustomCursorStyle.RESIZE,\r\n                \"close\": cursorStyle === CustomCursorStyle.CLOSE,\r\n                \"cancel\": cursorStyle === CustomCursorStyle.CANCEL,\r\n                \"grab\": cursorStyle === CustomCursorStyle.GRAB,\r\n                \"grabbing\": cursorStyle === CustomCursorStyle.GRABBING\r\n            }\r\n        );\r\n    };\r\n}","import {MobileDeviceData} from \"../data/MobileDeviceData\";\r\n\r\nexport class PlatformModel {\r\n    public static mobileDeviceData: MobileDeviceData;\r\n    public static isMac: boolean;\r\n    public static isSafari: boolean;\r\n    public static isFirefox: boolean;\r\n}","import React, {useState} from 'react';\r\nimport './LabelControlPanel.scss';\r\nimport {updatePreventCustomCursorStatus} from \"../../../store/general/actionCreators\";\r\nimport {AppState} from \"../../../store\";\r\nimport {connect} from \"react-redux\";\r\nimport {IPoint} from \"../../../interfaces/IPoint\";\r\nimport classNames from \"classnames\";\r\nimport {LabelName, LabelPoint, LabelPolygon, LabelRect} from \"../../../store/labels/types\";\r\nimport {ImageButton} from \"../../Common/ImageButton/ImageButton\";\r\nimport {LabelActions} from \"../../../logic/actions/LabelActions\";\r\nimport {ImageData} from \"../../../store/labels/types\";\r\nimport {LabelStatus} from \"../../../data/enums/LabelStatus\";\r\nimport {updateImageDataById} from \"../../../store/labels/actionCreators\";\r\nimport {findLast} from \"lodash\";\r\nimport {LabelsSelector} from \"../../../store/selectors/LabelsSelector\";\r\n\r\ninterface IProps {\r\n    position: IPoint;\r\n    updatePreventCustomCursorStatus: (preventCustomCursor: boolean) => any;\r\n    activeLabelId: string;\r\n    highlightedLabelId: string;\r\n    labelData: LabelRect | LabelPoint | LabelPolygon;\r\n    imageData: ImageData;\r\n    updateImageDataById: (id: string, newImageData: ImageData) => any;\r\n}\r\n\r\nconst LabelControlPanel: React.FC<IProps> = ({position, updatePreventCustomCursorStatus, activeLabelId, highlightedLabelId, labelData, imageData, updateImageDataById}) => {\r\n    const [isActive, setIsActiveStatus] = useState(false);\r\n\r\n    const onMouseEnter = () => {\r\n        updatePreventCustomCursorStatus(true);\r\n        setIsActiveStatus(true);\r\n    };\r\n\r\n    const onMouseLeave = () => {\r\n        updatePreventCustomCursorStatus(false);\r\n        setIsActiveStatus(false);\r\n    };\r\n\r\n    const onAccept = () => {\r\n        const newImageData = {\r\n            ...imageData,\r\n            labelRects: imageData.labelRects.map((labelRect: LabelRect) => {\r\n                if (labelRect.id === labelData.id) {\r\n                    const labelName: LabelName = findLast(LabelsSelector.getLabelNames(), {name: labelRect.suggestedLabel});\r\n                    return {\r\n                        ...labelRect,\r\n                        status: LabelStatus.ACCEPTED,\r\n                        labelId: !!labelName ? labelName.id : labelRect.labelId\r\n                    }\r\n                } else {\r\n                    return labelRect\r\n                }\r\n            }),\r\n            labelPoints: imageData.labelPoints.map((labelPoint: LabelPoint) => {\r\n                if (labelPoint.id === labelData.id) {\r\n                    const labelName: LabelName = findLast(LabelsSelector.getLabelNames(), {name: labelPoint.suggestedLabel});\r\n                    return {\r\n                        ...labelPoint,\r\n                        status: LabelStatus.ACCEPTED,\r\n                        labelId: !!labelName ? labelName.id : labelPoint.labelId\r\n                    }\r\n                } else {\r\n                    return labelPoint\r\n                }\r\n            }),\r\n            labelPolygons: imageData.labelPolygons.map((labelPolygon: LabelPolygon) => {\r\n                if (labelPolygon.id === labelData.id) {\r\n                    const labelName: LabelName = findLast(LabelsSelector.getLabelNames(), {name: labelPolygon.suggestedLabel});\r\n                    return {\r\n                        ...labelPolygon,\r\n                        status: LabelStatus.ACCEPTED,\r\n                        labelId: !!labelName ? labelName.id : labelPolygon.labelId\r\n                    }\r\n                } else {\r\n                    return labelPolygon\r\n                }\r\n            })\r\n        };\r\n        updateImageDataById(imageData.id, newImageData);\r\n        updatePreventCustomCursorStatus(false);\r\n    };\r\n\r\n    const onReject = () => {\r\n        LabelActions.deleteImageLabelById(imageData.id, labelData.id);\r\n        updatePreventCustomCursorStatus(false);\r\n    };\r\n\r\n    const getClassName = () => {\r\n        return classNames(\r\n            \"LabelControlPanel\", {\r\n                \"is-active\": isPanelActive()\r\n            }\r\n        );\r\n    };\r\n\r\n    const isPanelActive = () => {\r\n        return isActive || labelData.id === activeLabelId || labelData.id === highlightedLabelId\r\n    };\r\n\r\n    return <div\r\n        className={getClassName()}\r\n        style={{top: position.y, left: position.x}}\r\n        onMouseEnter={onMouseEnter}\r\n        onMouseLeave={onMouseLeave}\r\n    >\r\n        {isPanelActive() && <>\r\n            <ImageButton\r\n                image={\"ico/plus.png\"}\r\n                imageAlt={\"plus\"}\r\n                buttonSize={{width: 30, height: 30}}\r\n                padding={15}\r\n                onClick={onAccept}\r\n            />\r\n            <ImageButton\r\n                image={\"ico/trash.png\"}\r\n                imageAlt={\"trash\"}\r\n                buttonSize={{width: 30, height: 30}}\r\n                padding={15}\r\n                onClick={onReject}\r\n            />\r\n            {labelData.suggestedLabel && LabelActions.labelExistsInLabelNames(labelData.suggestedLabel) ?\r\n                <div className=\"SuggestedLabel\">\r\n                    {labelData.suggestedLabel}\r\n                </div> :\r\n                null\r\n            }\r\n        </>}\r\n    </div>\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    updatePreventCustomCursorStatus,\r\n    updateImageDataById\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    activeLabelId: state.labels.activeLabelId,\r\n    highlightedLabelId: state.labels.highlightedLabelId,\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(LabelControlPanel);","import {Action} from '../Actions';\r\nimport {AIActionTypes} from './types';\r\n\r\nexport function updateSuggestedLabelList(labelList: string[]): AIActionTypes {\r\n    return {\r\n        type: Action.UPDATE_SUGGESTED_LABEL_LIST,\r\n        payload: {\r\n            labelList,\r\n        }\r\n    }\r\n}\r\n\r\nexport function updateRejectedSuggestedLabelList(labelList: string[]): AIActionTypes {\r\n    return {\r\n        type: Action.UPDATE_REJECTED_SUGGESTED_LABEL_LIST,\r\n        payload: {\r\n            labelList,\r\n        }\r\n    }\r\n}\r\n\r\nexport function updateObjectDetectorStatus(isObjectDetectorLoaded: boolean): AIActionTypes {\r\n    return {\r\n        type: Action.UPDATE_OBJECT_DETECTOR_STATUS,\r\n        payload: {\r\n            isObjectDetectorLoaded,\r\n        }\r\n    }\r\n}\r\n\r\nexport function updatePoseDetectorStatus(isPoseDetectorLoaded: boolean): AIActionTypes {\r\n    return {\r\n        type: Action.UPDATE_POSE_DETECTOR_STATUS,\r\n        payload: {\r\n            isPoseDetectorLoaded,\r\n        }\r\n    }\r\n}\r\n\r\nexport function updateFormDetectorStatus(isFormDetectorLoaded: boolean): AIActionTypes {\r\n    return {\r\n        type: Action.UPDATE_FORM_DETECTOR_STATUS,\r\n        payload: {\r\n            isFormDetectorLoaded,\r\n        }\r\n    }\r\n}\r\n\r\nexport function updateMaskDetectorStatus(isMaskDetectorLoaded: boolean): AIActionTypes {\r\n    return {\r\n        type: Action.UPDATE_MASK_DETECTOR_STATUS,\r\n        payload: {\r\n            isMaskDetectorLoaded,\r\n        }\r\n    }\r\n}\r\n\r\nexport function updateDisabledAIFlag(isAIDisabled: boolean): AIActionTypes {\r\n    return {\r\n        type: Action.UPDATE_DISABLED_AI_FLAG,\r\n        payload: {\r\n            isAIDisabled,\r\n        }\r\n    }\r\n}","// models import\r\nimport '@tensorflow/tfjs-backend-cpu';\r\nimport * as cocoSsd from '@tensorflow-models/coco-ssd';\r\nimport {DetectedObject, ObjectDetection} from '@tensorflow-models/coco-ssd';\r\nimport {AIObjectDetectionActions} from '../logic/actions/AIObjectDetectionActions';\r\nimport {AIFormDetectionActions} from '../logic/actions/AIFormDetectionActions';\r\n\r\n// import { exportComponentAsJPEG} from 'react-component-export-image';\r\n\r\nimport {store} from '../index';\r\nimport {updateFormDetectorStatus} from '../store/ai/actionCreators';\r\nimport {LabelType} from '../data/enums/LabelType';\r\nimport {LabelsSelector} from '../store/selectors/LabelsSelector';\r\n\r\nimport {updateActiveLabelType} from '../store/labels/actionCreators';\r\n\r\n// import React, {useState, useEffect} from 'react';\r\n\r\nexport interface DetectedForm {\r\n    bbox: [number, number, number, number];  // [x, y, width, height]\r\n    class: string;\r\n    score: number;\r\n  }\r\n\r\nexport class FormDetector {\r\n    // private static model: ObjectDetection;\r\n\r\n    public static loadModel(callback?: () => any) {\r\n\r\n        console.log(\"I am here fucker\")\r\n        store.dispatch(updateFormDetectorStatus(true));\r\n        store.dispatch(updateActiveLabelType(LabelType.RECT));\r\n        const activeLabelType: LabelType = LabelsSelector.getActiveLabelType();\r\n        if (activeLabelType === LabelType.RECT) {\r\n            AIFormDetectionActions.detectRectsForActiveImage();\r\n        }\r\n        if (callback) {\r\n            callback();\r\n        }\r\n    }\r\n\r\n    public static predict(image: HTMLImageElement, callback?: (predictions: DetectedForm[]) => any) {\r\n        async function submit(elephant){\r\n            // var elephant = image;\r\n            var imgCanvas = document.createElement(\"canvas\");\r\n            var imgContext = imgCanvas.getContext(\"2d\");\r\n            \r\n            // Make sure canvas is as big as the picture\r\n            imgCanvas.width = elephant.width;\r\n            imgCanvas.height = elephant.height;\r\n    \r\n            // Draw image into canvas element\r\n            imgContext.drawImage(elephant, 0, 0, elephant.width, elephant.height);\r\n            var imageBlob = new Blob();\r\n            console.log(imageBlob);\r\n\r\n            imageBlob = await new Promise(resolve => imgCanvas.toBlob(resolve, 'image/png'));\r\n            // let imageBlob = imgCanvas.toBlob(resolve, 'image/png'));\r\n            console.log(imageBlob);\r\n            var formData = new FormData();\r\n            // formData.append(\"firstName\", \"John\");\r\n            formData.append(\"image\", imageBlob, \"image.png\");\r\n            console.log(\"formdata\", formData);\r\n            console.log(formData.get('image'));\r\n            let response = await fetch('/upload', {\r\n              method: 'POST',\r\n              body: formData\r\n            });\r\n        }\r\n       \r\n        submit(image)\r\n        .then(()=>{fetch('/prediction')\r\n            .then(function (response) {\r\n                return response.json();\r\n            }).then((predictions: DetectedForm[]) => {\r\n                console.log('preds');\r\n                console.log(predictions) \r\n                if (callback) {\r\n                    callback(predictions)\r\n                }\r\n             })\r\n                .catch((error) => {\r\n                    // TODO\r\n                    throw new Error(error as string);\r\n                });})\r\n           \r\n    }\r\n    \r\n}\r\n","import {FormDetector} from '../../ai/FormDetector';\r\nimport {DetectedForm} from '../../ai/FormDetector';\r\n\r\n\r\nimport {ImageData, LabelName, LabelRect} from '../../store/labels/types';\r\nimport {LabelsSelector} from '../../store/selectors/LabelsSelector';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport {store} from '../../index';\r\nimport {updateImageDataById} from '../../store/labels/actionCreators';\r\n\r\n\r\n\r\nimport {ImageRepository} from '../imageRepository/ImageRepository';\r\nimport {LabelStatus} from '../../data/enums/LabelStatus';\r\nimport {findLast} from 'lodash';\r\nimport {updateSuggestedLabelList} from '../../store/ai/actionCreators';\r\nimport {PopupWindowType} from '../../data/enums/PopupWindowType';\r\nimport {updateActivePopupType} from '../../store/general/actionCreators';\r\nimport {AISelector} from '../../store/selectors/AISelector';\r\nimport {AIActions} from './AIActions';\r\n\r\nexport class AIFormDetectionActions {\r\n    public static detectRectsForActiveImage(): void {\r\n        const activeImageData: ImageData = LabelsSelector.getActiveImageData();\r\n        AIFormDetectionActions.detectRects(activeImageData.id, ImageRepository.getById(activeImageData.id))\r\n    }\r\n\r\n    public static detectRects(imageId: string, image: HTMLImageElement): void {\r\n        if (LabelsSelector.getImageDataById(imageId).isVisitedByFormDetector || !AISelector.isAIFormDetectorModelLoaded())\r\n            return;\r\n\r\n        store.dispatch(updateActivePopupType(PopupWindowType.LOADER));\r\n        FormDetector.predict(image, (predictions: DetectedForm[]) => {\r\n            const suggestedLabelNames = AIFormDetectionActions.extractNewSuggestedLabelNames(LabelsSelector.getLabelNames(), predictions);\r\n            const rejectedLabelNames = AISelector.getRejectedSuggestedLabelList();\r\n            const newlySuggestedNames = AIActions.excludeRejectedLabelNames(suggestedLabelNames, rejectedLabelNames);\r\n            if (newlySuggestedNames.length > 0) {\r\n                store.dispatch(updateSuggestedLabelList(newlySuggestedNames));\r\n                store.dispatch(updateActivePopupType(PopupWindowType.SUGGEST_LABEL_NAMES));\r\n            } else {\r\n                store.dispatch(updateActivePopupType(null));\r\n            }\r\n            AIFormDetectionActions.saveRectPredictions(imageId, predictions);\r\n        })\r\n    }\r\n\r\n    public static saveRectPredictions(imageId: string, predictions: DetectedForm[]) {\r\n        const imageData: ImageData = LabelsSelector.getImageDataById(imageId);\r\n        const predictedLabels: LabelRect[] = AIFormDetectionActions.mapPredictionsToRectLabels(predictions);\r\n        const nextImageData: ImageData = {\r\n            ...imageData,\r\n            labelRects: imageData.labelRects.concat(predictedLabels),\r\n            isVisitedByFormDetector: true\r\n        };\r\n        store.dispatch(updateImageDataById(imageData.id, nextImageData));\r\n    }\r\n\r\n    private static mapPredictionsToRectLabels(predictions: DetectedForm[]): LabelRect[] {\r\n        return predictions.map((prediction: DetectedForm) => {\r\n            return {\r\n                id: uuidv4(),\r\n                labelIndex: null,\r\n                labelId: null,\r\n                rect: {\r\n                    x: prediction.bbox[0],\r\n                    y: prediction.bbox[1],\r\n                    width: prediction.bbox[2],\r\n                    height: prediction.bbox[3],\r\n                },\r\n                isCreatedByAI: true,\r\n                status: LabelStatus.UNDECIDED,\r\n                suggestedLabel: prediction.class\r\n            }\r\n        })\r\n    }\r\n\r\n    public static extractNewSuggestedLabelNames(labels: LabelName[], predictions: DetectedForm[]): string[] {\r\n        return predictions.reduce((acc: string[], prediction: DetectedForm) => {\r\n            if (!acc.includes(prediction.class) && !findLast(labels, {name: prediction.class})) {\r\n                acc.push(prediction.class)\r\n            }\r\n            return acc;\r\n        }, [])\r\n    }\r\n\r\n    public static acceptAllSuggestedRectLabels(imageData: ImageData) {\r\n        const newImageData: ImageData = {\r\n            ...imageData,\r\n            labelRects: imageData.labelRects.map((labelRect: LabelRect) => {\r\n                const labelName: LabelName = findLast(LabelsSelector.getLabelNames(), {name: labelRect.suggestedLabel});\r\n                return {\r\n                    ...labelRect,\r\n                    status: LabelStatus.ACCEPTED,\r\n                    labelId: !!labelName ? labelName.id : labelRect.labelId\r\n                }\r\n            })\r\n        };\r\n        store.dispatch(updateImageDataById(newImageData.id, newImageData));\r\n    }\r\n\r\n    public static rejectAllSuggestedRectLabels(imageData: ImageData) {\r\n        const newImageData: ImageData = {\r\n            ...imageData,\r\n            labelRects: imageData.labelRects.filter((labelRect: LabelRect) => labelRect.status === LabelStatus.ACCEPTED)\r\n        };\r\n        store.dispatch(updateImageDataById(newImageData.id, newImageData));\r\n    }\r\n}\r\n","// models import\r\nimport '@tensorflow/tfjs-backend-cpu';\r\nimport * as cocoSsd from '@tensorflow-models/coco-ssd';\r\nimport {DetectedObject, ObjectDetection} from '@tensorflow-models/coco-ssd';\r\nimport {AIObjectDetectionActions} from '../logic/actions/AIObjectDetectionActions';\r\nimport {AIFormDetectionActions} from '../logic/actions/AIFormDetectionActions';\r\nimport {AIMaskDetectionActions} from '../logic/actions/AIMaskDetectionActions';\r\nimport {IPoint} from '../interfaces/IPoint';\r\n\r\n// import { exportComponentAsJPEG} from 'react-component-export-image';\r\n\r\nimport {store} from '../index';\r\nimport {updateMaskDetectorStatus} from '../store/ai/actionCreators';\r\nimport {LabelType} from '../data/enums/LabelType';\r\nimport {LabelsSelector} from '../store/selectors/LabelsSelector';\r\n\r\nimport {updateActiveLabelType} from '../store/labels/actionCreators';\r\n\r\n// import React, {useState, useEffect} from 'react';\r\n\r\nexport interface DetectedMask {\r\n    vertices: IPoint[];  // [x, y, width, height]\r\n    class: string;\r\n    score: number;\r\n  }\r\n\r\nexport class MaskDetector {\r\n    // private static model: ObjectDetection;\r\n\r\n    public static loadModel(callback?: () => any) {\r\n\r\n        console.log(\"I am in mask fucker\")\r\n        store.dispatch(updateMaskDetectorStatus(true));\r\n        store.dispatch(updateActiveLabelType(LabelType.POLYGON));\r\n        const activeLabelType: LabelType = LabelsSelector.getActiveLabelType();\r\n        if (activeLabelType === LabelType.POLYGON) {\r\n            AIMaskDetectionActions.detectPolygonsForActiveImage();\r\n        }\r\n        if (callback) {\r\n            callback();\r\n        }\r\n    }\r\n\r\n    public static predict(image: HTMLImageElement, callback?: (predictions: DetectedMask[]) => any) {\r\n        async function submit(elephant){\r\n            // var elephant = image;\r\n            var imgCanvas = document.createElement(\"canvas\");\r\n            var imgContext = imgCanvas.getContext(\"2d\");\r\n            \r\n            // Make sure canvas is as big as the picture\r\n            imgCanvas.width = elephant.width;\r\n            imgCanvas.height = elephant.height;\r\n    \r\n            // Draw image into canvas element\r\n            imgContext.drawImage(elephant, 0, 0, elephant.width, elephant.height);\r\n            var imageBlob = new Blob();\r\n            console.log(imageBlob);\r\n\r\n            imageBlob = await new Promise(resolve => imgCanvas.toBlob(resolve, 'image/png'));\r\n            // let imageBlob = imgCanvas.toBlob(resolve, 'image/png'));\r\n            console.log(imageBlob);\r\n            var formData = new FormData();\r\n            // formData.append(\"firstName\", \"John\");\r\n            formData.append(\"image\", imageBlob, \"image.png\");\r\n            console.log(\"formdata\", formData);\r\n            console.log(formData.get('image'));\r\n            let response = await fetch('/upload', {\r\n              method: 'POST',\r\n              body: formData\r\n            });\r\n        }\r\n\r\n        submit(image)\r\n        .then(()=>{fetch('/mask')\r\n            .then(function (response) {\r\n                return response.json();\r\n            }).then((predictions: DetectedMask[]) => {\r\n                console.log('preds');\r\n                console.log(predictions) \r\n                if (callback) {\r\n                    callback(predictions)\r\n                }\r\n            })\r\n                .catch((error) => {\r\n                    // TODO\r\n                    throw new Error(error as string);\r\n                }) ;})           \r\n           \r\n    }\r\n    \r\n}\r\n","import {MaskDetector} from '../../ai/MaskDetector';\r\nimport {DetectedMask} from '../../ai/MaskDetector';\r\nimport {IPoint} from '../../interfaces/IPoint';\r\n\r\nimport {ImageData, LabelName, LabelPolygon} from '../../store/labels/types';\r\nimport {LabelsSelector} from '../../store/selectors/LabelsSelector';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport {store} from '../../index';\r\nimport {updateImageDataById} from '../../store/labels/actionCreators';\r\n\r\n\r\n\r\nimport {ImageRepository} from '../imageRepository/ImageRepository';\r\nimport {LabelStatus} from '../../data/enums/LabelStatus';\r\nimport {findLast} from 'lodash';\r\nimport {updateSuggestedLabelList} from '../../store/ai/actionCreators';\r\nimport {PopupWindowType} from '../../data/enums/PopupWindowType';\r\nimport {updateActivePopupType} from '../../store/general/actionCreators';\r\nimport {AISelector} from '../../store/selectors/AISelector';\r\nimport {AIActions} from './AIActions';\r\n\r\nexport class AIMaskDetectionActions {\r\n    public static detectPolygonsForActiveImage(): void {\r\n        const activeImageData: ImageData = LabelsSelector.getActiveImageData();\r\n        AIMaskDetectionActions.detectPolygons(activeImageData.id, ImageRepository.getById(activeImageData.id))\r\n    }\r\n\r\n    public static detectPolygons(imageId: string, image: HTMLImageElement): void {\r\n        if (LabelsSelector.getImageDataById(imageId).isVisitedByMaskDetector || !AISelector.isAIMaskDetectorModelLoaded())\r\n            return;\r\n\r\n        store.dispatch(updateActivePopupType(PopupWindowType.LOADER));\r\n        MaskDetector.predict(image, (predictions: DetectedMask[]) => {\r\n            const suggestedLabelNames = AIMaskDetectionActions.extractNewSuggestedLabelNames(LabelsSelector.getLabelNames(), predictions);\r\n            const rejectedLabelNames = AISelector.getRejectedSuggestedLabelList();\r\n            const newlySuggestedNames = AIActions.excludeRejectedLabelNames(suggestedLabelNames, rejectedLabelNames);\r\n            if (newlySuggestedNames.length > 0) {\r\n                store.dispatch(updateSuggestedLabelList(newlySuggestedNames));\r\n                store.dispatch(updateActivePopupType(PopupWindowType.SUGGEST_LABEL_NAMES));\r\n            } else {\r\n                store.dispatch(updateActivePopupType(null));\r\n            }\r\n            AIMaskDetectionActions.savePolygonPredictions(imageId, predictions);\r\n        })\r\n    }\r\n\r\n    public static savePolygonPredictions(imageId: string, predictions: DetectedMask[]) {\r\n        const imageData: ImageData = LabelsSelector.getImageDataById(imageId);\r\n        const predictedLabels: LabelPolygon[] = AIMaskDetectionActions.mapPredictionsToPolygonLabels(predictions);\r\n        const nextImageData: ImageData = {\r\n            ...imageData,\r\n            labelPolygons: imageData.labelPolygons.concat(predictedLabels),\r\n            isVisitedByMaskDetector: true\r\n        };\r\n        store.dispatch(updateImageDataById(imageData.id, nextImageData));\r\n    }\r\n\r\n    private static mapPredictionsToPolygonLabels(predictions: DetectedMask[]): LabelPolygon[] {\r\n        return predictions.map((prediction: DetectedMask) => {\r\n            // var nodes = IPoint[]\r\n            return {\r\n                id: uuidv4(),\r\n                labelIndex: null,\r\n                labelId: null,\r\n                vertices: prediction.vertices,\r\n                isCreatedByAI: true,\r\n                status: LabelStatus.UNDECIDED,\r\n                suggestedLabel: prediction.class\r\n            }\r\n        })\r\n    }\r\n\r\n    public static extractNewSuggestedLabelNames(labels: LabelName[], predictions: DetectedMask[]): string[] {\r\n        return predictions.reduce((acc: string[], prediction: DetectedMask) => {\r\n            if (!acc.includes(prediction.class) && !findLast(labels, {name: prediction.class})) {\r\n                acc.push(prediction.class)\r\n            }\r\n            return acc;\r\n        }, [])\r\n    }\r\n\r\n    public static acceptAllSuggestedPolygonLabels(imageData: ImageData) {\r\n        const newImageData: ImageData = {\r\n            ...imageData,\r\n            labelPolygons: imageData.labelPolygons.map((labelPolygon: LabelPolygon) => {\r\n                const labelName: LabelName = findLast(LabelsSelector.getLabelNames(), {name: labelPolygon.suggestedLabel});\r\n                return {\r\n                    ...labelPolygon,\r\n                    status: LabelStatus.ACCEPTED,\r\n                    labelId: !!labelName ? labelName.id : labelPolygon.labelId\r\n                }\r\n            })\r\n        };\r\n        store.dispatch(updateImageDataById(newImageData.id, newImageData));\r\n    }\r\n\r\n    public static rejectAllSuggestedPolygonLabels(imageData: ImageData) {\r\n        const newImageData: ImageData = {\r\n            ...imageData,\r\n            labelPolygons: imageData.labelPolygons.filter((labelPolygon: LabelPolygon) => labelPolygon.status === LabelStatus.ACCEPTED)\r\n        };\r\n        store.dispatch(updateImageDataById(newImageData.id, newImageData));\r\n    }\r\n}\r\n","import '@tensorflow/tfjs-backend-webgl';\r\nimport * as posenet from '@tensorflow-models/posenet';\r\nimport {PoseNet} from '@tensorflow-models/posenet';\r\nimport {Pose} from '@tensorflow-models/posenet';\r\nimport {store} from '../index';\r\nimport {updatePoseDetectorStatus} from '../store/ai/actionCreators';\r\nimport {AIPoseDetectionActions} from '../logic/actions/AIPoseDetectionActions';\r\nimport {LabelType} from '../data/enums/LabelType';\r\nimport {LabelsSelector} from '../store/selectors/LabelsSelector';\r\nimport {updateActiveLabelType} from '../store/labels/actionCreators';\r\n\r\nexport class PoseDetector {\r\n    private static model: PoseNet;\r\n\r\n    public static loadModel(callback?: () => any) {\r\n        posenet\r\n            .load({\r\n                architecture: 'ResNet50',\r\n                outputStride: 32,\r\n                inputResolution: 257,\r\n                quantBytes: 2\r\n            })\r\n            .then((model: PoseNet) => {\r\n                PoseDetector.model = model;\r\n                store.dispatch(updatePoseDetectorStatus(true));\r\n                store.dispatch(updateActiveLabelType(LabelType.POINT));\r\n                const activeLabelType: LabelType = LabelsSelector.getActiveLabelType();\r\n                if (activeLabelType === LabelType.POINT) {\r\n                    AIPoseDetectionActions.detectPoseForActiveImage();\r\n                }\r\n                if (callback) {\r\n                    callback();\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                // TODO\r\n                throw new Error(error as string);\r\n            })\r\n    }\r\n\r\n    public static predict(image: HTMLImageElement, callback?: (predictions: Pose[]) => any) {\r\n        if (!PoseDetector.model) return;\r\n\r\n        PoseDetector.model\r\n            .estimateMultiplePoses(image)\r\n            .then((predictions: Pose[]) => {\r\n                if (callback) {\r\n                    callback(predictions)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                // TODO\r\n                throw new Error(error as string);\r\n            })\r\n    }\r\n}\r\n","import {PoseDetector} from '../../ai/PoseDetector';\r\nimport {Keypoint, Pose} from '@tensorflow-models/posenet';\r\nimport {ImageData, LabelName, LabelPoint} from '../../store/labels/types';\r\nimport {LabelsSelector} from '../../store/selectors/LabelsSelector';\r\nimport {ImageRepository} from '../imageRepository/ImageRepository';\r\nimport {LabelStatus} from '../../data/enums/LabelStatus';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport {store} from '../../index';\r\nimport {updateImageDataById} from '../../store/labels/actionCreators';\r\nimport {findLast} from 'lodash';\r\nimport {AISelector} from '../../store/selectors/AISelector';\r\nimport {AIActions} from './AIActions';\r\nimport {updateSuggestedLabelList} from '../../store/ai/actionCreators';\r\nimport {updateActivePopupType} from '../../store/general/actionCreators';\r\nimport {PopupWindowType} from '../../data/enums/PopupWindowType';\r\nimport {NumberUtil} from '../../utils/NumberUtil';\r\n\r\nexport class AIPoseDetectionActions {\r\n    public static detectPoseForActiveImage(): void {\r\n        const activeImageData: ImageData = LabelsSelector.getActiveImageData();\r\n        AIPoseDetectionActions.detectPoses(activeImageData.id, ImageRepository.getById(activeImageData.id))\r\n    }\r\n\r\n    public static detectPoses(imageId: string, image: HTMLImageElement): void {\r\n        if (LabelsSelector.getImageDataById(imageId).isVisitedByPoseDetector || !AISelector.isAIPoseDetectorModelLoaded())\r\n            return;\r\n\r\n        store.dispatch(updateActivePopupType(PopupWindowType.LOADER));\r\n        PoseDetector.predict(image, (poses: Pose[]) => {\r\n            const suggestedLabelNames = AIPoseDetectionActions.extractNewSuggestedLabelNames(LabelsSelector.getLabelNames(), poses);\r\n            const rejectedLabelNames = AISelector.getRejectedSuggestedLabelList();\r\n            const newlySuggestedNames = AIActions.excludeRejectedLabelNames(suggestedLabelNames, rejectedLabelNames);\r\n            if (newlySuggestedNames.length > 0) {\r\n                store.dispatch(updateSuggestedLabelList(newlySuggestedNames));\r\n                store.dispatch(updateActivePopupType(PopupWindowType.SUGGEST_LABEL_NAMES));\r\n            } else {\r\n                store.dispatch(updateActivePopupType(null));\r\n            }\r\n            AIPoseDetectionActions.savePosePredictions(imageId, poses, image);\r\n        })\r\n    }\r\n\r\n    public static savePosePredictions(imageId: string, predictions: Pose[], image: HTMLImageElement) {\r\n        const imageData: ImageData = LabelsSelector.getImageDataById(imageId);\r\n        const predictedLabels: LabelPoint[] = AIPoseDetectionActions\r\n            .mapPredictionsToPointLabels(predictions)\r\n            .filter((labelPoint: LabelPoint) => NumberUtil.isValueInRange(labelPoint.point.x, 0, image.width))\r\n            .filter((labelPoint: LabelPoint) => NumberUtil.isValueInRange(labelPoint.point.y, 0, image.height))\r\n        const nextImageData: ImageData = {\r\n            ...imageData,\r\n            labelPoints: imageData.labelPoints.concat(predictedLabels),\r\n            isVisitedByPoseDetector: true\r\n        };\r\n        store.dispatch(updateImageDataById(imageData.id, nextImageData));\r\n    }\r\n\r\n    private static mapPredictionsToPointLabels(predictions: Pose[]): LabelPoint[] {\r\n        return predictions\r\n            .map((prediction: Pose) => {\r\n                return prediction.keypoints\r\n                    .map((keypoint: Keypoint) => {\r\n                        return {\r\n                            id: uuidv4(),\r\n                            labelIndex: null,\r\n                            labelId: null,\r\n                            point: {\r\n                                x: keypoint.position.x,\r\n                                y: keypoint.position.y\r\n                            },\r\n                            isCreatedByAI: true,\r\n                            status: LabelStatus.UNDECIDED,\r\n                            suggestedLabel: keypoint.part\r\n                        }\r\n                    })\r\n            })\r\n            .reduce((acc: LabelPoint[], item: LabelPoint[]) => {\r\n                return acc.concat(item);\r\n            }, [])\r\n    }\r\n\r\n    public static extractNewSuggestedLabelNames(labels: LabelName[], predictions: Pose[]): string[] {\r\n        return predictions\r\n            .map((pose: Pose) => pose.keypoints)\r\n            .reduce((acc: Keypoint[], item: Keypoint[]) => {\r\n                return acc.concat(item);\r\n            }, [])\r\n            .map((keypoint: Keypoint) => keypoint.part)\r\n            .reduce((acc: string[], name: string) => {\r\n                if (!acc.includes(name) && !findLast(labels, {name})) {\r\n                    acc.push(name)\r\n                }\r\n                return acc;\r\n            }, [])\r\n    }\r\n\r\n    public static acceptAllSuggestedPointLabels(imageData: ImageData) {\r\n        const newImageData: ImageData = {\r\n            ...imageData,\r\n            labelPoints: imageData.labelPoints.map((labelPoint: LabelPoint) => {\r\n                const labelName: LabelName = findLast(LabelsSelector.getLabelNames(), {name: labelPoint.suggestedLabel});\r\n                return {\r\n                    ...labelPoint,\r\n                    status: LabelStatus.ACCEPTED,\r\n                    labelId: !!labelName ? labelName.id : labelPoint.labelId\r\n                }\r\n            })\r\n        };\r\n        store.dispatch(updateImageDataById(newImageData.id, newImageData));\r\n    }\r\n\r\n    public static rejectAllSuggestedPointLabels(imageData: ImageData) {\r\n        const newImageData: ImageData = {\r\n            ...imageData,\r\n            labelPoints: imageData.labelPoints.filter((labelPoint: LabelPoint) => labelPoint.status === LabelStatus.ACCEPTED)\r\n        };\r\n        store.dispatch(updateImageDataById(newImageData.id, newImageData));\r\n    }\r\n}\r\n","export enum AcceptedFileType {\r\n    IMAGE = 'image/jpeg, image/png',\r\n    TEXT = 'text/plain',\r\n    JSON = 'application/json'\r\n}","import {LabelType} from \"../../data/enums/LabelType\";\r\nimport {LabelsSelector} from \"../../store/selectors/LabelsSelector\";\r\nimport {AIObjectDetectionActions} from \"./AIObjectDetectionActions\";\r\nimport {AIFormDetectionActions} from \"./AIFormDetectionActions\";\r\nimport {AIMaskDetectionActions} from \"./AIMaskDetectionActions\";\r\nimport {AIPoseDetectionActions} from \"./AIPoseDetectionActions\";\r\nimport {ImageData} from \"../../store/labels/types\";\r\n\r\nexport class AIActions {\r\n    public static excludeRejectedLabelNames(suggestedLabels: string[], rejectedLabels: string[]): string[] {\r\n        return suggestedLabels.reduce((acc: string[], label: string) => {\r\n            if (!rejectedLabels.includes(label)) {\r\n                acc.push(label)\r\n            }\r\n            return acc;\r\n        }, [])\r\n    }\r\n\r\n    public static detect(imageId: string, image: HTMLImageElement): void {\r\n        const activeLabelType: LabelType = LabelsSelector.getActiveLabelType();\r\n\r\n        switch (activeLabelType) {\r\n            case LabelType.RECT:\r\n                // AIObjectDetectionActions.detectRects(imageId, image);\r\n                AIFormDetectionActions.detectRects(imageId, image);\r\n                break;\r\n            case LabelType.POINT:\r\n                AIPoseDetectionActions.detectPoses(imageId, image);\r\n                break;\r\n            case LabelType.POLYGON:\r\n                AIMaskDetectionActions.detectPolygons(imageId, image);\r\n                break;\r\n        }\r\n    }\r\n\r\n    public static rejectAllSuggestedLabels(imageData: ImageData) {\r\n        const activeLabelType: LabelType = LabelsSelector.getActiveLabelType();\r\n\r\n        switch (activeLabelType) {\r\n            case LabelType.RECT:\r\n                // AIObjectDetectionActions.rejectAllSuggestedRectLabels(imageData);\r\n                AIFormDetectionActions.rejectAllSuggestedRectLabels(imageData);\r\n                break;\r\n            case LabelType.POINT:\r\n                AIPoseDetectionActions.rejectAllSuggestedPointLabels(imageData);\r\n                break;\r\n            case LabelType.POLYGON:\r\n                AIMaskDetectionActions.rejectAllSuggestedPolygonLabels(imageData);\r\n                break;\r\n        }\r\n    }\r\n\r\n    public static acceptAllSuggestedLabels(imageData: ImageData) {\r\n        const activeLabelType: LabelType = LabelsSelector.getActiveLabelType();\r\n        switch (activeLabelType) {\r\n            case LabelType.RECT:\r\n                // AIObjectDetectionActions.acceptAllSuggestedRectLabels(imageData);\r\n                AIFormDetectionActions.acceptAllSuggestedRectLabels(imageData);\r\n                break;\r\n            case LabelType.POINT:\r\n                AIPoseDetectionActions.acceptAllSuggestedPointLabels(imageData);\r\n                break;\r\n            case LabelType.POLYGON:\r\n                AIMaskDetectionActions.acceptAllSuggestedPolygonLabels(imageData);\r\n                break;\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport './Editor.scss';\r\nimport {ISize} from '../../../interfaces/ISize';\r\nimport {ImageData, LabelPoint, LabelPolygon, LabelRect} from '../../../store/labels/types';\r\nimport {FileUtil} from '../../../utils/FileUtil';\r\nimport {AppState} from '../../../store';\r\nimport {connect} from 'react-redux';\r\nimport {updateImageDataById} from '../../../store/labels/actionCreators';\r\nimport {ImageRepository} from '../../../logic/imageRepository/ImageRepository';\r\nimport {LabelType} from '../../../data/enums/LabelType';\r\nimport {PopupWindowType} from '../../../data/enums/PopupWindowType';\r\nimport {CanvasUtil} from '../../../utils/CanvasUtil';\r\nimport {CustomCursorStyle} from '../../../data/enums/CustomCursorStyle';\r\nimport {ImageLoadManager} from '../../../logic/imageRepository/ImageLoadManager';\r\nimport {EventType} from '../../../data/enums/EventType';\r\nimport {EditorData} from '../../../data/EditorData';\r\nimport {EditorModel} from '../../../staticModels/EditorModel';\r\nimport {EditorActions} from '../../../logic/actions/EditorActions';\r\nimport {EditorUtil} from '../../../utils/EditorUtil';\r\nimport {ContextManager} from '../../../logic/context/ContextManager';\r\nimport {ContextType} from '../../../data/enums/ContextType';\r\nimport Scrollbars from 'react-custom-scrollbars';\r\nimport {ViewPortActions} from '../../../logic/actions/ViewPortActions';\r\nimport {PlatformModel} from '../../../staticModels/PlatformModel';\r\nimport LabelControlPanel from '../LabelControlPanel/LabelControlPanel';\r\nimport {IPoint} from '../../../interfaces/IPoint';\r\nimport {RenderEngineUtil} from '../../../utils/RenderEngineUtil';\r\nimport {LabelStatus} from '../../../data/enums/LabelStatus';\r\nimport {isEqual} from 'lodash';\r\nimport {AIActions} from '../../../logic/actions/AIActions';\r\n\r\ninterface IProps {\r\n    size: ISize;\r\n    imageData: ImageData;\r\n    activeLabelType: LabelType;\r\n    updateImageDataById: (id: string, newImageData: ImageData) => any;\r\n    activePopupType: PopupWindowType;\r\n    activeLabelId: string;\r\n    customCursorStyle: CustomCursorStyle;\r\n    imageDragMode: boolean;\r\n    zoom: number;\r\n}\r\n\r\ninterface IState {\r\n    viewPortSize: ISize\r\n}\r\n\r\nclass Editor extends React.Component<IProps, IState> {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            viewPortSize: {\r\n                width: 0,\r\n                height: 0\r\n            },\r\n        };\r\n    }\r\n\r\n    // =================================================================================================================\r\n    // LIFE CYCLE\r\n    // =================================================================================================================\r\n\r\n    public componentDidMount(): void {\r\n        this.mountEventListeners();\r\n\r\n        const {imageData, activeLabelType} = this.props;\r\n\r\n        ContextManager.switchCtx(ContextType.EDITOR);\r\n        EditorActions.mountRenderEnginesAndHelpers(activeLabelType);\r\n        ImageLoadManager.addAndRun(this.loadImage(imageData));\r\n        ViewPortActions.resizeCanvas(this.props.size);\r\n    }\r\n\r\n    public componentWillUnmount(): void {\r\n        this.unmountEventListeners();\r\n    }\r\n\r\n    public componentDidUpdate(prevProps: Readonly<IProps>, prevState: Readonly<{}>, snapshot?: any): void {\r\n        const {imageData, activeLabelType} = this.props;\r\n\r\n        prevProps.imageData.id !== imageData.id && ImageLoadManager.addAndRun(this.loadImage(imageData));\r\n\r\n        if (prevProps.activeLabelType !== activeLabelType) {\r\n            EditorActions.swapSupportRenderingEngine(activeLabelType);\r\n            AIActions.detect(imageData.id, ImageRepository.getById(imageData.id));\r\n        }\r\n\r\n        this.updateModelAndRender();\r\n    }\r\n\r\n    // =================================================================================================================\r\n    // EVENT HANDLERS\r\n    // =================================================================================================================\r\n\r\n    private mountEventListeners() {\r\n        window.addEventListener(EventType.MOUSE_MOVE, this.update);\r\n        window.addEventListener(EventType.MOUSE_UP, this.update);\r\n        EditorModel.canvas.addEventListener(EventType.MOUSE_DOWN, this.update);\r\n        EditorModel.canvas.addEventListener(EventType.MOUSE_WHEEL, this.handleZoom);\r\n    }\r\n\r\n    private unmountEventListeners() {\r\n        window.removeEventListener(EventType.MOUSE_MOVE, this.update);\r\n        window.removeEventListener(EventType.MOUSE_UP, this.update);\r\n        EditorModel.canvas.removeEventListener(EventType.MOUSE_DOWN, this.update);\r\n        EditorModel.canvas.removeEventListener(EventType.MOUSE_WHEEL, this.handleZoom);\r\n    }\r\n\r\n    // =================================================================================================================\r\n    // LOAD IMAGE\r\n    // =================================================================================================================\r\n\r\n    private loadImage = async (imageData: ImageData): Promise<any> => {\r\n        if (imageData.loadStatus) {\r\n            EditorActions.setActiveImage(ImageRepository.getById(imageData.id));\r\n            AIActions.detect(imageData.id, ImageRepository.getById(imageData.id));\r\n            this.updateModelAndRender()\r\n        }\r\n        else {\r\n            if (!EditorModel.isLoading) {\r\n                EditorActions.setLoadingStatus(true);\r\n                const saveLoadedImagePartial = (image: HTMLImageElement) => this.saveLoadedImage(image, imageData);\r\n                FileUtil.loadImage(imageData.fileData)\r\n                    .then((image:HTMLImageElement) => saveLoadedImagePartial(image))\r\n                    .catch((error) => this.handleLoadImageError())\r\n            }\r\n        }\r\n    };\r\n\r\n    private saveLoadedImage = (image: HTMLImageElement, imageData: ImageData) => {\r\n        imageData.loadStatus = true;\r\n        this.props.updateImageDataById(imageData.id, imageData);\r\n        ImageRepository.storeImage(imageData.id, image);\r\n        EditorActions.setActiveImage(image);\r\n        AIActions.detect(imageData.id, image);\r\n        EditorActions.setLoadingStatus(false);\r\n        this.updateModelAndRender()\r\n    };\r\n\r\n    private handleLoadImageError = () => {};\r\n\r\n    // =================================================================================================================\r\n    // HELPER METHODS\r\n    // =================================================================================================================\r\n\r\n    private updateModelAndRender = () => {\r\n        ViewPortActions.updateViewPortSize();\r\n        ViewPortActions.updateDefaultViewPortImageRect();\r\n        ViewPortActions.resizeViewPortContent();\r\n        EditorActions.fullRender();\r\n    };\r\n\r\n    private update = (event: MouseEvent) => {\r\n        const editorData: EditorData = EditorActions.getEditorData(event);\r\n        EditorModel.mousePositionOnViewPortContent = CanvasUtil.getMousePositionOnCanvasFromEvent(event, EditorModel.canvas);\r\n        EditorModel.primaryRenderingEngine.update(editorData);\r\n\r\n        if (this.props.imageDragMode) {\r\n            EditorModel.viewPortHelper.update(editorData);\r\n        } else {\r\n            EditorModel.supportRenderingEngine && EditorModel.supportRenderingEngine.update(editorData);\r\n        }\r\n\r\n        !this.props.activePopupType && EditorActions.updateMousePositionIndicator(event);\r\n        EditorActions.fullRender();\r\n    };\r\n\r\n    private handleZoom = (event: WheelEvent) => {\r\n        if (event.ctrlKey || (PlatformModel.isMac && event.metaKey)) {\r\n            const scrollSign: number = Math.sign(event.deltaY);\r\n            if ((PlatformModel.isMac && scrollSign === -1) || (!PlatformModel.isMac && scrollSign === 1)) {\r\n                ViewPortActions.zoomOut();\r\n            }\r\n            else if ((PlatformModel.isMac && scrollSign === 1) || (!PlatformModel.isMac && scrollSign === -1)) {\r\n                ViewPortActions.zoomIn();\r\n            }\r\n        }\r\n        EditorModel.mousePositionOnViewPortContent = CanvasUtil.getMousePositionOnCanvasFromEvent(event, EditorModel.canvas);\r\n    };\r\n\r\n    private getOptionsPanels = () => {\r\n        const editorData: EditorData = EditorActions.getEditorData();\r\n        if (this.props.activeLabelType === LabelType.RECT) {\r\n            return this.props.imageData.labelRects\r\n                .filter((labelRect: LabelRect) => labelRect.isCreatedByAI && labelRect.status !== LabelStatus.ACCEPTED)\r\n                .map((labelRect: LabelRect) => {\r\n                    const positionOnImage: IPoint = {x: labelRect.rect.x, y: labelRect.rect.y};\r\n                    const positionOnViewPort: IPoint = RenderEngineUtil.transferPointFromImageToViewPortContent(positionOnImage, editorData);\r\n                    return <LabelControlPanel\r\n                        position={positionOnViewPort}\r\n                        labelData={labelRect}\r\n                        imageData={this.props.imageData}\r\n                        key={labelRect.id}\r\n                    />\r\n                })\r\n        }\r\n        else if (this.props.activeLabelType === LabelType.POINT) {\r\n            return this.props.imageData.labelPoints\r\n                .filter((labelPoint: LabelPoint) => labelPoint.isCreatedByAI && labelPoint.status !== LabelStatus.ACCEPTED)\r\n                .map((labelPoint: LabelPoint) => {\r\n                    const positionOnImage: IPoint = {x: labelPoint.point.x, y: labelPoint.point.y};\r\n                    const positionOnViewPort: IPoint = RenderEngineUtil.transferPointFromImageToViewPortContent(positionOnImage, editorData);\r\n                    return <LabelControlPanel\r\n                        position={positionOnViewPort}\r\n                        labelData={labelPoint}\r\n                        imageData={this.props.imageData}\r\n                        key={labelPoint.id}\r\n                    />\r\n                })\r\n        }\r\n        else if (this.props.activeLabelType === LabelType.POLYGON) {\r\n            return this.props.imageData.labelPolygons\r\n                .filter((labelPolygon: LabelPolygon) => labelPolygon.isCreatedByAI && labelPolygon.status !== LabelStatus.ACCEPTED)\r\n                .map((labelPolygon: LabelPolygon) => {\r\n                    const positionOnImage: IPoint = {x: labelPolygon.vertices[0].x, y: labelPolygon.vertices[0].y};\r\n                    const positionOnViewPort: IPoint = RenderEngineUtil.transferPointFromImageToViewPortContent(positionOnImage, editorData);\r\n                    return <LabelControlPanel\r\n                        position={positionOnViewPort}\r\n                        labelData={labelPolygon}\r\n                        imageData={this.props.imageData}\r\n                        key={labelPolygon.id}\r\n                    />\r\n                })\r\n        }\r\n        else return null;\r\n    };\r\n\r\n    private onScrollbarsUpdate = (scrollbarContent)=>{\r\n        const newViewPortContentSize = {\r\n            width: scrollbarContent.scrollWidth,\r\n            height: scrollbarContent.scrollHeight\r\n        };\r\n        if(!isEqual(newViewPortContentSize, this.state.viewPortSize)) {\r\n            this.setState({viewPortSize: newViewPortContentSize})\r\n        }\r\n    };\r\n\r\n    public render() {\r\n        return (\r\n            <div\r\n                className='Editor'\r\n                ref={ref => EditorModel.editor = ref}\r\n                draggable={false}\r\n            >\r\n                <Scrollbars\r\n                    ref={ref => EditorModel.viewPortScrollbars = ref}\r\n                    renderTrackHorizontal={props => <div {...props} className='track-horizontal'/>}\r\n                    renderTrackVertical={props => <div {...props} className='track-vertical'/>}\r\n                    onUpdate={this.onScrollbarsUpdate}\r\n                >\r\n                    <div\r\n                        className='ViewPortContent'\r\n                    >\r\n                        <canvas\r\n                            className='ImageCanvas'\r\n                            ref={ref => EditorModel.canvas = ref}\r\n                            draggable={false}\r\n                            onContextMenu={(event: React.MouseEvent<HTMLCanvasElement>) => event.preventDefault()}\r\n                        />\r\n                        {this.getOptionsPanels()}\r\n                    </div>\r\n                </Scrollbars>\r\n                <div\r\n                    className='MousePositionIndicator'\r\n                    ref={ref => EditorModel.mousePositionIndicator = ref}\r\n                    draggable={false}\r\n                />\r\n                <div\r\n                    className={EditorUtil.getCursorStyle(this.props.customCursorStyle)}\r\n                    ref={ref => EditorModel.cursor = ref}\r\n                    draggable={false}\r\n                >\r\n                    <img\r\n                        draggable={false}\r\n                        alt={'indicator'}\r\n                        src={EditorUtil.getIndicator(this.props.customCursorStyle)}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    updateImageDataById\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    activeLabelType: state.labels.activeLabelType,\r\n    activePopupType: state.general.activePopupType,\r\n    activeLabelId: state.labels.activeLabelId,\r\n    customCursorStyle: state.general.customCursorStyle,\r\n    imageDragMode: state.general.imageDragMode,\r\n    zoom: state.general.zoom\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Editor);\r\n","import React from 'react';\r\nimport './EditorBottomNavigationBar.scss';\r\nimport {ImageData} from \"../../../store/labels/types\";\r\nimport {AppState} from \"../../../store\";\r\nimport {connect} from \"react-redux\";\r\nimport {ImageButton} from \"../../Common/ImageButton/ImageButton\";\r\nimport {ISize} from \"../../../interfaces/ISize\";\r\nimport {ContextType} from \"../../../data/enums/ContextType\";\r\nimport classNames from \"classnames\";\r\nimport {ImageActions} from \"../../../logic/actions/ImageActions\";\r\n\r\ninterface IProps {\r\n    size: ISize;\r\n    imageData: ImageData;\r\n    totalImageCount: number;\r\n    activeImageIndex: number;\r\n    activeContext: ContextType;\r\n}\r\n\r\nconst EditorBottomNavigationBar: React.FC<IProps> = ({size, imageData, totalImageCount, activeImageIndex, activeContext}) => {\r\n    const minWidth:number = 400;\r\n\r\n    const getImageCounter = () => {\r\n        return (activeImageIndex + 1) + \" / \" + totalImageCount;\r\n    };\r\n\r\n    const getClassName = () => {\r\n        return classNames(\r\n            \"EditorBottomNavigationBar\",\r\n            {\r\n                \"with-context\": activeContext === ContextType.EDITOR\r\n            }\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className={getClassName()}>\r\n            <ImageButton\r\n                image={\"ico/left.png\"}\r\n                imageAlt={\"previous\"}\r\n                buttonSize={{width: 25, height: 25}}\r\n                onClick={() => ImageActions.getPreviousImage()}\r\n                isDisabled={activeImageIndex === 0}\r\n                externalClassName={\"left\"}\r\n            />\r\n            {size.width > minWidth ?\r\n                <div className=\"CurrentImageName\"> {imageData.fileData.name} </div> :\r\n                <div className=\"CurrentImageCount\"> {getImageCounter()} </div>\r\n            }\r\n            <ImageButton\r\n                image={\"ico/right.png\"}\r\n                imageAlt={\"next\"}\r\n                buttonSize={{width: 25, height: 25}}\r\n                onClick={() => ImageActions.getNextImage()}\r\n                isDisabled={activeImageIndex === totalImageCount - 1}\r\n                externalClassName={\"right\"}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    activeImageIndex: state.labels.activeImageIndex,\r\n    activeContext: state.general.activeContext\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(EditorBottomNavigationBar);\r\n","import {ContextType} from '../../../data/enums/ContextType';\r\nimport './EditorTopNavigationBar.scss';\r\nimport React from 'react';\r\nimport classNames from 'classnames';\r\nimport {AppState} from '../../../store';\r\nimport {connect} from 'react-redux';\r\nimport {updateCrossHairVisibleStatus, updateImageDragModeStatus} from '../../../store/general/actionCreators';\r\nimport {GeneralSelector} from '../../../store/selectors/GeneralSelector';\r\nimport {ViewPointSettings} from '../../../settings/ViewPointSettings';\r\nimport {ImageButton} from '../../Common/ImageButton/ImageButton';\r\nimport {ViewPortActions} from '../../../logic/actions/ViewPortActions';\r\nimport {LabelsSelector} from '../../../store/selectors/LabelsSelector';\r\nimport {LabelType} from '../../../data/enums/LabelType';\r\nimport {AISelector} from '../../../store/selectors/AISelector';\r\nimport {ISize} from '../../../interfaces/ISize';\r\nimport {AIActions} from '../../../logic/actions/AIActions';\r\nimport withStyles from '@material-ui/core/styles/withStyles';\r\nimport {Tooltip} from '@material-ui/core';\r\nimport Fade from '@material-ui/core/Fade';\r\n\r\nconst BUTTON_SIZE: ISize = {width: 30, height: 30};\r\nconst BUTTON_PADDING: number = 10;\r\n\r\nconst StyledTooltip = withStyles(theme => ({\r\n    tooltip: {\r\n        backgroundColor: '#171717',\r\n        color: '#ffffff',\r\n        boxShadow: theme.shadows[1],\r\n        fontSize: 12,\r\n        maxWidth: 200,\r\n        textAlign: 'center'\r\n    },\r\n}))(Tooltip);\r\n\r\nconst getButtonWithTooltip = (\r\n    key: string,\r\n    tooltipMessage: string,\r\n    imageSrc: string,\r\n    imageAlt: string,\r\n    isActive: boolean,\r\n    href?:string,\r\n    onClick?:() => any\r\n): React.ReactElement => {\r\n    return <StyledTooltip\r\n        key={key}\r\n        disableFocusListener={true}\r\n        title={tooltipMessage}\r\n        TransitionComponent={Fade}\r\n        TransitionProps={{ timeout: 600 }}\r\n        placement='bottom'\r\n    >\r\n        <div>\r\n            <ImageButton\r\n                buttonSize={BUTTON_SIZE}\r\n                padding={BUTTON_PADDING}\r\n                image={imageSrc}\r\n                imageAlt={imageAlt}\r\n                href={href}\r\n                onClick={onClick}\r\n                isActive={isActive}\r\n            />\r\n        </div>\r\n    </StyledTooltip>\r\n}\r\n\r\ninterface IProps {\r\n    activeContext: ContextType;\r\n    updateImageDragModeStatusAction: (imageDragMode: boolean) => any;\r\n    updateCrossHairVisibleStatusAction: (crossHairVisible: boolean) => any;\r\n    imageDragMode: boolean;\r\n    crossHairVisible: boolean;\r\n    activeLabelType: LabelType;\r\n}\r\n\r\nconst EditorTopNavigationBar: React.FC<IProps> = (\r\n    {\r\n        activeContext,\r\n        updateImageDragModeStatusAction,\r\n        updateCrossHairVisibleStatusAction,\r\n        imageDragMode,\r\n        crossHairVisible,\r\n        activeLabelType\r\n    }) => {\r\n    const getClassName = () => {\r\n        return classNames(\r\n            'EditorTopNavigationBar',\r\n            {\r\n                'with-context': activeContext === ContextType.EDITOR\r\n            }\r\n        );\r\n    };\r\n\r\n    const imageDragOnClick = () => {\r\n        if (imageDragMode) {\r\n            updateImageDragModeStatusAction(!imageDragMode);\r\n        }\r\n        else if (GeneralSelector.getZoom() !== ViewPointSettings.MIN_ZOOM) {\r\n            updateImageDragModeStatusAction(!imageDragMode);\r\n        }\r\n    };\r\n\r\n    const crossHairOnClick = () => {\r\n        updateCrossHairVisibleStatusAction(!crossHairVisible);\r\n    }\r\n\r\n    return (\r\n        <div className={getClassName()}>\r\n            <div className='ButtonWrapper'>\r\n                {\r\n                    getButtonWithTooltip(\r\n                        'zoom-in',\r\n                        'zoom in',\r\n                        'ico/zoom-in.png',\r\n                        'zoom-in',\r\n                        false,\r\n                        undefined,\r\n                        () => ViewPortActions.zoomIn()\r\n                    )\r\n                }\r\n                {\r\n                    getButtonWithTooltip(\r\n                        'zoom-out',\r\n                        'zoom out',\r\n                        'ico/zoom-out.png',\r\n                        'zoom-out',\r\n                        false,\r\n                        undefined,\r\n                        () => ViewPortActions.zoomOut()\r\n                    )\r\n                }\r\n                {\r\n                    getButtonWithTooltip(\r\n                        'zoom-fit',\r\n                        'fit image to available space',\r\n                        'ico/zoom-fit.png',\r\n                        'zoom-fit',\r\n                        false,\r\n                        undefined,\r\n                        () => ViewPortActions.setDefaultZoom()\r\n                    )\r\n                }\r\n                {\r\n                    getButtonWithTooltip(\r\n                        'zoom-max',\r\n                        'maximum allowed image zoom',\r\n                        'ico/zoom-max.png',\r\n                        'zoom-max',\r\n                        false,\r\n                        undefined,\r\n                        () => ViewPortActions.setOneForOneZoom()\r\n                    )\r\n                }\r\n            </div>\r\n            <div className='ButtonWrapper'>\r\n                {\r\n                    getButtonWithTooltip(\r\n                        'image-drag-mode',\r\n                        imageDragMode ? 'turn-off image drag mode' : 'turn-on image drag mode - works only when image is zoomed',\r\n                        'ico/hand.png',\r\n                        'image-drag-mode',\r\n                        imageDragMode,\r\n                        undefined,\r\n                        imageDragOnClick\r\n                    )\r\n                }\r\n                {\r\n                    getButtonWithTooltip(\r\n                        'cursor-cross-hair',\r\n                        crossHairVisible ? 'turn-off cursor cross-hair' : 'turn-on cursor cross-hair',\r\n                        'ico/cross-hair.png',\r\n                        'cross-hair',\r\n                        crossHairVisible,\r\n                        undefined,\r\n                        crossHairOnClick\r\n                    )\r\n                }\r\n            </div>\r\n            {((activeLabelType === LabelType.RECT && AISelector.isAIObjectDetectorModelLoaded()) ||\r\n                (activeLabelType === LabelType.POLYGON && AISelector.isAIMaskDetectorModelLoaded()) ||\r\n                (activeLabelType === LabelType.RECT && AISelector.isAIFormDetectorModelLoaded()) ||\r\n                (activeLabelType === LabelType.POINT && AISelector.isAIPoseDetectorModelLoaded())) && <div className='ButtonWrapper'>\r\n                {\r\n                    getButtonWithTooltip(\r\n                        'accept-all',\r\n                        'accept all proposed detections',\r\n                        'ico/accept-all.png',\r\n                        'accept-all',\r\n                        false,\r\n                        undefined,\r\n                        () => AIActions.acceptAllSuggestedLabels(LabelsSelector.getActiveImageData())\r\n                    )\r\n                }\r\n                {\r\n                    getButtonWithTooltip(\r\n                        'reject-all',\r\n                        'reject all proposed detections',\r\n                        'ico/reject-all.png',\r\n                        'reject-all',\r\n                        false,\r\n                        undefined,\r\n                        () => AIActions.rejectAllSuggestedLabels(LabelsSelector.getActiveImageData())\r\n                    )\r\n                }\r\n            </div>}\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    updateImageDragModeStatusAction: updateImageDragModeStatus,\r\n    updateCrossHairVisibleStatusAction: updateCrossHairVisibleStatus\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    activeContext: state.general.activeContext,\r\n    imageDragMode: state.general.imageDragMode,\r\n    crossHairVisible: state.general.crossHairVisible,\r\n    activeLabelType: state.labels.activeLabelType\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(EditorTopNavigationBar);\r\n","import React, {useState} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {Direction} from \"../../../data/enums/Direction\";\r\nimport {ISize} from \"../../../interfaces/ISize\";\r\nimport {Settings} from \"../../../settings/Settings\";\r\nimport {AppState} from \"../../../store\";\r\nimport {ImageData} from \"../../../store/labels/types\";\r\nimport ImagesList from \"../SideNavigationBar/ImagesList/ImagesList\";\r\nimport LabelsToolkit from \"../SideNavigationBar/LabelsToolkit/LabelsToolkit\";\r\nimport {SideNavigationBar} from \"../SideNavigationBar/SideNavigationBar\";\r\nimport {VerticalEditorButton} from \"../VerticalEditorButton/VerticalEditorButton\";\r\nimport './EditorContainer.scss';\r\nimport Editor from \"../Editor/Editor\";\r\nimport {ContextManager} from \"../../../logic/context/ContextManager\";\r\nimport {ContextType} from \"../../../data/enums/ContextType\";\r\nimport EditorBottomNavigationBar from \"../EditorBottomNavigationBar/EditorBottomNavigationBar\";\r\nimport EditorTopNavigationBar from \"../EditorTopNavigationBar/EditorTopNavigationBar\";\r\nimport {ProjectType} from \"../../../data/enums/ProjectType\";\r\n\r\ninterface IProps {\r\n    windowSize: ISize;\r\n    activeImageIndex: number;\r\n    imagesData: ImageData[];\r\n    activeContext: ContextType;\r\n    projectType: ProjectType;\r\n}\r\n\r\nconst EditorContainer: React.FC<IProps> = (\r\n    {\r\n        windowSize,\r\n        activeImageIndex,\r\n        imagesData,\r\n        activeContext,\r\n        projectType\r\n    }) => {\r\n    const [leftTabStatus, setLeftTabStatus] = useState(true);\r\n    const [rightTabStatus, setRightTabStatus] = useState(true);\r\n\r\n    const calculateEditorSize = (): ISize => {\r\n        if (windowSize) {\r\n            const leftTabWidth = leftTabStatus ? Settings.SIDE_NAVIGATION_BAR_WIDTH_OPEN_PX : Settings.SIDE_NAVIGATION_BAR_WIDTH_CLOSED_PX;\r\n            const rightTabWidth = rightTabStatus ? Settings.SIDE_NAVIGATION_BAR_WIDTH_OPEN_PX : Settings.SIDE_NAVIGATION_BAR_WIDTH_CLOSED_PX;\r\n            return {\r\n                width: windowSize.width - leftTabWidth - rightTabWidth,\r\n                height: windowSize.height - Settings.TOP_NAVIGATION_BAR_HEIGHT_PX\r\n                    - Settings.EDITOR_BOTTOM_NAVIGATION_BAR_HEIGHT_PX - Settings.EDITOR_TOP_NAVIGATION_BAR_HEIGHT_PX,\r\n            }\r\n        }\r\n        else\r\n            return null;\r\n    };\r\n\r\n    const leftSideBarButtonOnClick = () => {\r\n        if (!leftTabStatus)\r\n            ContextManager.switchCtx(ContextType.LEFT_NAVBAR);\r\n        else if (leftTabStatus && activeContext === ContextType.LEFT_NAVBAR)\r\n            ContextManager.restoreCtx();\r\n\r\n        setLeftTabStatus(!leftTabStatus);\r\n    };\r\n\r\n    const leftSideBarCompanionRender = () => {\r\n        return <>\r\n            <VerticalEditorButton\r\n                label=\"Images\"\r\n                image={\"/ico/camera.png\"}\r\n                imageAlt={\"images\"}\r\n                onClick={leftSideBarButtonOnClick}\r\n                isActive={leftTabStatus}\r\n            />\r\n        </>\r\n    };\r\n\r\n    const leftSideBarRender = () => {\r\n        return <ImagesList/>\r\n    };\r\n\r\n    const rightSideBarButtonOnClick = () => {\r\n        if (!rightTabStatus)\r\n            ContextManager.switchCtx(ContextType.RIGHT_NAVBAR);\r\n        else if (rightTabStatus && activeContext === ContextType.RIGHT_NAVBAR)\r\n            ContextManager.restoreCtx();\r\n\r\n        setRightTabStatus(!rightTabStatus);\r\n    };\r\n\r\n    const rightSideBarCompanionRender = () => {\r\n        return <>\r\n            <VerticalEditorButton\r\n                label=\"Labels\"\r\n                image={\"/ico/tags.png\"}\r\n                imageAlt={\"labels\"}\r\n                onClick={rightSideBarButtonOnClick}\r\n                isActive={rightTabStatus}\r\n            />\r\n        </>\r\n    };\r\n\r\n    const rightSideBarRender = () => {\r\n        return <LabelsToolkit/>\r\n    };\r\n\r\n    return (\r\n        <div className=\"EditorContainer\">\r\n            <SideNavigationBar\r\n                direction={Direction.LEFT}\r\n                isOpen={leftTabStatus}\r\n                isWithContext={activeContext === ContextType.LEFT_NAVBAR}\r\n                renderCompanion={leftSideBarCompanionRender}\r\n                renderContent={leftSideBarRender}\r\n                key=\"left-side-navigation-bar\"\r\n            />\r\n            <div className=\"EditorWrapper\"\r\n                onMouseDown={() => ContextManager.switchCtx(ContextType.EDITOR)}\r\n                 key=\"editor-wrapper\"\r\n            >\r\n                {projectType === ProjectType.OBJECT_DETECTION && <EditorTopNavigationBar\r\n                    key=\"editor-top-navigation-bar\"\r\n                />}\r\n                <Editor\r\n                    size={calculateEditorSize()}\r\n                    imageData={imagesData[activeImageIndex]}\r\n                    key=\"editor\"\r\n                />\r\n                <EditorBottomNavigationBar\r\n                    imageData={imagesData[activeImageIndex]}\r\n                    size={calculateEditorSize()}\r\n                    totalImageCount={imagesData.length}\r\n                    key=\"editor-bottom-navigation-bar\"\r\n                />\r\n            </div>\r\n            <SideNavigationBar\r\n                direction={Direction.RIGHT}\r\n                isOpen={rightTabStatus}\r\n                isWithContext={activeContext === ContextType.RIGHT_NAVBAR}\r\n                renderCompanion={rightSideBarCompanionRender}\r\n                renderContent={rightSideBarRender}\r\n                key=\"right-side-navigation-bar\"\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    windowSize: state.general.windowSize,\r\n    activeImageIndex: state.labels.activeImageIndex,\r\n    imagesData: state.labels.imagesData,\r\n    activeContext: state.general.activeContext,\r\n    projectType: state.general.projectData.type\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps\r\n)(EditorContainer);","import React from 'react';\r\nimport './StateBar.scss';\r\nimport {ImageData} from \"../../../store/labels/types\";\r\nimport {AppState} from \"../../../store\";\r\nimport {connect} from \"react-redux\";\r\nimport {LabelType} from \"../../../data/enums/LabelType\";\r\n\r\ninterface IProps {\r\n    imagesData: ImageData[];\r\n    activeLabelType: LabelType;\r\n}\r\n\r\nconst StateBar: React.FC<IProps> = ({imagesData, activeLabelType}) => {\r\n\r\n    const pointLabeledImages = imagesData.reduce((currentCount: number, currentImage: ImageData) => {\r\n        return currentCount + (currentImage.labelPoints.length > 0 ? 1 : 0);\r\n    }, 0);\r\n\r\n    const rectLabeledImages = imagesData.reduce((currentCount: number, currentImage: ImageData) => {\r\n        return currentCount + (currentImage.labelRects.length > 0 ? 1 : 0);\r\n    }, 0);\r\n\r\n    const polygonLabeledImages = imagesData.reduce((currentCount: number, currentImage: ImageData) => {\r\n        return currentCount + (currentImage.labelPolygons.length > 0 ? 1 : 0);\r\n    }, 0);\r\n\r\n    const lineLabeledImages = imagesData.reduce((currentCount: number, currentImage: ImageData) => {\r\n        return currentCount + (currentImage.labelLines.length > 0 ? 1 : 0);\r\n    }, 0);\r\n\r\n    const tagLabeledImages = imagesData.reduce((currentCount: number, currentImage: ImageData) => {\r\n        return currentCount + (currentImage.labelNameIds.length !== 0 ? 1 : 0);\r\n    }, 0);\r\n\r\n    const getProgress = () => {\r\n        switch (activeLabelType) {\r\n            case LabelType.POINT:\r\n                return (100 * pointLabeledImages) / imagesData.length;\r\n            case LabelType.RECT:\r\n                return (100 * rectLabeledImages) / imagesData.length;\r\n            case LabelType.POLYGON:\r\n                return (100 * polygonLabeledImages) / imagesData.length;\r\n            case LabelType.LINE:\r\n                return (100 * lineLabeledImages) / imagesData.length;\r\n            case LabelType.IMAGE_RECOGNITION:\r\n                return (100 * tagLabeledImages) / imagesData.length;\r\n            default:\r\n                return 0;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"StateBar\">\r\n            <div\r\n                style={{width: getProgress() + \"%\"}}\r\n                className=\"done\"\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    imagesData: state.labels.imagesData,\r\n    activeLabelType: state.labels.activeLabelType\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(StateBar);","import {updateActivePopupType} from '../../store/general/actionCreators';\r\nimport {PopupWindowType} from '../enums/PopupWindowType';\r\nimport {store} from '../../index';\r\n\r\nexport type DropDownMenuNode = {\r\n    name: string\r\n    description?: string\r\n    imageSrc: string\r\n    imageAlt: string\r\n    disabled: boolean\r\n    onClick?: () => void\r\n    children?: DropDownMenuNode[]\r\n}\r\n\r\nexport const DropDownMenuData: DropDownMenuNode[] = [\r\n    {\r\n        name: 'File',\r\n        imageSrc: '',\r\n        imageAlt: '',\r\n        disabled: true,\r\n        children: [\r\n            {\r\n                name: 'Edit Labels',\r\n                description: 'Modify labels list',\r\n                imageSrc: 'ico/tags.png',\r\n                imageAlt: 'labels',\r\n                disabled: false,\r\n                onClick: () => store.dispatch(updateActivePopupType(PopupWindowType.UPDATE_LABEL))\r\n            },\r\n            {\r\n                name: 'Import Images',\r\n                description: 'Load more images',\r\n                imageSrc: 'ico/camera.png',\r\n                imageAlt: 'images',\r\n                disabled: false,\r\n                onClick: () => store.dispatch(updateActivePopupType(PopupWindowType.IMPORT_IMAGES))\r\n            },\r\n            // {\r\n            //     name: 'Import Annotations',\r\n            //     description: 'Import annotations from file',\r\n            //     imageSrc: 'ico/import-labels.png',\r\n            //     imageAlt: 'import-labels',\r\n            //     disabled: false,\r\n            //     onClick: () => store.dispatch(updateActivePopupType(PopupWindowType.IMPORT_ANNOTATIONS))\r\n            // },\r\n            {\r\n                name: 'Export Annotations',\r\n                description: 'Export annotations to file',\r\n                imageSrc: 'ico/export-labels.png',\r\n                imageAlt: 'export-labels',\r\n                disabled: false,\r\n                onClick: () => store.dispatch(updateActivePopupType(PopupWindowType.EXPORT_ANNOTATIONS))\r\n            },\r\n            {\r\n                name: 'Load AI Model',\r\n                description: 'Load our pre-trained annotation models',\r\n                imageSrc: 'ico/ai.png',\r\n                imageAlt: 'load-ai-model',\r\n                disabled: false,\r\n                onClick: () => store.dispatch(updateActivePopupType(PopupWindowType.LOAD_AI_MODEL))\r\n            },\r\n        ]\r\n    },\r\n    // {\r\n    //     name: 'Community',\r\n    //     imageSrc: 'ico/heart.png',\r\n    //     imageAlt: 'community',\r\n    //     disabled: false,\r\n    //     children: [\r\n    //         {\r\n    //             name: 'Documentation',\r\n    //             description: 'Read more about Make Sense',\r\n    //             imageSrc: 'ico/documentation.png',\r\n    //             imageAlt: 'documentation',\r\n    //             disabled: false,\r\n    //             onClick: () => window.open('https://skalskip.github.io/make-sense', '_blank')\r\n    //         },\r\n    //         {\r\n    //             name: 'Bugs and Features',\r\n    //             description: 'Report a bug or propose a new feature',\r\n    //             imageSrc: 'ico/bug.png',\r\n    //             imageAlt: 'bug',\r\n    //             disabled: false,\r\n    //             onClick: () => window.open('https://github.com/SkalskiP/make-sense/issues', '_blank')\r\n    //         }\r\n    //     ]\r\n    // }\r\n]\r\n\r\n","import React, {useState} from 'react';\r\nimport classNames from 'classnames'\r\nimport './DropDownMenu.scss';\r\nimport {DropDownMenuData, DropDownMenuNode} from '../../../../data/info/DropDownMenuData';\r\nimport {EventType} from '../../../../data/enums/EventType';\r\nimport {updatePreventCustomCursorStatus} from '../../../../store/general/actionCreators';\r\nimport {AppState} from '../../../../store';\r\nimport {connect} from 'react-redux';\r\n\r\ninterface IProps {\r\n    updatePreventCustomCursorStatusAction: (preventCustomCursor: boolean) => any;\r\n}\r\n\r\nconst DropDownMenu: React.FC<IProps> = ({updatePreventCustomCursorStatusAction}) => {\r\n    const topAnchor = 35;\r\n\r\n    const [activeTabIdx, setActiveTabIdx] = useState(null);\r\n    const [activeDropDownAnchor, setDropDownAnchor] = useState(null);\r\n\r\n    const onTabClick = (tabIdx: number, event) => {\r\n        if (activeTabIdx === null) {\r\n            document.addEventListener(EventType.MOUSE_DOWN, onMouseDownBeyondDropDown);\r\n        }\r\n\r\n        if (activeTabIdx === tabIdx) {\r\n            setActiveTabIdx(null);\r\n            setDropDownAnchor(null);\r\n        } else {\r\n            setActiveTabIdx(tabIdx);\r\n            setDropDownAnchor({x: event.target.offsetLeft, y: topAnchor});\r\n        }\r\n    }\r\n\r\n    const onMouseEnterWindow = (event) => {\r\n        updatePreventCustomCursorStatusAction(true);\r\n    }\r\n\r\n    const onMouseLeaveWindow = (event) => {\r\n        updatePreventCustomCursorStatusAction(false);\r\n    }\r\n\r\n    const onMouseDownBeyondDropDown = (event) => {\r\n        if (event.target.classList.contains('DropDownMenuTab') || event.target.classList.contains('DropDownMenuContentOption')) {\r\n            return;\r\n        }\r\n        setActiveTabIdx(null);\r\n        document.removeEventListener(EventType.MOUSE_DOWN, onMouseDownBeyondDropDown);\r\n    }\r\n\r\n    const onMouseEnterTab = (tabIdx: number, event) => {\r\n        if (activeTabIdx !== null && activeTabIdx !== tabIdx) {\r\n            setActiveTabIdx(tabIdx);\r\n            setDropDownAnchor({x: event.target.offsetLeft, y: topAnchor});\r\n        }\r\n    }\r\n\r\n    const getDropDownMenuTabClassName = (tabIdx: number) => {\r\n        return classNames(\r\n            'DropDownMenuTab',\r\n            {'active': tabIdx === activeTabIdx}\r\n        );\r\n    };\r\n\r\n    const getDropDownMenuContentOption = (disabled: boolean) => {\r\n        return classNames(\r\n            'DropDownMenuContentOption',\r\n            {'active': !disabled}\r\n        );\r\n    }\r\n\r\n    const getDropDownContent = () => {\r\n        return DropDownMenuData.map((data: DropDownMenuNode, index: number) => getDropDownTab(data, index))\r\n    }\r\n\r\n    const wrapOnClick = (onClick?: () => void, disabled?: boolean): () => void => {\r\n        return () => {\r\n            if (!!disabled) return;\r\n            if (!!onClick) onClick();\r\n            setActiveTabIdx(null);\r\n            updatePreventCustomCursorStatusAction(false);\r\n            document.removeEventListener(EventType.MOUSE_DOWN, onMouseDownBeyondDropDown);\r\n        }\r\n    }\r\n\r\n    const getDropDownTab = (data: DropDownMenuNode, index: number) => {\r\n        return <div\r\n            className={getDropDownMenuTabClassName(index)}\r\n            key={index}\r\n            onClick={(event) => onTabClick(index, event)}\r\n            onMouseEnter={(event) => onMouseEnterTab(index, event)}\r\n        >\r\n            <img\r\n                draggable={false}\r\n                src={data.imageSrc}\r\n                alt={data.imageAlt}\r\n            />\r\n            {data.name}\r\n        </div>\r\n    }\r\n\r\n    const getDropDownWindow = (data: DropDownMenuNode) => {\r\n        if (activeTabIdx !== null) {\r\n            const style: React.CSSProperties = {\r\n                top: 35,\r\n                left: activeDropDownAnchor.x,\r\n                height: 40 * data.children.length + 10\r\n            }\r\n            return <div\r\n                className={'DropDownMenuContent'}\r\n                style={style}\r\n                onMouseEnter={onMouseEnterWindow}\r\n                onMouseLeave={onMouseLeaveWindow}\r\n            >\r\n                {data.children.map((element: DropDownMenuNode, index: number) => {\r\n                    return <div className={getDropDownMenuContentOption(element.disabled)}\r\n                        onClick={wrapOnClick(element.onClick, element.disabled)}\r\n                        key={index}\r\n                    >\r\n                        <div className='Marker'/>\r\n                        <img src={element.imageSrc} alt={element.imageAlt}/>\r\n                        {element.name}\r\n                    </div>})}\r\n            </div>\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    return(<div className='DropDownMenuWrapper'>\r\n        <>\r\n            {getDropDownContent()}\r\n            {getDropDownWindow(DropDownMenuData[activeTabIdx])}\r\n        </>\r\n    </div>)\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    updatePreventCustomCursorStatusAction: updatePreventCustomCursorStatus,\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(DropDownMenu);\r\n","import React from 'react';\r\nimport './TopNavigationBar.scss';\r\nimport StateBar from '../StateBar/StateBar';\r\nimport {PopupWindowType} from '../../../data/enums/PopupWindowType';\r\nimport {AppState} from '../../../store';\r\nimport {connect} from 'react-redux';\r\nimport {updateActivePopupType, updateProjectData} from '../../../store/general/actionCreators';\r\nimport TextInput from '../../Common/TextInput/TextInput';\r\nimport {ImageButton} from '../../Common/ImageButton/ImageButton';\r\nimport {Settings} from '../../../settings/Settings';\r\nimport {ProjectData} from '../../../store/general/types';\r\nimport DropDownMenu from './DropDownMenu/DropDownMenu';\r\n\r\ninterface IProps {\r\n    updateActivePopupTypeAction: (activePopupType: PopupWindowType) => any;\r\n    updateProjectDataAction: (projectData: ProjectData) => any;\r\n    projectData: ProjectData;\r\n}\r\n\r\nconst TopNavigationBar: React.FC<IProps> = (props) => {\r\n    const onFocus = (event: React.FocusEvent<HTMLInputElement>) => {\r\n        event.target.setSelectionRange(0, event.target.value.length);\r\n    };\r\n\r\n    const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = event.target.value\r\n            .toLowerCase()\r\n            .replace(' ', '-');\r\n\r\n        props.updateProjectDataAction({\r\n            ...props.projectData,\r\n            name: value\r\n        })\r\n    };\r\n\r\n    const closePopup = () => props.updateActivePopupTypeAction(PopupWindowType.EXIT_PROJECT)\r\n\r\n    return (\r\n        <div className='TopNavigationBar'>\r\n            <StateBar/>\r\n            <div className='TopNavigationBarWrapper'>\r\n                <div className='NavigationBarGroupWrapper'>\r\n                    {/* <div\r\n                        className='Header'\r\n                        onClick={closePopup}\r\n                    >\r\n                        <img\r\n                            draggable={false}\r\n                            alt={'make-sense'}\r\n                            src={'/make-sense-ico-transparent.png'}\r\n                        />\r\n                        Make Sense\r\n                    </div> */}\r\n                </div>\r\n                <div className='NavigationBarGroupWrapper'>\r\n                    <DropDownMenu/>\r\n                </div>\r\n                <div className='NavigationBarGroupWrapper middle'>\r\n                    {/* <div className='ProjectName'>Project Name:</div> */}\r\n                    {/* <TextInput\r\n                        isPassword={false}\r\n                        value={props.projectData.name}\r\n                        onChange={onChange}\r\n                        onFocus={onFocus}\r\n                    /> */}\r\n                </div>\r\n                {/* <div className='NavigationBarGroupWrapper'>\r\n                    <ImageButton\r\n                        image={'ico/github-logo.png'}\r\n                        imageAlt={'github-logo.png'}\r\n                        buttonSize={{width: 30, height: 30}}\r\n                        href={Settings.GITHUB_URL}\r\n                    />\r\n                </div> */}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    updateActivePopupTypeAction: updateActivePopupType,\r\n    updateProjectDataAction: updateProjectData\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    projectData: state.general.projectData\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(TopNavigationBar);\r\n","import React from 'react';\r\nimport './EditorView.scss';\r\nimport EditorContainer from './EditorContainer/EditorContainer';\r\nimport {PopupWindowType} from '../../data/enums/PopupWindowType';\r\nimport {AppState} from '../../store';\r\nimport {connect} from 'react-redux';\r\nimport classNames from 'classnames';\r\nimport TopNavigationBar from './TopNavigationBar/TopNavigationBar';\r\n\r\ninterface IProps {\r\n    activePopupType: PopupWindowType;\r\n}\r\n\r\nconst EditorView: React.FC<IProps> = ({activePopupType}) => {\r\n\r\n    const getClassName = () => {\r\n        return classNames(\r\n            'EditorView',\r\n            {\r\n                'withPopup': !!activePopupType\r\n            }\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className={getClassName()}\r\n            draggable={false}\r\n        >\r\n            <TopNavigationBar/>\r\n            <EditorContainer/>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    activePopupType: state.general.activePopupType\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps\r\n)(EditorView);\r\n","export interface IEditorFeature {\r\n    displayText:string;\r\n    imageSrc:string;\r\n    imageAlt:string;\r\n}\r\n\r\nexport const EditorFeatureData: IEditorFeature[] = [\r\n    {\r\n        displayText: 'Open source and free to use under GPLv3 license',\r\n        imageSrc: 'ico/open-source.png',\r\n        imageAlt: 'open-source',\r\n    },\r\n    {\r\n        displayText: 'No advanced installation required, just open up your browser',\r\n        imageSrc: 'ico/online.png',\r\n        imageAlt: 'online',\r\n    },\r\n    {\r\n        displayText: \"We don't store your images, because we don't send them anywhere\",\r\n        imageSrc: 'ico/private.png',\r\n        imageAlt: 'private',\r\n    },\r\n    {\r\n        displayText: 'Support multiple label types - rects, lines, points and polygons',\r\n        imageSrc: 'ico/labels.png',\r\n        imageAlt: 'labels',\r\n    },\r\n    {\r\n        displayText: 'Support output file formats like YOLO, VOC XML, VGG JSON, CSV',\r\n        imageSrc: 'ico/file.png',\r\n        imageAlt: 'file',\r\n    },\r\n    {\r\n        displayText: 'Use AI to make your work more productive',\r\n        imageSrc: 'ico/robot.png',\r\n        imageAlt: 'robot',\r\n    },\r\n];","import * as React from 'react';\r\nimport './TextButton.scss';\r\nimport classNames from 'classnames';\r\n\r\ninterface IProps {\r\n    key?:string;\r\n    label:string;\r\n    onClick?:() => any;\r\n    style?:React.CSSProperties;\r\n    isActive?:boolean;\r\n    isDisabled?:boolean;\r\n    externalClassName?:string;\r\n}\r\n\r\nexport const TextButton = (props:IProps) => {\r\n    const { key, label, onClick, style, isActive, isDisabled, externalClassName} = props;\r\n\r\n    const getClassName = () => {\r\n        return classNames(\r\n            'TextButton',\r\n            externalClassName,\r\n            {\r\n                'active': isActive,\r\n                'disabled': isDisabled\r\n            }\r\n        );\r\n    };\r\n\r\n    const onClickHandler = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n        event.stopPropagation();\r\n        if (onClick) {\r\n            onClick();\r\n        }\r\n    };\r\n\r\n    return(\r\n        <div\r\n            className={getClassName()}\r\n            onClick={onClickHandler}\r\n            key={key}\r\n            style={style}\r\n        >\r\n            {label}\r\n        </div>\r\n    )\r\n};\r\n","import {ImageData} from '../store/labels/types';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport {FileUtil} from './FileUtil';\r\nimport {ImageRepository} from '../logic/imageRepository/ImageRepository';\r\n\r\nexport class ImageDataUtil {\r\n    public static createImageDataFromFileData(fileData: File): ImageData {\r\n        return {\r\n            id: uuidv4(),\r\n            fileData,\r\n            loadStatus: false,\r\n            labelRects: [],\r\n            labelPoints: [],\r\n            labelLines: [],\r\n            labelPolygons: [],\r\n            labelNameIds: [],\r\n            isVisitedByObjectDetector: false,\r\n            isVisitedByPoseDetector: false,\r\n            isVisitedByFormDetector: false,\r\n            isVisitedByMaskDetector: false\r\n        }\r\n    }\r\n\r\n    public static cleanAnnotations(item: ImageData): ImageData {\r\n        return {\r\n            ...item,\r\n            labelRects: [],\r\n            labelPoints: [],\r\n            labelLines: [],\r\n            labelPolygons: [],\r\n            labelNameIds: []\r\n        }\r\n    }\r\n\r\n    public static arrange(items: ImageData[], idArrangement: string[]): ImageData[] {\r\n        return items.sort((a: ImageData, b: ImageData) => {\r\n            return idArrangement.indexOf(a.id) - idArrangement.indexOf(b.id)\r\n        })\r\n    }\r\n\r\n    public static loadMissingImages(images: ImageData[]): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const missingImages = images.filter((i: ImageData) => !i.loadStatus);\r\n            const missingImagesFiles = missingImages.map((i: ImageData) => i.fileData);\r\n            FileUtil.loadImages(missingImagesFiles)\r\n                .then((htmlImageElements:HTMLImageElement[]) => {\r\n                    ImageRepository.storeImages(missingImages.map((i: ImageData) => i.id), htmlImageElements);\r\n                    resolve()\r\n                })\r\n                .catch((error: Error) => reject(error));\r\n        });\r\n    }\r\n}\r\n","export enum NotificationType {\r\n    ERROR = 'ERROR',\r\n    SUCCESS = 'SUCCESS',\r\n    MESSAGE = 'MESSAGE',\r\n    WARNING = 'WARNING'\r\n}\r\n","import React, {PropsWithChildren} from 'react';\r\nimport './ImagesDropZone.scss';\r\nimport {useDropzone,DropzoneOptions} from 'react-dropzone';\r\nimport {TextButton} from '../../Common/TextButton/TextButton';\r\nimport {ImageData} from '../../../store/labels/types';\r\nimport {connect} from 'react-redux';\r\nimport {addImageData, updateActiveImageIndex} from '../../../store/labels/actionCreators';\r\nimport {AppState} from '../../../store';\r\nimport {ProjectType} from '../../../data/enums/ProjectType';\r\nimport {PopupWindowType} from '../../../data/enums/PopupWindowType';\r\nimport {updateActivePopupType, updateProjectData} from '../../../store/general/actionCreators';\r\nimport {AcceptedFileType} from '../../../data/enums/AcceptedFileType';\r\nimport {ProjectData} from '../../../store/general/types';\r\nimport {ImageDataUtil} from '../../../utils/ImageDataUtil';\r\nimport { sortBy } from 'lodash';\r\n\r\ninterface IProps {\r\n    updateActiveImageIndexAction: (activeImageIndex: number) => any;\r\n    addImageDataAction: (imageData: ImageData[]) => any;\r\n    updateProjectDataAction: (projectData: ProjectData) => any;\r\n    updateActivePopupTypeAction: (activePopupType: PopupWindowType) => any;\r\n    projectData: ProjectData;\r\n}\r\n\r\nconst ImagesDropZone: React.FC<IProps> = (props: PropsWithChildren<IProps>) => {\r\n    const {acceptedFiles, getRootProps, getInputProps} = useDropzone({\r\n        accept: AcceptedFileType.IMAGE\r\n    } as DropzoneOptions);\r\n\r\n    const startEditor = (projectType: ProjectType) => {\r\n        if (acceptedFiles.length > 0) {\r\n            const files = sortBy(acceptedFiles, (item: File) => item.name)\r\n            props.updateProjectDataAction({\r\n                ...props.projectData,\r\n                type: projectType\r\n            });\r\n            props.updateActiveImageIndexAction(0);\r\n            props.addImageDataAction(files.map((file:File) => ImageDataUtil\r\n                .createImageDataFromFileData(file)));\r\n            // props.updateActivePopupTypeAction(PopupWindowType.INSERT_LABEL_NAMES);\r\n        }\r\n    };\r\n\r\n    const getDropZoneContent = () => {\r\n        if (acceptedFiles.length === 0)\r\n            return <>\r\n                <input {...getInputProps()} />\r\n                <img\r\n                    draggable={false}\r\n                    alt={'upload'}\r\n                    src={'ico/box-opened.png'}\r\n                />\r\n                <p className='extraBold'>Drop images</p>\r\n                <p>or</p>\r\n                <p className='extraBold'>Click here to select them</p>\r\n            </>;\r\n        else if (acceptedFiles.length === 1)\r\n            return <>\r\n                <img\r\n                    draggable={false}\r\n                    alt={'uploaded'}\r\n                    src={'ico/box-closed.png'}\r\n                />\r\n                <p className='extraBold'>1 image loaded</p>\r\n            </>;\r\n        else\r\n            return <>\r\n                <input {...getInputProps()} />\r\n                <img\r\n                    draggable={false}\r\n                    key={1}\r\n                    alt={'uploaded'}\r\n                    src={'ico/box-closed.png'}\r\n                />\r\n                <p key={2} className='extraBold'>{acceptedFiles.length} images loaded</p>\r\n            </>;\r\n    };\r\n\r\n    const startEditorWithObjectDetection = () => startEditor(ProjectType.OBJECT_DETECTION)\r\n    const startEditorWithImageRecognition = () => startEditor(ProjectType.IMAGE_RECOGNITION)\r\n\r\n    return(\r\n        <div className='ImagesDropZone'>\r\n            <div {...getRootProps({className: 'DropZone'})}>\r\n                {getDropZoneContent()}\r\n            </div>\r\n            <div className='DropZoneButtons'>\r\n                <TextButton\r\n                    label={'get started'}\r\n                    isDisabled={!acceptedFiles.length}\r\n                    onClick={startEditorWithObjectDetection}\r\n                />\r\n                \r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    updateActiveImageIndexAction: updateActiveImageIndex,\r\n    addImageDataAction: addImageData,\r\n    updateProjectDataAction: updateProjectData,\r\n    updateActivePopupTypeAction: updateActivePopupType\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    projectData: state.general.projectData\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(ImagesDropZone);\r\n","import React, {useState} from 'react';\r\nimport './MainView.scss';\r\nimport {TextButton} from '../Common/TextButton/TextButton';\r\nimport classNames from 'classnames';\r\nimport {ISize} from '../../interfaces/ISize';\r\nimport {ImageButton} from '../Common/ImageButton/ImageButton';\r\nimport {ISocialMedia, SocialMediaData} from '../../data/info/SocialMediaData';\r\nimport {EditorFeatureData, IEditorFeature} from '../../data/info/EditorFeatureData';\r\nimport {Tooltip} from '@material-ui/core';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport withStyles from '@material-ui/core/styles/withStyles';\r\nimport ImagesDropZone from './ImagesDropZone/ImagesDropZone';\r\n\r\nconst MainView: React.FC = () => {\r\n    const [projectInProgress, setProjectInProgress] = useState(false);\r\n    const [projectCanceled, setProjectCanceled] = useState(false);\r\n\r\n    const startProject = () => {\r\n        setProjectInProgress(true);\r\n    };\r\n\r\n    const endProject = () => {\r\n        setProjectInProgress(false);\r\n        setProjectCanceled(true);\r\n    };\r\n\r\n    const getClassName = () => {\r\n        return classNames(\r\n            'MainView', {\r\n                'InProgress': true,\r\n                'Canceled': !projectInProgress && projectCanceled\r\n            }\r\n        );\r\n    };\r\n\r\n    const DarkTooltip = withStyles(theme => ({\r\n        tooltip: {\r\n            backgroundColor: '#171717',\r\n            color: '#ffffff',\r\n            boxShadow: theme.shadows[1],\r\n            fontSize: 11,\r\n            maxWidth: 120\r\n        },\r\n    }))(Tooltip);\r\n\r\n    // const getSocialMediaButtons = (size:ISize) => {\r\n    //     return SocialMediaData.map((data:ISocialMedia, index: number) => {\r\n    //         return <DarkTooltip\r\n    //             key={index}\r\n    //             disableFocusListener={true}\r\n    //             title={data.tooltipMessage}\r\n    //             TransitionComponent={Fade}\r\n    //             TransitionProps={{ timeout: 600 }}\r\n    //             placement='left'\r\n    //         >\r\n    //             <div>\r\n    //                 <ImageButton\r\n    //                     buttonSize={size}\r\n    //                     image={data.imageSrc}\r\n    //                     imageAlt={data.imageAlt}\r\n    //                     href={data.href}\r\n    //                 />\r\n    //             </div>\r\n    //         </DarkTooltip>\r\n    //     });\r\n    // };\r\n\r\n    const getEditorFeatureTiles = () => {\r\n        return EditorFeatureData.map((data:IEditorFeature) => {\r\n            return <div\r\n                className='EditorFeaturesTiles'\r\n                key={data.displayText}\r\n            >\r\n                <div\r\n                    className='EditorFeaturesTilesWrapper'\r\n                >\r\n                    <img\r\n                        draggable={false}\r\n                        alt={data.imageAlt}\r\n                        src={data.imageSrc}\r\n                    />\r\n                    <div className='EditorFeatureLabel'>\r\n                        {data.displayText}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className={getClassName()}>\r\n            {/* <div className='Slider' id='lower'>\r\n                <div className='TriangleVertical'>\r\n                    <div className='TriangleVerticalContent'/>\r\n                </div>\r\n            </div>\r\n\r\n            <div className='Slider' id='upper'>\r\n                <div className='TriangleVertical'>\r\n                    <div className='TriangleVerticalContent'/>\r\n                </div>\r\n            </div>\r\n\r\n            <div className='LeftColumn'>\r\n                <div className={'LogoWrapper'}>\r\n                    <img\r\n                        draggable={false}\r\n                        alt={'main-logo'}\r\n                        src={'ico/main-image-color.png'}\r\n                    />\r\n                </div>\r\n                <div className='EditorFeaturesWrapper'>\r\n                    {getEditorFeatureTiles()}\r\n                </div>\r\n                <div className='TriangleVertical'>\r\n                    <div className='TriangleVerticalContent'/>\r\n                </div>\r\n                {projectInProgress && <TextButton\r\n                    label={'Go Back'}\r\n                    onClick={endProject}\r\n                />}\r\n            </div> */}\r\n            {/* <script>setProjectInProgress(true);</script>\r\n            <ImagesDropZone/> */}\r\n            <div className='EditorFeaturesTiles'>\r\n                <div/> \r\n                <script>setProjectInProgress(true);</script>\r\n                <ImagesDropZone/>\r\n                {/* <div className='SocialMediaWrapper'>\r\n                    {getSocialMediaButtons({width: 30, height: 30})}\r\n                </div> */}\r\n                {/* {!projectInProgress && <TextButton\r\n                    label={'Get Started'}\r\n                    onClick={startProject}\r\n                    externalClassName={'get-started-button'}\r\n                 />}  */}\r\n            </div> \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MainView;\r\n","import React, {useEffect, useState} from 'react'\r\nimport './GenericYesNoPopup.scss'\r\nimport {TextButton} from \"../../Common/TextButton/TextButton\";\r\nimport {ContextManager} from \"../../../logic/context/ContextManager\";\r\nimport {ContextType} from \"../../../data/enums/ContextType\";\r\n\r\ninterface IProps {\r\n    title: string;\r\n    renderContent: () => any;\r\n    acceptLabel?: string;\r\n    onAccept?: () => any;\r\n    skipAcceptButton?: boolean;\r\n    disableAcceptButton?: boolean;\r\n    rejectLabel?: string;\r\n    onReject?: () => any;\r\n    skipRejectButton?: boolean;\r\n    disableRejectButton?: boolean;\r\n}\r\n\r\nexport const GenericYesNoPopup: React.FC<IProps> = (\r\n    {\r\n        title,\r\n        renderContent,\r\n        acceptLabel,\r\n        onAccept,\r\n        skipAcceptButton,\r\n        disableAcceptButton,\r\n        rejectLabel,\r\n        onReject,\r\n        skipRejectButton,\r\n        disableRejectButton\r\n    }) => {\r\n    \r\n    const [status, setMountStatus] = useState(false);\r\n    useEffect(() => {\r\n        if (!status) {\r\n            ContextManager.switchCtx(ContextType.POPUP);\r\n            setMountStatus(true);\r\n        }\r\n    }, [status]);\r\n\r\n    return (\r\n        <div className=\"GenericYesNoPopup\">\r\n            <div className=\"Header\">\r\n                {title}\r\n            </div>\r\n            <div className=\"Content\">\r\n                {renderContent()}\r\n            </div>\r\n            <div className=\"Footer\">\r\n                {!skipAcceptButton && <TextButton\r\n                    label={!!acceptLabel ? acceptLabel : \"YES\"}\r\n                    onClick={onAccept}\r\n                    externalClassName={\"accept\"}\r\n                    isDisabled={disableAcceptButton}\r\n                />}\r\n                {!skipRejectButton && <TextButton\r\n                    label={!!rejectLabel ? rejectLabel : \"NO, THANKS\"}\r\n                    onClick={onReject}\r\n                    externalClassName={\"reject\"}\r\n                    isDisabled={disableRejectButton}\r\n                />}\r\n            </div>\r\n        </div>\r\n    )\r\n};","export class YOLOAnnotationsLoadingError extends Error {\r\n    constructor(message) {\r\n        super(message);\r\n        this.name = \"YOLOAnnotationsLoadingError\";\r\n    }\r\n}\r\n\r\nexport class YOLOLabelsReadingError extends YOLOAnnotationsLoadingError {\r\n    constructor() {\r\n        super(\"Unexpected error occurred during reading label names from labels.txt file\");\r\n        this.name = \"YOLOLabelsLoadingError\";\r\n    }\r\n}\r\n\r\nexport class NoLabelNamesFileProvidedError extends YOLOAnnotationsLoadingError {\r\n    constructor() {\r\n        super(\"For YOLO labels to be loaded correctly, labels.txt file is required\");\r\n        this.name = \"NoLabelNamesFileProvidedError\";\r\n    }\r\n}\r\n\r\nexport class LabelNamesNotUniqueError extends YOLOAnnotationsLoadingError {\r\n    constructor() {\r\n        super(\"Label names listed in labels.txt file should be unique\");\r\n        this.name = \"LabelNamesNotUniqueError\";\r\n    }\r\n}\r\n\r\nexport class AnnotationsParsingError extends YOLOAnnotationsLoadingError {\r\n    constructor(imageName: string) {\r\n        super(`Unexpected error occurred during parsing of ${imageName} annotations file`);\r\n        this.name = \"AnnotationsParsingError\";\r\n    }\r\n}","import {LabelName, LabelRect} from \"../../../store/labels/types\";\r\nimport {LabelUtil} from \"../../../utils/LabelUtil\";\r\nimport {AnnotationsParsingError, LabelNamesNotUniqueError} from \"./YOLOErrors\";\r\nimport {ISize} from \"../../../interfaces/ISize\";\r\nimport {uniq} from \"lodash\";\r\n\r\nexport class YOLOUtils {\r\n    public static parseLabelsNamesFromString(content: string): LabelName[] {\r\n        const labelNames: string[] = content\r\n            .split(/[\\r\\n]/)\r\n            .filter(Boolean)\r\n            .map((name: string) => name.replace(/\\s/g, \"\"))\r\n\r\n        if (uniq(labelNames).length !== labelNames.length) {\r\n            throw new LabelNamesNotUniqueError()\r\n        }\r\n\r\n        return labelNames\r\n            .map((name: string) => LabelUtil.createLabelName(name))\r\n    }\r\n\r\n    public static loadLabelsList(fileData: File, onSuccess: (labels: LabelName[]) => any, onFailure: () => any) {\r\n        const reader = new FileReader();\r\n        reader.onloadend = function (evt: any) {\r\n            const content: string = evt.target.result;\r\n            const labelNames = YOLOUtils.parseLabelsNamesFromString(content);\r\n            onSuccess(labelNames);\r\n        };\r\n        reader.onerror = () => onFailure();\r\n        reader.readAsText(fileData);\r\n    }\r\n\r\n    public static parseYOLOAnnotationsFromString(\r\n        rawAnnotations: string,\r\n        labelNames: LabelName[],\r\n        imageSize: ISize,\r\n        imageName: string\r\n    ): LabelRect[] {\r\n        return rawAnnotations\r\n            .split(/[\\r\\n]/)\r\n            .filter(Boolean)\r\n            .map((rawAnnotation: string) => YOLOUtils.parseYOLOAnnotationFromString(\r\n                rawAnnotation, labelNames, imageSize, imageName\r\n            ))\r\n    }\r\n\r\n    public static parseYOLOAnnotationFromString(\r\n        rawAnnotation: string,\r\n        labelNames: LabelName[],\r\n        imageSize: ISize,\r\n        imageName: string\r\n    ): LabelRect {\r\n        const components = rawAnnotation.split(\" \");\r\n        if (!YOLOUtils.validateYOLOAnnotationComponents(components, labelNames.length)) {\r\n            throw new AnnotationsParsingError(imageName);\r\n        }\r\n        const labelIndex: number = parseInt(components[0]);\r\n        const labelId: string = labelNames[labelIndex].id;\r\n        const rectX: number = parseFloat(components[1]);\r\n        const rectY: number = parseFloat(components[2]);\r\n        const rectWidth: number = parseFloat(components[3]);\r\n        const rectHeight: number = parseFloat(components[4]);\r\n        const rect = {\r\n            x: (rectX - rectWidth /2) * imageSize.width,\r\n            y: (rectY - rectHeight /2) * imageSize.height,\r\n            width: rectWidth * imageSize.width,\r\n            height: rectHeight * imageSize.height\r\n        }\r\n        return LabelUtil.createLabelRect(labelId, rect);\r\n    }\r\n\r\n    public static validateYOLOAnnotationComponents(components: string[], labelNamesCount: number): boolean {\r\n        const validateCoordinateValue = (rawValue: string): boolean => {\r\n            const floatValue: number = Number(rawValue);\r\n            return !isNaN(floatValue) && 0.0 <= floatValue && floatValue <= 1.0;\r\n        }\r\n        const validateLabelIdx = (rawValue: string): boolean => {\r\n            const intValue: number = parseInt(rawValue);\r\n            return !isNaN(intValue) && 0 <= intValue && intValue < labelNamesCount;\r\n        }\r\n\r\n        return [\r\n            components.length === 5,\r\n            validateLabelIdx(components[0]),\r\n            validateCoordinateValue(components[1]),\r\n            validateCoordinateValue(components[2]),\r\n            validateCoordinateValue(components[3]),\r\n            validateCoordinateValue(components[4])\r\n        ].every(Boolean)\r\n    }\r\n}","import React, {useState} from 'react'\r\nimport './LoadLabelNamesPopup.scss'\r\nimport {AppState} from \"../../../store\";\r\nimport {connect} from \"react-redux\";\r\nimport {updateLabelNames} from \"../../../store/labels/actionCreators\";\r\nimport {GenericYesNoPopup} from \"../GenericYesNoPopup/GenericYesNoPopup\";\r\nimport {PopupWindowType} from \"../../../data/enums/PopupWindowType\";\r\nimport {updateActivePopupType} from \"../../../store/general/actionCreators\";\r\nimport {useDropzone} from \"react-dropzone\";\r\nimport {AcceptedFileType} from \"../../../data/enums/AcceptedFileType\";\r\nimport {LabelName} from \"../../../store/labels/types\";\r\nimport {YOLOUtils} from \"../../../logic/import/yolo/YOLOUtils\";\r\n\r\ninterface IProps {\r\n    updateActivePopupType: (activePopupType: PopupWindowType) => any;\r\n    updateLabels: (labels: LabelName[]) => any;\r\n}\r\n\r\nconst LoadLabelNamesPopup: React.FC<IProps> = ({updateActivePopupType, updateLabels}) => {\r\n    const [labelsList, setLabelsList] = useState([]);\r\n    const [invalidFileLoadedStatus, setInvalidFileLoadedStatus] = useState(false);\r\n\r\n    const {acceptedFiles, getRootProps, getInputProps} = useDropzone({\r\n        accept: AcceptedFileType.TEXT,\r\n        multiple: false,\r\n        onDrop: (acceptedFiles) => {\r\n            if (acceptedFiles.length === 1) {\r\n                YOLOUtils.loadLabelsList(acceptedFiles[0], onSuccess, onFailure);\r\n            }\r\n        }\r\n    });\r\n\r\n    const onSuccess = (labelsList: LabelName[]) => {\r\n        setLabelsList(labelsList);\r\n        setInvalidFileLoadedStatus(false);\r\n    };\r\n\r\n    const onFailure = () => {\r\n        setInvalidFileLoadedStatus(true);\r\n    };\r\n\r\n    const onAccept = () => {\r\n        if (labelsList.length > 0) {\r\n            updateLabels(labelsList);\r\n        }\r\n    };\r\n\r\n    const onReject = () => {\r\n        updateActivePopupType(PopupWindowType.INSERT_LABEL_NAMES);\r\n    };\r\n\r\n    const getDropZoneContent = () => {\r\n        if (invalidFileLoadedStatus)\r\n            return <>\r\n                <input {...getInputProps()} />\r\n                <img\r\n                    draggable={false}\r\n                    alt={\"upload\"}\r\n                    src={\"ico/box-opened.png\"}\r\n                />\r\n                <p className=\"extraBold\">Loading of labels file was unsuccessful</p>\r\n                <p className=\"extraBold\">Try again</p>\r\n            </>;\r\n        else if (acceptedFiles.length === 0)\r\n            return <>\r\n                <input {...getInputProps()} />\r\n                <img\r\n                    draggable={false}\r\n                    alt={\"upload\"}\r\n                    src={\"ico/box-opened.png\"}\r\n                />\r\n                <p className=\"extraBold\">Drop labels file</p>\r\n                <p>or</p>\r\n                <p className=\"extraBold\">Click here to select it</p>\r\n            </>;\r\n        else if (labelsList.length === 1)\r\n            return <>\r\n                <img\r\n                    draggable={false}\r\n                    alt={\"uploaded\"}\r\n                    src={\"ico/box-closed.png\"}\r\n                />\r\n                <p className=\"extraBold\">only 1 label found</p>\r\n            </>;\r\n        else\r\n            return <>\r\n                <img\r\n                    draggable={false}\r\n                    alt={\"uploaded\"}\r\n                    src={\"ico/box-closed.png\"}\r\n                />\r\n                <p className=\"extraBold\">{labelsList.length} labels found</p>\r\n            </>;\r\n    };\r\n\r\n    const renderContent = () => {\r\n        return(<div className=\"LoadLabelsPopupContent\">\r\n            <div className=\"Message\">\r\n                Load a text file with a list of labels you are planning to use. The names of\r\n                each label should be separated by new line. If you don't have a prepared file, no problem. You can\r\n                create your own list now.\r\n            </div>\r\n            <div {...getRootProps({className: 'DropZone'})}>\r\n                {getDropZoneContent()}\r\n            </div>\r\n        </div>);\r\n    };\r\n\r\n    return(\r\n        <GenericYesNoPopup\r\n            title={\"Load file with labels description\"}\r\n            renderContent={renderContent}\r\n            acceptLabel={\"Start project\"}\r\n            onAccept={onAccept}\r\n            disableAcceptButton={labelsList.length === 0}\r\n            rejectLabel={\"Create labels list\"}\r\n            onReject={onReject}\r\n        />\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    updateActivePopupType,\r\n    updateLabels: updateLabelNames\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(LoadLabelNamesPopup);","import React from 'react';\r\nimport './ColorSelectorView.scss'\r\n\r\ninterface IProps {\r\n    color: string;\r\n    onClick: () => any;\r\n}\r\n\r\nexport const ColorSelectorView: React.FC<IProps> = ({color, onClick}) => {\r\n    return <div\r\n        className={'ColorSelectorView'}\r\n        style={{\r\n            backgroundColor: color\r\n        }}\r\n        onClick={onClick}\r\n    >\r\n        <img\r\n            draggable={false}\r\n            alt={'refresh'}\r\n            src={'ico/refresh.png'}\r\n        />\r\n    </div>\r\n}\r\n","import {INotification} from '../store/notifications/types';\r\nimport {v4 as uuidv4} from 'uuid';\r\nimport {NotificationType} from '../data/enums/NotificationType';\r\nimport {NotificationContent} from \"../data/info/NotificationsData\";\r\n\r\nexport class NotificationUtil {\r\n    public static createErrorNotification(content: NotificationContent): INotification {\r\n        return {\r\n            id: uuidv4(),\r\n            type: NotificationType.ERROR,\r\n            header: content.header,\r\n            description: content.description\r\n        }\r\n    }\r\n\r\n    public static createMessageNotification(content: NotificationContent): INotification {\r\n        return {\r\n            id: uuidv4(),\r\n            type: NotificationType.MESSAGE,\r\n            header: content.header,\r\n            description: content.description\r\n        }\r\n    }\r\n\r\n    public static createWarningNotification(content: NotificationContent): INotification {\r\n        return {\r\n            id: uuidv4(),\r\n            type: NotificationType.WARNING,\r\n            header: content.header,\r\n            description: content.description\r\n        }\r\n    }\r\n}\r\n","export enum Notification {\r\n    EMPTY_LABEL_NAME_ERROR = 0,\r\n    NON_UNIQUE_LABEL_NAMES_ERROR = 1\r\n}\r\n","import {Notification} from '../enums/Notification';\r\n\r\nexport type NotificationContent = {\r\n    header: string;\r\n    description: string;\r\n}\r\n\r\nexport type ExportFormatDataMap = Record<Notification, NotificationContent>;\r\n\r\nexport const NotificationsDataMap = {\r\n    [Notification.EMPTY_LABEL_NAME_ERROR]: {\r\n        header: 'Empty label name',\r\n        description: \"Looks like you didn't assign name to one of your labels. Unfortunately it is mandatory for \" +\r\n            'every label to have unique name value. Insert correct name or delete empty label and try again.'\r\n    },\r\n    [Notification.NON_UNIQUE_LABEL_NAMES_ERROR]: {\r\n        header: 'Non unique label names',\r\n        description: 'Looks like not all your label names are unique. Unique names are necessary to guarantee correct' +\r\n            ' data export when you complete your work. Make your names unique and try again.'\r\n    }\r\n}\r\n","import React, {useState} from 'react'\r\nimport './InsertLabelNamesPopup.scss'\r\nimport {GenericYesNoPopup} from '../GenericYesNoPopup/GenericYesNoPopup';\r\nimport {PopupWindowType} from '../../../data/enums/PopupWindowType';\r\nimport {updateLabelNames} from '../../../store/labels/actionCreators';\r\nimport {updateActivePopupType, updatePerClassColorationStatus} from '../../../store/general/actionCreators';\r\nimport {AppState} from '../../../store';\r\nimport {connect} from 'react-redux';\r\nimport Scrollbars from 'react-custom-scrollbars';\r\nimport {ImageButton} from '../../Common/ImageButton/ImageButton';\r\nimport {LabelName} from '../../../store/labels/types';\r\nimport {LabelUtil} from '../../../utils/LabelUtil';\r\nimport {LabelsSelector} from '../../../store/selectors/LabelsSelector';\r\nimport {LabelActions} from '../../../logic/actions/LabelActions';\r\nimport {ColorSelectorView} from './ColorSelectorView/ColorSelectorView';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {Settings} from '../../../settings/Settings';\r\nimport {withStyles} from '@material-ui/core';\r\nimport {reject, sample, filter, uniq} from 'lodash';\r\nimport {ProjectType} from '../../../data/enums/ProjectType';\r\nimport {submitNewNotification} from '../../../store/notifications/actionCreators';\r\nimport {INotification} from '../../../store/notifications/types';\r\nimport {NotificationUtil} from '../../../utils/NotificationUtil';\r\nimport {NotificationsDataMap} from '../../../data/info/NotificationsData';\r\nimport {Notification} from '../../../data/enums/Notification';\r\n\r\nconst StyledTextField = withStyles({\r\n    root: {\r\n        '& .MuiInputBase-root': {\r\n            color: 'white',\r\n        },\r\n        '& label': {\r\n            color: 'white',\r\n        },\r\n        '& .MuiInput-underline:before': {\r\n            borderBottomColor: 'white',\r\n        },\r\n        '& .MuiInput-underline:hover:before': {\r\n            borderBottomColor: 'white',\r\n        },\r\n        '& label.Mui-focused': {\r\n            color: Settings.SECONDARY_COLOR,\r\n        },\r\n        '& .MuiInput-underline:after': {\r\n            borderBottomColor: Settings.SECONDARY_COLOR,\r\n        }\r\n    },\r\n})(TextField);\r\n\r\ninterface IProps {\r\n    updateActivePopupTypeAction: (activePopupType: PopupWindowType) => any;\r\n    updateLabelNamesAction: (labels: LabelName[]) => any;\r\n    updatePerClassColorationStatusAction: (updatePerClassColoration: boolean) => any;\r\n    submitNewNotificationAction: (notification: INotification) => any;\r\n    isUpdate: boolean;\r\n    projectType: ProjectType;\r\n    enablePerClassColoration: boolean;\r\n}\r\n\r\nconst InsertLabelNamesPopup: React.FC<IProps> = (\r\n    {\r\n        updateActivePopupTypeAction,\r\n        updateLabelNamesAction,\r\n        updatePerClassColorationStatusAction,\r\n        submitNewNotificationAction,\r\n        isUpdate,\r\n        projectType,\r\n        enablePerClassColoration\r\n    }) => {\r\n    const [labelNames, setLabelNames] = useState(LabelsSelector.getLabelNames());\r\n\r\n    const validateEmptyLabelNames = (): boolean => {\r\n        const emptyLabelNames = filter(labelNames, (labelName: LabelName) => labelName.name === '')\r\n        return emptyLabelNames.length === 0\r\n    }\r\n\r\n    const validateNonUniqueLabelNames = (): boolean => {\r\n        const uniqueLabelNames = uniq(labelNames.map((labelName: LabelName) => labelName.name))\r\n        return uniqueLabelNames.length === labelNames.length\r\n    }\r\n\r\n    const callbackWithLabelNamesValidation = (callback: () => any): () => any => {\r\n        return () => {\r\n            if (!validateEmptyLabelNames()) {\r\n                submitNewNotificationAction(NotificationUtil\r\n                    .createErrorNotification(NotificationsDataMap[Notification.EMPTY_LABEL_NAME_ERROR]))\r\n                return\r\n            }\r\n            if (validateNonUniqueLabelNames()) {\r\n                callback()\r\n            } else {\r\n                submitNewNotificationAction(NotificationUtil\r\n                    .createErrorNotification(NotificationsDataMap[Notification.NON_UNIQUE_LABEL_NAMES_ERROR]))\r\n            }\r\n        }\r\n    }\r\n\r\n    const addLabelNameCallback = () => {\r\n        const newLabelNames = [\r\n            ...labelNames,\r\n            LabelUtil.createLabelName('')\r\n        ]\r\n        setLabelNames(newLabelNames);\r\n    };\r\n\r\n    const safeAddLabelNameCallback = () => callbackWithLabelNamesValidation(addLabelNameCallback)()\r\n\r\n    const deleteLabelNameCallback = (id: string) => {\r\n        const newLabelNames = reject(labelNames, {id});\r\n        setLabelNames(newLabelNames);\r\n    };\r\n\r\n    const togglePerClassColorationCallback = () => {\r\n        updatePerClassColorationStatusAction(!enablePerClassColoration)\r\n    }\r\n\r\n    const changeLabelNameColorCallback = (id: string) => {\r\n        const newLabelNames = labelNames.map((labelName: LabelName) => {\r\n            return labelName.id === id ? {...labelName, color: sample(Settings.LABEL_COLORS_PALETTE)} : labelName\r\n        });\r\n        setLabelNames(newLabelNames);\r\n    }\r\n\r\n    const onKeyUpCallback = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === 'Enter') {\r\n            safeAddLabelNameCallback()\r\n        }\r\n    }\r\n\r\n    const labelInputs = labelNames.map((labelName: LabelName) => {\r\n        const onChangeCallback = (event: React.ChangeEvent<HTMLInputElement>) =>\r\n            onChange(labelName.id, event.target.value);\r\n        const onDeleteCallback = () => deleteLabelNameCallback(labelName.id);\r\n        const onChangeColorCallback = () => changeLabelNameColorCallback(labelName.id);\r\n        return <div className='LabelEntry' key={labelName.id}>\r\n            <StyledTextField\r\n                id={'key'}\r\n                autoComplete={'off'}\r\n                autoFocus={true}\r\n                type={'text'}\r\n                margin={'dense'}\r\n                label={'Insert label'}\r\n                onKeyUp={onKeyUpCallback}\r\n                value={labelName.name}\r\n                onChange={onChangeCallback}\r\n                style = {{width: 280}}\r\n                InputLabelProps={{\r\n                    shrink: true,\r\n                }}\r\n            />\r\n            {projectType === ProjectType.OBJECT_DETECTION && enablePerClassColoration && <ColorSelectorView\r\n                color={labelName.color}\r\n                onClick={onChangeColorCallback}\r\n            />}\r\n            <ImageButton\r\n                image={'ico/trash.png'}\r\n                imageAlt={'remove_label'}\r\n                buttonSize={{ width: 30, height: 30 }}\r\n                onClick={onDeleteCallback}\r\n            />\r\n        </div>\r\n    });\r\n\r\n    const onChange = (id: string, value: string) => {\r\n        const newLabelNames = labelNames.map((labelName: LabelName) => {\r\n            return labelName.id === id ? {\r\n                ...labelName, name: value\r\n            } : labelName\r\n        })\r\n        setLabelNames(newLabelNames);\r\n    };\r\n\r\n    const onCreateAcceptCallback = () => {\r\n        const nonEmptyLabelNames: LabelName[] = reject(labelNames,\r\n            (labelName: LabelName) => labelName.name.length === 0)\r\n        if (labelNames.length > 0) {\r\n            updateLabelNamesAction(nonEmptyLabelNames);\r\n        }\r\n        updateActivePopupTypeAction(null);\r\n    };\r\n\r\n    const safeOnCreateAcceptCallback = () => callbackWithLabelNamesValidation(onCreateAcceptCallback)();\r\n\r\n    const onUpdateAcceptCallback = () => {\r\n        const nonEmptyLabelNames: LabelName[] = reject(labelNames,\r\n            (labelName: LabelName) => labelName.name.length === 0)\r\n        const missingIds: string[] = LabelUtil.labelNamesIdsDiff(LabelsSelector.getLabelNames(), nonEmptyLabelNames);\r\n        LabelActions.removeLabelNames(missingIds);\r\n        updateLabelNamesAction(nonEmptyLabelNames);\r\n        updateActivePopupTypeAction(null);\r\n    };\r\n\r\n    const safeOnUpdateAcceptCallback = () => callbackWithLabelNamesValidation(onUpdateAcceptCallback)();\r\n\r\n    const onCreateRejectCallback = () => {\r\n        updateActivePopupTypeAction(PopupWindowType.LOAD_LABEL_NAMES);\r\n    };\r\n\r\n    const onUpdateRejectCallback = () => {\r\n        updateActivePopupTypeAction(null);\r\n    };\r\n\r\n    const renderContent = () => {\r\n        return (<div className='InsertLabelNamesPopup'>\r\n            <div className='LeftContainer'>\r\n                <ImageButton\r\n                    image={'ico/plus.png'}\r\n                    imageAlt={'plus'}\r\n                    buttonSize={{ width: 40, height: 40 }}\r\n                    padding={25}\r\n                    onClick={safeAddLabelNameCallback}\r\n                    externalClassName={'monochrome'}\r\n                />\r\n                {labelNames.length > 0 && <ImageButton\r\n                    image={enablePerClassColoration ? 'ico/colors-on.png' : 'ico/colors-off.png'}\r\n                    imageAlt={'per-class-coloration'}\r\n                    buttonSize={{ width: 40, height: 40 }}\r\n                    padding={15}\r\n                    onClick={togglePerClassColorationCallback}\r\n                    isActive={enablePerClassColoration}\r\n                    externalClassName={enablePerClassColoration ? '' : 'monochrome'}\r\n                />}\r\n            </div>\r\n            <div className='RightContainer'>\r\n                <div className='Message'>\r\n                    {\r\n                        isUpdate ?\r\n                            'You can now edit the label names you use to describe the objects in the photos. Use the ' +\r\n                            '+ button to add a new empty text field.' :\r\n                            'Before you start, you can create a list of labels you plan to assign to objects in your ' +\r\n                            'project. You can also choose to skip that part for now and define label names as you go.'\r\n                    }\r\n                </div>\r\n                <div className='LabelsContainer'>\r\n                    {Object.keys(labelNames).length !== 0 ? <Scrollbars>\r\n                        <div\r\n                            className='InsertLabelNamesPopupContent'\r\n                        >\r\n                            {labelInputs}\r\n                        </div>\r\n                    </Scrollbars> :\r\n                        <div\r\n                            className='EmptyList'\r\n                            onClick={addLabelNameCallback}\r\n                        >\r\n                            <img\r\n                                draggable={false}\r\n                                alt={'upload'}\r\n                                src={'ico/type-writer.png'}\r\n                            />\r\n                            <p className='extraBold'>Your label list is empty</p>\r\n                        </div>}\r\n                </div>\r\n            </div>\r\n        </div>);\r\n    };\r\n\r\n    return (\r\n        <GenericYesNoPopup\r\n            title={isUpdate ? 'Edit labels' : 'Create labels'}\r\n            renderContent={renderContent}\r\n            acceptLabel={isUpdate ? 'Accept' : 'Start project'}\r\n            onAccept={isUpdate ? safeOnUpdateAcceptCallback : safeOnCreateAcceptCallback}\r\n            rejectLabel={isUpdate ? 'Cancel' : 'Load labels from file'}\r\n            onReject={isUpdate ? onUpdateRejectCallback : onCreateRejectCallback}\r\n        />)\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    updateActivePopupTypeAction: updateActivePopupType,\r\n    updateLabelNamesAction: updateLabelNames,\r\n    updatePerClassColorationStatusAction: updatePerClassColorationStatus,\r\n    submitNewNotificationAction: submitNewNotification\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    projectType: state.general.projectData.type,\r\n    enablePerClassColoration: state.general.enablePerClassColoration\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(InsertLabelNamesPopup);\r\n","import {INotification, NotificationsActionType} from './types';\r\nimport {Action} from '../Actions';\r\n\r\nexport function submitNewNotification(notification: INotification): NotificationsActionType {\r\n    return {\r\n        type: Action.SUBMIT_NEW_NOTIFICATION,\r\n        payload: {\r\n            notification,\r\n        },\r\n    };\r\n}\r\n\r\n\r\nexport function deleteNotificationById(id: string): NotificationsActionType {\r\n    return {\r\n        type: Action.DELETE_NOTIFICATION_BY_ID,\r\n        payload: {\r\n            id,\r\n        },\r\n    };\r\n}\r\n","import React from 'react'\r\nimport './ExitProjectPopup.scss'\r\nimport {GenericYesNoPopup} from \"../GenericYesNoPopup/GenericYesNoPopup\";\r\nimport {\r\n    updateActiveImageIndex,\r\n    updateActiveLabelNameId,\r\n    updateFirstLabelCreatedFlag,\r\n    updateImageData,\r\n    updateLabelNames\r\n} from \"../../../store/labels/actionCreators\";\r\nimport {AppState} from \"../../../store\";\r\nimport {connect} from \"react-redux\";\r\nimport {ImageData, LabelName} from \"../../../store/labels/types\";\r\nimport {PopupActions} from \"../../../logic/actions/PopupActions\";\r\nimport {ProjectData} from \"../../../store/general/types\";\r\nimport {updateProjectData} from \"../../../store/general/actionCreators\";\r\n\r\ninterface IProps {\r\n    updateActiveImageIndex: (activeImageIndex: number) => any;\r\n    updateActiveLabelNameId: (activeLabelId: string) => any;\r\n    updateLabelNames: (labelNames: LabelName[]) => any;\r\n    updateImageData: (imageData: ImageData[]) => any;\r\n    updateFirstLabelCreatedFlag: (firstLabelCreatedFlag: boolean) => any;\r\n    updateProjectData: (projectData: ProjectData) => any;\r\n}\r\n\r\nconst ExitProjectPopup: React.FC<IProps> = (props) => {\r\n    const {\r\n        updateActiveLabelNameId,\r\n        updateLabelNames,\r\n        updateActiveImageIndex,\r\n        updateImageData,\r\n        updateFirstLabelCreatedFlag,\r\n        updateProjectData\r\n    } = props;\r\n\r\n    const renderContent = () => {\r\n        return(\r\n            <div className=\"ExitProjectPopupContent\">\r\n                <div className=\"Message\">\r\n                    Are you sure you want to leave the editor? You will permanently lose all your progress.\r\n                </div>\r\n            </div>\r\n        )\r\n    };\r\n\r\n    const onAccept = () => {\r\n        updateActiveLabelNameId(null);\r\n        updateLabelNames([]);\r\n        updateProjectData({type: null, name: \"my-project-name\"});\r\n        updateActiveImageIndex(null);\r\n        updateImageData([]);\r\n        updateFirstLabelCreatedFlag(false);\r\n        PopupActions.close();\r\n    };\r\n\r\n    const onReject = () => {\r\n        PopupActions.close();\r\n    };\r\n\r\n    return(\r\n        <GenericYesNoPopup\r\n            title={\"Exit project\"}\r\n            renderContent={renderContent}\r\n            acceptLabel={\"Exit\"}\r\n            onAccept={onAccept}\r\n            rejectLabel={\"Back\"}\r\n            onReject={onReject}\r\n        />)\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    updateActiveLabelNameId,\r\n    updateLabelNames,\r\n    updateProjectData,\r\n    updateActiveImageIndex,\r\n    updateImageData,\r\n    updateFirstLabelCreatedFlag\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(ExitProjectPopup);","import React from 'react'\r\nimport './LoadMoreImagesPopup.scss'\r\nimport {AppState} from \"../../../store\";\r\nimport {connect} from \"react-redux\";\r\nimport {addImageData} from \"../../../store/labels/actionCreators\";\r\nimport {GenericYesNoPopup} from \"../GenericYesNoPopup/GenericYesNoPopup\";\r\nimport {useDropzone} from \"react-dropzone\";\r\nimport {ImageData} from \"../../../store/labels/types\";\r\nimport {AcceptedFileType} from \"../../../data/enums/AcceptedFileType\";\r\nimport {PopupActions} from \"../../../logic/actions/PopupActions\";\r\nimport {ImageDataUtil} from \"../../../utils/ImageDataUtil\";\r\n\r\ninterface IProps {\r\n    addImageData: (imageData: ImageData[]) => any;\r\n}\r\n\r\nconst LoadMoreImagesPopup: React.FC<IProps> = ({addImageData}) => {\r\n    const {acceptedFiles, getRootProps, getInputProps} = useDropzone({\r\n        accept: AcceptedFileType.IMAGE\r\n    });\r\n\r\n    const onAccept = () => {\r\n        if (acceptedFiles.length > 0) {\r\n            addImageData(acceptedFiles.map((fileData:File) => ImageDataUtil.createImageDataFromFileData(fileData)));\r\n            PopupActions.close();\r\n        }\r\n    };\r\n\r\n    const onReject = () => {\r\n        PopupActions.close();\r\n    };\r\n\r\n    const getDropZoneContent = () => {\r\n        if (acceptedFiles.length === 0)\r\n            return <>\r\n                <input {...getInputProps()} />\r\n                <img\r\n                    draggable={false}\r\n                    alt={\"upload\"}\r\n                    src={\"ico/box-opened.png\"}\r\n                />\r\n                <p className=\"extraBold\">Add new images</p>\r\n                <p>or</p>\r\n                <p className=\"extraBold\">Click here to select them</p>\r\n            </>;\r\n        else if (acceptedFiles.length === 1)\r\n            return <>\r\n                <img\r\n                    draggable={false}\r\n                    alt={\"uploaded\"}\r\n                    src={\"ico/box-closed.png\"}\r\n                />\r\n                <p className=\"extraBold\">1 new image loaded</p>\r\n            </>;\r\n        else\r\n            return <>\r\n                <img\r\n                    draggable={false}\r\n                    key={1}\r\n                    alt={\"uploaded\"}\r\n                    src={\"ico/box-closed.png\"}\r\n                />\r\n                <p key={2} className=\"extraBold\">{acceptedFiles.length} new images loaded</p>\r\n            </>;\r\n    };\r\n\r\n    const renderContent = () => {\r\n        return(<div className=\"LoadMoreImagesPopupContent\">\r\n            <div {...getRootProps({className: 'DropZone'})}>\r\n                {getDropZoneContent()}\r\n            </div>\r\n        </div>);\r\n    };\r\n\r\n    return(\r\n        <GenericYesNoPopup\r\n            title={\"Load more images\"}\r\n            renderContent={renderContent}\r\n            acceptLabel={\"Load\"}\r\n            disableAcceptButton={acceptedFiles.length < 1}\r\n            onAccept={onAccept}\r\n            rejectLabel={\"Cancel\"}\r\n            onReject={onReject}\r\n        />\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    addImageData\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(LoadMoreImagesPopup);","import {DetectedObject} from '@tensorflow-models/coco-ssd';\r\nimport {ImageData, LabelName, LabelRect} from '../../store/labels/types';\r\nimport {LabelsSelector} from '../../store/selectors/LabelsSelector';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport {store} from '../../index';\r\nimport {updateImageDataById} from '../../store/labels/actionCreators';\r\nimport {ObjectDetector} from '../../ai/ObjectDetector';\r\nimport {ImageRepository} from '../imageRepository/ImageRepository';\r\nimport {LabelStatus} from '../../data/enums/LabelStatus';\r\nimport {findLast} from 'lodash';\r\nimport {updateSuggestedLabelList} from '../../store/ai/actionCreators';\r\nimport {PopupWindowType} from '../../data/enums/PopupWindowType';\r\nimport {updateActivePopupType} from '../../store/general/actionCreators';\r\nimport {AISelector} from '../../store/selectors/AISelector';\r\nimport {AIActions} from './AIActions';\r\n\r\nexport class AIObjectDetectionActions {\r\n    public static detectRectsForActiveImage(): void {\r\n        const activeImageData: ImageData = LabelsSelector.getActiveImageData();\r\n        AIObjectDetectionActions.detectRects(activeImageData.id, ImageRepository.getById(activeImageData.id))\r\n    }\r\n\r\n    public static detectRects(imageId: string, image: HTMLImageElement): void {\r\n        if (LabelsSelector.getImageDataById(imageId).isVisitedByObjectDetector || !AISelector.isAIObjectDetectorModelLoaded())\r\n            return;\r\n\r\n        store.dispatch(updateActivePopupType(PopupWindowType.LOADER));\r\n        ObjectDetector.predict(image, (predictions: DetectedObject[]) => {\r\n            console.log('here in ai object')\r\n            const suggestedLabelNames = AIObjectDetectionActions.extractNewSuggestedLabelNames(LabelsSelector.getLabelNames(), predictions);\r\n            const rejectedLabelNames = AISelector.getRejectedSuggestedLabelList();\r\n            const newlySuggestedNames = AIActions.excludeRejectedLabelNames(suggestedLabelNames, rejectedLabelNames);\r\n            if (newlySuggestedNames.length > 0) {\r\n                store.dispatch(updateSuggestedLabelList(newlySuggestedNames));\r\n                store.dispatch(updateActivePopupType(PopupWindowType.SUGGEST_LABEL_NAMES));\r\n            } else {\r\n                store.dispatch(updateActivePopupType(null));\r\n            }\r\n            AIObjectDetectionActions.saveRectPredictions(imageId, predictions);\r\n        })\r\n    }\r\n\r\n    public static saveRectPredictions(imageId: string, predictions: DetectedObject[]) {\r\n        const imageData: ImageData = LabelsSelector.getImageDataById(imageId);\r\n        const predictedLabels: LabelRect[] = AIObjectDetectionActions.mapPredictionsToRectLabels(predictions);\r\n        const nextImageData: ImageData = {\r\n            ...imageData,\r\n            labelRects: imageData.labelRects.concat(predictedLabels),\r\n            isVisitedByObjectDetector: true\r\n        };\r\n        store.dispatch(updateImageDataById(imageData.id, nextImageData));\r\n    }\r\n\r\n    private static mapPredictionsToRectLabels(predictions: DetectedObject[]): LabelRect[] {\r\n        return predictions.map((prediction: DetectedObject) => {\r\n            return {\r\n                id: uuidv4(),\r\n                labelIndex: null,\r\n                labelId: null,\r\n                rect: {\r\n                    x: prediction.bbox[0],\r\n                    y: prediction.bbox[1],\r\n                    width: prediction.bbox[2],\r\n                    height: prediction.bbox[3],\r\n                },\r\n                isCreatedByAI: true,\r\n                status: LabelStatus.UNDECIDED,\r\n                suggestedLabel: prediction.class\r\n            }\r\n        })\r\n    }\r\n\r\n    public static extractNewSuggestedLabelNames(labels: LabelName[], predictions: DetectedObject[]): string[] {\r\n        return predictions.reduce((acc: string[], prediction: DetectedObject) => {\r\n            if (!acc.includes(prediction.class) && !findLast(labels, {name: prediction.class})) {\r\n                acc.push(prediction.class)\r\n            }\r\n            return acc;\r\n        }, [])\r\n    }\r\n\r\n    public static acceptAllSuggestedRectLabels(imageData: ImageData) {\r\n        const newImageData: ImageData = {\r\n            ...imageData,\r\n            labelRects: imageData.labelRects.map((labelRect: LabelRect) => {\r\n                const labelName: LabelName = findLast(LabelsSelector.getLabelNames(), {name: labelRect.suggestedLabel});\r\n                return {\r\n                    ...labelRect,\r\n                    status: LabelStatus.ACCEPTED,\r\n                    labelId: !!labelName ? labelName.id : labelRect.labelId\r\n                }\r\n            })\r\n        };\r\n        store.dispatch(updateImageDataById(newImageData.id, newImageData));\r\n    }\r\n\r\n    public static rejectAllSuggestedRectLabels(imageData: ImageData) {\r\n        const newImageData: ImageData = {\r\n            ...imageData,\r\n            labelRects: imageData.labelRects.filter((labelRect: LabelRect) => labelRect.status === LabelStatus.ACCEPTED)\r\n        };\r\n        store.dispatch(updateImageDataById(newImageData.id, newImageData));\r\n    }\r\n}\r\n","import '@tensorflow/tfjs-backend-cpu';\r\nimport * as cocoSsd from '@tensorflow-models/coco-ssd';\r\nimport {DetectedObject, ObjectDetection} from '@tensorflow-models/coco-ssd';\r\nimport {store} from '../index';\r\nimport {updateObjectDetectorStatus} from '../store/ai/actionCreators';\r\nimport {LabelType} from '../data/enums/LabelType';\r\nimport {LabelsSelector} from '../store/selectors/LabelsSelector';\r\nimport {AIObjectDetectionActions} from '../logic/actions/AIObjectDetectionActions';\r\nimport {updateActiveLabelType} from '../store/labels/actionCreators';\r\n\r\nexport class ObjectDetector {\r\n    private static model: ObjectDetection;\r\n\r\n    public static loadModel(callback?: () => any) {\r\n        cocoSsd\r\n            .load()\r\n            .then((model: ObjectDetection) => {\r\n                console.log(\"I am here\");\r\n                ObjectDetector.model = model;\r\n                store.dispatch(updateObjectDetectorStatus(true));\r\n                store.dispatch(updateActiveLabelType(LabelType.RECT));\r\n                const activeLabelType: LabelType = LabelsSelector.getActiveLabelType();\r\n                if (activeLabelType === LabelType.RECT) {\r\n                    AIObjectDetectionActions.detectRectsForActiveImage();\r\n                }\r\n                if (callback) {\r\n                    callback();\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                // TODO\r\n                throw new Error(error as string);\r\n            })\r\n    }\r\n\r\n    public static predict(image: HTMLImageElement, callback?: (predictions: DetectedObject[]) => any) {\r\n        if (!ObjectDetector.model) return;\r\n\r\n        ObjectDetector.model\r\n            .detect(image)\r\n            .then((predictions: DetectedObject[]) => {\r\n                // console.log(\"preds\");\r\n                console.log(predictions);\r\n                if (callback) {\r\n                    callback(predictions)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                // TODO\r\n                throw new Error(error as string);\r\n            })\r\n    }\r\n}\r\n","export enum AIModel {\r\n    OBJECT_DETECTION = \"OBJECT_DETECTION\",\r\n    POSE_DETECTION = \"POSE_DETECTION\",\r\n    FORM_DETECTION = \"FORM_DETECTION\",\r\n    MASK_DETECTION = \"MASK_DETECTION\"\r\n\r\n}","import React, { useState } from \"react\";\r\nimport { PopupActions } from \"../../../logic/actions/PopupActions\";\r\nimport { GenericYesNoPopup } from \"../GenericYesNoPopup/GenericYesNoPopup\";\r\nimport { ObjectDetector } from \"../../../ai/ObjectDetector\";\r\nimport './LoadModelPopup.scss'\r\nimport { ClipLoader } from \"react-spinners\";\r\nimport { AIModel } from \"../../../data/enums/AIModel\";\r\nimport { PoseDetector } from \"../../../ai/PoseDetector\";\r\nimport { FormDetector } from \"../../../ai/FormDetector\";\r\nimport { MaskDetector } from \"../../../ai/MaskDetector\";\r\nimport { findLast } from \"lodash\";\r\nimport { CSSHelper } from \"../../../logic/helpers/CSSHelper\";\r\n\r\ninterface SelectableModel {\r\n    model: AIModel,\r\n    name: string,\r\n    flag: boolean\r\n}\r\n\r\nconst models: SelectableModel[] = [\r\n    // {\r\n    //     model: AIModel.OBJECT_DETECTION,\r\n    //     name: \"COCO SSD - object detection using rectangles\",\r\n    //     flag: false\r\n    // },\r\n    // {\r\n    //     model: AIModel.POSE_DETECTION,\r\n    //     name: \"POSE-NET - pose estimation using points\",\r\n    //     flag: false\r\n    // },\r\n    {\r\n        model: AIModel.FORM_DETECTION,\r\n        name: \"Object Detection\",\r\n        flag: false\r\n    },\r\n    {\r\n        model: AIModel.MASK_DETECTION,\r\n        name: \"Semantic Segmentation\",\r\n        flag: false\r\n    }\r\n];\r\n\r\nexport const LoadModelPopup: React.FC = () => {\r\n    const [modelIsLoadingStatus, setModelIsLoadingStatus] = useState(false);\r\n    const [selectedModelToLoad, updateSelectedModelToLoad] = useState(models);\r\n\r\n    const onAccept = () => {\r\n        setModelIsLoadingStatus(true);\r\n        switch (extractSelectedModel()) {\r\n            case AIModel.POSE_DETECTION:\r\n                PoseDetector.loadModel(() => {\r\n                    PopupActions.close();\r\n                });\r\n                break;\r\n            case AIModel.OBJECT_DETECTION:\r\n                ObjectDetector.loadModel(() => {\r\n                    PopupActions.close();\r\n                });\r\n                break;\r\n            case AIModel.FORM_DETECTION:\r\n                FormDetector.loadModel(() => {\r\n                    PopupActions.close();\r\n                });\r\n                    break;\r\n            case AIModel.MASK_DETECTION:\r\n                MaskDetector.loadModel(() => {\r\n                    PopupActions.close();\r\n                });\r\n                    break;\r\n        }\r\n    };\r\n\r\n    const extractSelectedModel = (): AIModel => {\r\n        const model: SelectableModel = findLast(selectedModelToLoad, { flag: true });\r\n        if (!!model) {\r\n            return model.model\r\n        } else {\r\n            return null;\r\n        }\r\n    };\r\n\r\n    const onSelect = (selectedModel: AIModel) => {\r\n        const nextSelectedModelToLoad: SelectableModel[] = selectedModelToLoad.map((model: SelectableModel) => {\r\n            if (model.model === selectedModel)\r\n                return {\r\n                    ...model,\r\n                    flag: !model.flag\r\n                };\r\n            else\r\n                return {\r\n                    ...model,\r\n                    flag: false\r\n                };\r\n        });\r\n        updateSelectedModelToLoad(nextSelectedModelToLoad);\r\n    };\r\n\r\n    const getOptions = () => {\r\n        return selectedModelToLoad.map((entry: SelectableModel) => {\r\n            return <div\r\n                className=\"OptionsItem\"\r\n                onClick={() => onSelect(entry.model)}\r\n                key={entry.model}\r\n            >\r\n                {entry.flag ?\r\n                    <img\r\n                        draggable={false}\r\n                        src={\"ico/checkbox-checked.png\"}\r\n                        alt={\"checked\"}\r\n                    /> :\r\n                    <img\r\n                        draggable={false}\r\n                        src={\"ico/checkbox-unchecked.png\"}\r\n                        alt={\"unchecked\"}\r\n                    />}\r\n                {entry.name}\r\n            </div>\r\n        })\r\n    };\r\n\r\n    const onReject = () => {\r\n        PopupActions.close();\r\n    };\r\n\r\n    const renderContent = () => {\r\n        return <div className=\"LoadModelPopupContent\">\r\n            <div className=\"Message\">\r\n                To speed up your work, AI will try to mark objects on your images.\r\n            </div>\r\n            <div className=\"Companion\">\r\n                {modelIsLoadingStatus ?\r\n                    <ClipLoader\r\n                        size={40}\r\n                        color={CSSHelper.getLeadingColor()}\r\n                        loading={true}\r\n                    /> :\r\n                    <div className=\"Options\">\r\n                        {getOptions()}\r\n                    </div>\r\n                }\r\n            </div>\r\n        </div>\r\n    };\r\n\r\n    return (\r\n        <GenericYesNoPopup\r\n            title={\"Say hello to AI\"}\r\n            renderContent={renderContent}\r\n            acceptLabel={\"Use model!\"}\r\n            onAccept={onAccept}\r\n            disableAcceptButton={modelIsLoadingStatus || !extractSelectedModel()}\r\n            rejectLabel={\"I'm going on my own\"}\r\n            onReject={onReject}\r\n            disableRejectButton={modelIsLoadingStatus}\r\n        />\r\n    );\r\n};","export enum AnnotationFormatType {\r\n    YOLO = 'YOLO',\r\n    COCO = 'COCO',\r\n    CSV = 'CSV',\r\n    JSON = 'JSON',\r\n    VOC = 'VOC',\r\n    VGG = 'VGG'\r\n}","export type PartitionResult<T> = {\r\n    pass: T[]\r\n    fail: T[]\r\n}\r\n\r\nexport class ArrayUtilAmbiguousMatchError extends Error {\r\n    constructor() {\r\n        super('Given predicate results in more than one value being matched.');\r\n        this.name = 'ArrayUtilAmbiguousMatchError';\r\n    }\r\n}\r\n\r\nexport class EmptyArrayError extends Error {\r\n    constructor() {\r\n        super('Given array is empty.');\r\n        this.name = 'EmptyArrayError';\r\n    }\r\n}\r\n\r\nexport class NegativeIndexError extends Error {\r\n    constructor() {\r\n        super('Index can not be negative.');\r\n        this.name = 'NegativeIndexError';\r\n    }\r\n}\r\n\r\nexport class ArrayUtil {\r\n    public static partition<T>(array: T[], predicate: (T) => boolean): PartitionResult<T> {\r\n        return array.reduce((acc: PartitionResult<T>, item: T) => {\r\n            if (predicate(item))\r\n                acc.pass.push(item)\r\n            else\r\n                acc.fail.push(item)\r\n            return acc\r\n        }, {pass: [], fail: []})\r\n    }\r\n\r\n    public static match<T, P>(array1: T[], array2: P[], predicate: (key: T, value: P) => boolean): [T, P][] {\r\n        return array1.reduce((acc: [T, P][], key: T) => {\r\n            const match = array2.filter((value: P) => predicate(key, value))\r\n            if (match.length === 1) {\r\n                acc.push([key, match[0]])\r\n            } else if (match.length > 1) {\r\n                throw new ArrayUtilAmbiguousMatchError()\r\n            }\r\n            return acc\r\n        }, [])\r\n    }\r\n\r\n    public static unzip<T, P>(array: [T, P][]): [T[], P[]] {\r\n        return array.reduce((acc: [T[], P[]], i: [T, P]) => {\r\n            acc[0].push(i[0]);\r\n            acc[1].push(i[1]);\r\n            return acc;\r\n        }, [[], []])\r\n    }\r\n\r\n    public static getByInfiniteIndex<T>(array: T[], index: number): T {\r\n        if (array.length === 0) {\r\n            throw new EmptyArrayError()\r\n        }\r\n        if (index < 0) {\r\n            throw new NegativeIndexError()\r\n        }\r\n        const boundedIndex: number = index % array.length\r\n        return array[boundedIndex]\r\n    }\r\n}\r\n","import React, {useState} from 'react'\r\nimport './SuggestLabelNamesPopup.scss'\r\nimport {AppState} from '../../../store';\r\nimport {connect} from 'react-redux';\r\nimport {updateRejectedSuggestedLabelList, updateSuggestedLabelList} from '../../../store/ai/actionCreators';\r\nimport {GenericYesNoPopup} from '../GenericYesNoPopup/GenericYesNoPopup';\r\nimport {PopupActions} from '../../../logic/actions/PopupActions';\r\nimport {AISelector} from '../../../store/selectors/AISelector';\r\nimport Scrollbars from 'react-custom-scrollbars';\r\nimport {LabelName} from '../../../store/labels/types';\r\nimport {updateLabelNames} from '../../../store/labels/actionCreators';\r\nimport {LabelsSelector} from '../../../store/selectors/LabelsSelector';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport {ArrayUtil} from '../../../utils/ArrayUtil';\r\nimport {Settings} from '../../../settings/Settings';\r\n\r\ninterface SelectableName {\r\n    name: string;\r\n    flag: boolean;\r\n}\r\n\r\ninterface IProps {\r\n    updateLabelNames: (labels: LabelName[]) => any,\r\n    updateSuggestedLabelList: (labelList: string[]) => any;\r\n    updateRejectedSuggestedLabelList: (labelList: string[]) => any;\r\n}\r\n\r\nconst SuggestLabelNamesPopup: React.FC<IProps> = (\r\n    {\r\n        updateLabelNames,\r\n        updateSuggestedLabelList,\r\n        updateRejectedSuggestedLabelList\r\n    }) => {\r\n\r\n    const mapNamesToSelectableNames = (names: string[]): SelectableName[] => {\r\n        return names.map((name: string) => {\r\n            return {\r\n                name,\r\n                flag: false\r\n            }\r\n        })\r\n    };\r\n\r\n    const [selectAllFlag, setSelectAllFlag] = useState(false);\r\n    const [labelNames, setLabelNames] = useState(mapNamesToSelectableNames(AISelector.getSuggestedLabelList()));\r\n\r\n    const onAccept = () => {\r\n        updateLabelNames(extractSelectedNames().reduce((acc: LabelName[], entry: string, index: number) => {\r\n            acc.push({\r\n                name: entry,\r\n                id: uuidv4(),\r\n                color: ArrayUtil.getByInfiniteIndex(Settings.LABEL_COLORS_PALETTE, index)\r\n            });\r\n            return acc;\r\n        }, LabelsSelector.getLabelNames()));\r\n        updateRejectedSuggestedLabelList(AISelector.getRejectedSuggestedLabelList().concat(extractUnselectedNames()));\r\n        updateSuggestedLabelList([]);\r\n        PopupActions.close();\r\n    };\r\n\r\n    const onReject = () => {\r\n        updateRejectedSuggestedLabelList(AISelector.getRejectedSuggestedLabelList().concat(extractNames()));\r\n        updateSuggestedLabelList([]);\r\n        PopupActions.close();\r\n    };\r\n\r\n    const selectAll = () => {\r\n        setSelectAllFlag(true);\r\n        setLabelNames(labelNames.map((entry: SelectableName) => {\r\n            return {\r\n                ...entry,\r\n                flag: true\r\n            }\r\n        }))\r\n    };\r\n\r\n    const deselectAll = () => {\r\n        setSelectAllFlag(false);\r\n        setLabelNames(labelNames.map((entry: SelectableName) => {\r\n            return {\r\n                ...entry,\r\n                flag: false\r\n            }\r\n        }))\r\n    };\r\n\r\n    const toggleSelectableNameByIndex = (index: number) => {\r\n        const nextLabelNames: SelectableName[] = labelNames.map((entry: SelectableName, entryIndex: number) => {\r\n            if (index === entryIndex)\r\n                return {\r\n                    ...entry,\r\n                    flag: !entry.flag\r\n                };\r\n            else\r\n                return entry;\r\n        });\r\n        setLabelNames(nextLabelNames);\r\n\r\n        const nextSelectAllFlag: boolean = nextLabelNames.reduce((acc: boolean, entry: SelectableName) => {\r\n            return(acc && entry.flag)\r\n        }, true);\r\n        setSelectAllFlag(nextSelectAllFlag);\r\n    };\r\n\r\n    const extractSelectedNames = (): string[] => {\r\n        return labelNames.reduce((acc: string[], entry: SelectableName) => {\r\n            if (entry.flag) {\r\n                acc.push(entry.name);\r\n            }\r\n            return acc;\r\n        }, [])\r\n    };\r\n\r\n    const extractUnselectedNames = (): string[] => {\r\n        return labelNames.reduce((acc: string[], entry: SelectableName) => {\r\n            if (!entry.flag) {\r\n                acc.push(entry.name);\r\n            }\r\n            return acc;\r\n        }, [])\r\n    };\r\n\r\n    const extractNames = (): string[] => {\r\n        return labelNames.map((entry: SelectableName) => entry.name);\r\n    };\r\n\r\n    const getOptions = () => {\r\n        return labelNames.map((entry: SelectableName, index: number) => {\r\n            return <div\r\n                className='OptionsItem'\r\n                onClick={() => toggleSelectableNameByIndex(index)}\r\n                key={index}\r\n            >\r\n                {entry.flag ?\r\n                    <img\r\n                        draggable={false}\r\n                        src={'ico/checkbox-checked.png'}\r\n                        alt={'checked'}\r\n                    /> :\r\n                    <img\r\n                        draggable={false}\r\n                        src={'ico/checkbox-unchecked.png'}\r\n                        alt={'unchecked'}\r\n                    />}\r\n                {entry.name}\r\n            </div>\r\n        })\r\n    };\r\n\r\n    const renderContent = () => {\r\n        return(<div className='SuggestLabelNamesPopupContent'>\r\n            <div className='Message'>\r\n                We found objects of classes that are not yet included in the list of labels. Select the names you\r\n                would like to add. This will help to speed up the labeling process.\r\n            </div>\r\n            <div className='AllToggle'>\r\n                <div\r\n                    className='OptionsItem'\r\n                    onClick={() => selectAllFlag ? deselectAll() : selectAll()}\r\n                >\r\n                    {selectAllFlag ?\r\n                        <img\r\n                            draggable={false}\r\n                            src={'ico/checkbox-checked.png'}\r\n                            alt={'checked'}\r\n                        /> :\r\n                        <img\r\n                            draggable={false}\r\n                            src={'ico/checkbox-unchecked.png'}\r\n                            alt={'unchecked'}\r\n                        />}\r\n                    {selectAllFlag ? 'Deselect all' : 'Select all'}\r\n                </div>\r\n            </div>\r\n            <div className='LabelNamesContainer'>\r\n                <Scrollbars autoHeight={true}>\r\n                    <div\r\n                        className='LabelNamesContent'\r\n                    >\r\n                        {getOptions()}\r\n                    </div>\r\n                </Scrollbars>\r\n            </div>\r\n        </div>);\r\n    };\r\n\r\n    return(\r\n        <GenericYesNoPopup\r\n            title={'New classes found'}\r\n            renderContent={renderContent}\r\n            acceptLabel={'Accept'}\r\n            onAccept={onAccept}\r\n            rejectLabel={'Reject'}\r\n            onReject={onReject}\r\n        />\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    updateLabelNames,\r\n    updateSuggestedLabelList,\r\n    updateRejectedSuggestedLabelList\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(SuggestLabelNamesPopup);\r\n","import React, {useState} from 'react'\r\nimport './GenericLabelTypePopup.scss'\r\nimport {LabelType} from \"../../../data/enums/LabelType\";\r\nimport {AppState} from \"../../../store\";\r\nimport {connect} from \"react-redux\";\r\nimport {ImageButton} from \"../../Common/ImageButton/ImageButton\";\r\nimport {GenericYesNoPopup} from \"../GenericYesNoPopup/GenericYesNoPopup\";\r\nimport {ILabelToolkit, LabelToolkitData} from \"../../../data/info/LabelToolkitData\";\r\nimport {ProjectType} from \"../../../data/enums/ProjectType\";\r\n\r\ninterface IProps {\r\n    title: string,\r\n    activeLabelType: LabelType,\r\n    projectType: ProjectType;\r\n    onLabelTypeChange?: (labelType: LabelType) => any;\r\n    acceptLabel: string;\r\n    onAccept: (labelType: LabelType) => any;\r\n    skipAcceptButton?: boolean;\r\n    disableAcceptButton?: boolean;\r\n    rejectLabel: string;\r\n    onReject: (labelType: LabelType) => any;\r\n    renderInternalContent: (labelType: LabelType) => any;\r\n}\r\n\r\nconst GenericLabelTypePopup: React.FC<IProps> = (\r\n    {\r\n        title,\r\n        activeLabelType,\r\n        projectType,\r\n        onLabelTypeChange,\r\n        acceptLabel,\r\n        onAccept,\r\n        skipAcceptButton,\r\n        disableAcceptButton,\r\n        rejectLabel,\r\n        onReject,\r\n        renderInternalContent\r\n    }) => {\r\n\r\n    const [labelType, setLabelType] = useState(activeLabelType);\r\n\r\n    const getSidebarButtons = () => {\r\n        return LabelToolkitData\r\n            .filter((label: ILabelToolkit) => label.projectType === projectType)\r\n            .map((label: ILabelToolkit) => {\r\n                return <ImageButton\r\n                    image={label.imageSrc}\r\n                    imageAlt={label.imageAlt}\r\n                    buttonSize={{width: 40, height: 40}}\r\n                    padding={20}\r\n                    onClick={() => {\r\n                        setLabelType(label.labelType);\r\n                        onLabelTypeChange(label.labelType);\r\n                    }}\r\n                    isActive={labelType === label.labelType}\r\n                />\r\n            })\r\n    }\r\n\r\n    const renderContent = () => {\r\n        return (<div className=\"GenericLabelTypePopupContent\">\r\n            <div className=\"LeftContainer\">\r\n                {getSidebarButtons()}\r\n            </div>\r\n            <div className=\"RightContainer\">\r\n                {renderInternalContent(labelType)}\r\n            </div>\r\n        </div>);\r\n    }\r\n\r\n    return(\r\n        <GenericYesNoPopup\r\n            title={title}\r\n            renderContent={renderContent}\r\n            acceptLabel={acceptLabel}\r\n            onAccept={() => onAccept(labelType)}\r\n            skipAcceptButton={skipAcceptButton}\r\n            disableAcceptButton={disableAcceptButton}\r\n            rejectLabel={rejectLabel}\r\n            onReject={() => onReject(labelType)}\r\n        />\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    projectType: state.general.projectData.type\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(GenericLabelTypePopup);","import {LabelType} from './enums/LabelType';\r\nimport {ILabelFormatData} from '../interfaces/ILabelFormatData';\r\nimport {AnnotationFormatType} from './enums/AnnotationFormatType';\r\n\r\nexport type ImportFormatDataMap = Record<LabelType, ILabelFormatData[]>\r\n\r\nexport const ImportFormatData: ImportFormatDataMap = {\r\n    [LabelType.RECT]: [\r\n        {\r\n            type: AnnotationFormatType.COCO,\r\n            label: 'Single file in COCO JSON format.'\r\n        },\r\n        {\r\n            type: AnnotationFormatType.YOLO,\r\n            label: 'Multiple files in YOLO format along with labels names definition - labels.txt file.'\r\n        }\r\n    ],\r\n    [LabelType.POINT]: [],\r\n    [LabelType.LINE]: [],\r\n    [LabelType.POLYGON]: [\r\n        {\r\n            type: AnnotationFormatType.COCO,\r\n            label: 'Single file in COCO JSON format.'\r\n        }\r\n    ],\r\n    [LabelType.IMAGE_RECOGNITION]: []\r\n}\r\n","import React from 'react';\r\nimport './FeatureInProgress.scss';\r\n\r\nexport const FeatureInProgress: React.FC = () => {\r\n    return(\r\n        <div\r\n            className=\"FeatureInProgress\"\r\n        >\r\n            <img\r\n                draggable={false}\r\n                alt={\"take_off\"}\r\n                src={\"ico/take-off.png\"}\r\n            />\r\n            <p className=\"extraBold\">new feature <br/> coming soon...</p>\r\n        </div>\r\n    )\r\n};","export class COCOAnnotationsLoadingError extends Error {\r\n    constructor(message) {\r\n        super(message);\r\n        this.name = \"COCOAnnotationsLoadingError\";\r\n    }\r\n}\r\n\r\nexport class COCOFormatValidationError extends COCOAnnotationsLoadingError {\r\n    constructor(message) {\r\n        super(message);\r\n        this.name = \"COCOFormatValidationError\";\r\n    }\r\n}\r\n\r\nexport class COCOAnnotationReadingError extends COCOAnnotationsLoadingError {\r\n    constructor() {\r\n        super(\"Unexpected error occurred during reading annotations from file\");\r\n        this.name = \"COCOAnnotationReadingError\";\r\n    }\r\n}\r\n\r\nexport class COCOAnnotationDeserializationError extends COCOAnnotationsLoadingError {\r\n    constructor() {\r\n        super(\"COCO annotation file need to be in JSON format\");\r\n        this.name = \"COCOAnnotationDeserializationError\";\r\n    }\r\n}\r\n\r\nexport class COCOAnnotationFileCountError extends COCOAnnotationsLoadingError {\r\n    constructor() {\r\n        super(\"COCO annotation requires single file but multiple were given\");\r\n        this.name = \"COCOAnnotationFileCountError\";\r\n    }\r\n}","import {ImageData, LabelName} from \"../../store/labels/types\";\r\nimport {LabelType} from \"../../data/enums/LabelType\";\r\n\r\nexport type ImportResult = {\r\n    imagesData: ImageData[]\r\n    labelNames: LabelName[]\r\n}\r\n\r\nexport class AnnotationImporter {\r\n    public labelType: LabelType[]\r\n\r\n    constructor(labelType: LabelType[]) {\r\n        this.labelType = labelType;\r\n    }\r\n\r\n    public import(\r\n        filesData: File[],\r\n        onSuccess: (imagesData: ImageData[], labelNames: LabelName[]) => any,\r\n        onFailure: (error?:Error) => any\r\n    ): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n}","import {COCOBBox, COCOSegmentation} from \"../../../data/labels/COCO\";\r\nimport {IRect} from \"../../../interfaces/IRect\";\r\nimport {IPoint} from \"../../../interfaces/IPoint\";\r\nimport {chunk} from \"lodash\";\r\n\r\nexport class COCOUtils {\r\n    public static bbox2rect(bbox: COCOBBox): IRect {\r\n        return {\r\n            x: bbox[0],\r\n            y: bbox[1],\r\n            width: bbox[2],\r\n            height: bbox[3]\r\n        }\r\n    }\r\n\r\n    public static segmentation2vertices(segmentation: COCOSegmentation): IPoint[][] {\r\n        return segmentation.map((segment: number[]) => {\r\n            return chunk(segment, 2).map((pair: number[]) => {\r\n                return {x: pair[0], y: pair[1]}\r\n            })\r\n        })\r\n    }\r\n}","import {ImageData, LabelName} from '../../../store/labels/types';\r\nimport {LabelsSelector} from '../../../store/selectors/LabelsSelector';\r\nimport {COCOCategory, COCOImage, COCOObject} from '../../../data/labels/COCO';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport {ArrayUtil, PartitionResult} from '../../../utils/ArrayUtil';\r\nimport {ImageDataUtil} from '../../../utils/ImageDataUtil';\r\nimport {LabelUtil} from '../../../utils/LabelUtil';\r\nimport {\r\n    COCOAnnotationDeserializationError,\r\n    COCOAnnotationFileCountError,\r\n    COCOAnnotationReadingError,\r\n    COCOFormatValidationError\r\n} from './COCOErrors';\r\nimport {LabelType} from '../../../data/enums/LabelType';\r\nimport {AnnotationImporter, ImportResult} from '../AnnotationImporter';\r\nimport {COCOUtils} from './COCOUtils';\r\nimport {Settings} from \"../../../settings/Settings\";\r\n\r\nexport type FileNameCOCOIdMap = {[ fileName: string]: number; }\r\nexport type LabelNameMap = { [labelCOCOId: number]: LabelName; }\r\nexport type ImageDataMap = { [imageCOCOId: number]: ImageData; }\r\n\r\nexport class COCOImporter extends AnnotationImporter {\r\n    public static requiredKeys = ['images', 'annotations', 'categories']\r\n\r\n    public import(\r\n        filesData: File[],\r\n        onSuccess: (imagesData: ImageData[], labelNames: LabelName[]) => any,\r\n        onFailure: (error?:Error) => any\r\n    ): void {\r\n        if (filesData.length > 1) {\r\n            onFailure(new COCOAnnotationFileCountError());\r\n        }\r\n\r\n        const reader = new FileReader();\r\n        reader.readAsText(filesData[0]);\r\n        reader.onloadend = (evt: any) => {\r\n            try {\r\n                const inputImagesData: ImageData[] = LabelsSelector.getImagesData();\r\n                const annotations = COCOImporter.deserialize(evt.target.result)\r\n                const {imagesData, labelNames} = this.applyLabels(inputImagesData, annotations);\r\n                onSuccess(imagesData,labelNames);\r\n            } catch (error) {\r\n                onFailure(error as Error);\r\n            }\r\n        };\r\n        reader.onerror = () => onFailure(new COCOAnnotationReadingError());\r\n    }\r\n\r\n    public static deserialize(text: string): COCOObject {\r\n        try {\r\n            return JSON.parse(text) as COCOObject\r\n        } catch (error) {\r\n            throw new COCOAnnotationDeserializationError()\r\n        }\r\n    }\r\n\r\n    public applyLabels(imageData: ImageData[], annotationsObject: COCOObject): ImportResult {\r\n        COCOImporter.validateCocoFormat(annotationsObject);\r\n        const {images, categories, annotations} = annotationsObject;\r\n        const labelNameMap: LabelNameMap = COCOImporter.mapCOCOCategories(categories);\r\n        const cleanImageData: ImageData[] = imageData.map((item: ImageData) => ImageDataUtil.cleanAnnotations(item));\r\n        const imageDataPartition: PartitionResult<ImageData> = COCOImporter.partitionImageData(cleanImageData, images);\r\n        const imageDataMap: ImageDataMap = COCOImporter.mapImageData(imageDataPartition.pass, images);\r\n\r\n        for (const annotation of annotations) {\r\n            if (!imageDataMap[annotation.image_id] || annotation.iscrowd === 1)\r\n                continue\r\n\r\n            if (this.labelType.includes(LabelType.RECT)) {\r\n                imageDataMap[annotation.image_id].labelRects.push(LabelUtil.createLabelRect(\r\n                    labelNameMap[annotation.category_id].id,\r\n                    COCOUtils.bbox2rect(annotation.bbox)\r\n                ))\r\n            }\r\n\r\n            if (this.labelType.includes(LabelType.POLYGON)) {\r\n                const polygons = COCOUtils.segmentation2vertices(annotation.segmentation);\r\n                for (const polygon of polygons) {\r\n                    imageDataMap[annotation.image_id].labelPolygons.push(LabelUtil.createLabelPolygon(\r\n                        labelNameMap[annotation.category_id].id, polygon\r\n                    ))\r\n                }\r\n            }\r\n        }\r\n\r\n        const resultImageData = Object.values(imageDataMap).concat(imageDataPartition.fail);\r\n\r\n        return {\r\n            imagesData: ImageDataUtil.arrange(resultImageData, imageData.map((item: ImageData) => item.id)),\r\n            labelNames: Object.values(labelNameMap)\r\n        }\r\n    }\r\n\r\n    protected static partitionImageData(items: ImageData[], images: COCOImage[]): PartitionResult<ImageData> {\r\n        const imageNames: string[] = images.map((item: COCOImage) => item.file_name);\r\n        const predicate = (item: ImageData) => imageNames.includes(item.fileData.name);\r\n        return ArrayUtil.partition<ImageData>(items, predicate);\r\n    }\r\n\r\n    protected static mapCOCOCategories(categories: COCOCategory[]): LabelNameMap {\r\n        return categories.reduce((acc: LabelNameMap, category : COCOCategory, index: number) => {\r\n            acc[category.id] = {\r\n                id: uuidv4(),\r\n                name: category.name,\r\n                color: ArrayUtil.getByInfiniteIndex(Settings.LABEL_COLORS_PALETTE, index)\r\n            }\r\n            return acc\r\n        }, {});\r\n    }\r\n\r\n    protected static mapImageData(items: ImageData[], images: COCOImage[]): ImageDataMap {\r\n        const fileNameCOCOIdMap: FileNameCOCOIdMap = images.reduce((acc: FileNameCOCOIdMap, image: COCOImage) => {\r\n            acc[image.file_name] = image.id\r\n            return acc\r\n        }, {});\r\n        return  items.reduce((acc: ImageDataMap, image: ImageData) => {\r\n            acc[fileNameCOCOIdMap[image.fileData.name]] = image\r\n            return acc;\r\n        }, {});\r\n    }\r\n\r\n    public static validateCocoFormat(annotationsObject: COCOObject): void {\r\n        const missingKeys = COCOImporter.requiredKeys.filter((key: string) => !annotationsObject.hasOwnProperty(key))\r\n        if (missingKeys.length !== 0) {\r\n            throw new COCOFormatValidationError(`Uploaded file does not contain all required keys: ${missingKeys}`)\r\n        }\r\n    }\r\n}\r\n","import {AnnotationImporter} from '../AnnotationImporter';\r\nimport {ImageData, LabelName} from '../../../store/labels/types';\r\nimport {FileUtil} from '../../../utils/FileUtil';\r\nimport {ArrayUtil} from '../../../utils/ArrayUtil';\r\nimport {NoLabelNamesFileProvidedError} from './YOLOErrors';\r\nimport {LabelsSelector} from '../../../store/selectors/LabelsSelector';\r\nimport {YOLOUtils} from './YOLOUtils';\r\nimport {ImageDataUtil} from '../../../utils/ImageDataUtil';\r\nimport {zip, find} from 'lodash';\r\nimport {ImageRepository} from '../../imageRepository/ImageRepository';\r\n\r\nexport type YOLOFilesSpec = {\r\n    labelNameFile: File\r\n    annotationFiles: File[]\r\n}\r\n\r\nexport class YOLOImporter extends AnnotationImporter {\r\n    private static labelsFileName: string = 'labels.txt'\r\n\r\n    public import(\r\n        filesData: File[],\r\n        onSuccess: (imagesData: ImageData[], labelNames: LabelName[]) => any,\r\n        onFailure: (error?:Error) => any\r\n    ): void {\r\n        try {\r\n            const sourceImagesData = LabelsSelector.getImagesData()\r\n                .map((i: ImageData) => ImageDataUtil.cleanAnnotations(i));\r\n            const {labelNameFile, annotationFiles} = YOLOImporter.filterFilesData(filesData, sourceImagesData);\r\n            const [relevantImageData, relevantAnnotations] = YOLOImporter\r\n                .matchImagesWithAnnotations(sourceImagesData, annotationFiles);\r\n            const labelNamesPromise: Promise<LabelName[]> = FileUtil.readFile(labelNameFile)\r\n                .then((fileContent: string) => YOLOUtils.parseLabelsNamesFromString(fileContent));\r\n            const missingImagesPromise: Promise<void> = ImageDataUtil.loadMissingImages(relevantImageData);\r\n            const annotationFilesPromise: Promise<string[]> = FileUtil.readFiles(relevantAnnotations);\r\n            Promise\r\n                .all([labelNamesPromise, missingImagesPromise, annotationFilesPromise])\r\n                .then((values: [LabelName[], void, string[]]) => {\r\n                    const [labelNames, , annotationsRaw] = values;\r\n                    const resultImageData = zip<ImageData, string>(relevantImageData, annotationsRaw)\r\n                        .map((pair: [ImageData, string]) => YOLOImporter.applyAnnotations(pair[0], pair[1], labelNames))\r\n                    onSuccess(YOLOImporter.injectImageDataWithAnnotations(sourceImagesData, resultImageData), labelNames);\r\n                })\r\n                .catch((error: Error) => onFailure(error))\r\n        } catch (error) {\r\n            onFailure(error as Error)\r\n        }\r\n    };\r\n\r\n    public static filterFilesData(filesData: File[], imagesData: ImageData[]): YOLOFilesSpec {\r\n        const functionalityPartitionResult = ArrayUtil.partition(\r\n            filesData,\r\n            (i: File) => i.name === YOLOImporter.labelsFileName\r\n        )\r\n        if (functionalityPartitionResult.pass.length !== 1) {\r\n            throw new NoLabelNamesFileProvidedError()\r\n        }\r\n        const imageIdentifiers: string[] = imagesData\r\n            .map((i: ImageData) => i.fileData.name)\r\n            .map((i: string) => FileUtil.extractFileName(i))\r\n        const matchingPartitionResult = ArrayUtil.partition(\r\n            filesData,\r\n            (i: File) => imageIdentifiers.includes(FileUtil.extractFileName(i.name))\r\n        )\r\n        return {\r\n            labelNameFile: functionalityPartitionResult.pass[0],\r\n            annotationFiles: matchingPartitionResult.pass\r\n        }\r\n    }\r\n\r\n    public static matchImagesWithAnnotations(images: ImageData[], annotations: File[]): [ImageData[], File[]] {\r\n        const predicate = (image: ImageData, annotation:  File) => {\r\n            return FileUtil.extractFileName(image.fileData.name) === FileUtil.extractFileName(annotation.name)\r\n        }\r\n        return ArrayUtil.unzip(\r\n            ArrayUtil.match<ImageData, File>(images, annotations, predicate)\r\n        );\r\n    }\r\n\r\n    public static applyAnnotations(imageData: ImageData, rawAnnotations: string, labelNames: LabelName[]): ImageData {\r\n        const image: HTMLImageElement = ImageRepository.getById(imageData.id);\r\n        imageData.labelRects = YOLOUtils.parseYOLOAnnotationsFromString(\r\n            rawAnnotations,\r\n            labelNames,\r\n            {width: image.width, height: image.height},\r\n            imageData.fileData.name\r\n        );\r\n        return imageData;\r\n    }\r\n\r\n    public static injectImageDataWithAnnotations(sourceImageData: ImageData[], annotatedImageData: ImageData[]): ImageData[] {\r\n        return sourceImageData.map((i: ImageData) => {\r\n            const result = find(annotatedImageData, {id: i.id});\r\n            return !!result ? result : i;\r\n        })\r\n    }\r\n}\r\n","import {AnnotationFormatType} from './enums/AnnotationFormatType';\r\nimport {AnnotationImporter} from '../logic/import/AnnotationImporter';\r\nimport {COCOImporter} from '../logic/import/coco/COCOImporter';\r\nimport {YOLOImporter} from '../logic/import/yolo/YOLOImporter';\r\n\r\nexport type ImporterSpecDataMap = Record<AnnotationFormatType, typeof AnnotationImporter>;\r\n\r\n\r\nexport const ImporterSpecData: ImporterSpecDataMap = {\r\n    [AnnotationFormatType.COCO]: COCOImporter,\r\n    [AnnotationFormatType.CSV]: undefined,\r\n    [AnnotationFormatType.JSON]: undefined,\r\n    [AnnotationFormatType.VGG]: undefined,\r\n    [AnnotationFormatType.VOC]: undefined,\r\n    [AnnotationFormatType.YOLO]: YOLOImporter\r\n}\r\n","import React, {useState} from 'react';\r\nimport './NotificationsView.scss';\r\nimport {AppState} from '../../store';\r\nimport {connect} from 'react-redux';\r\nimport classNames from 'classnames';\r\nimport {deleteNotificationById} from '../../store/notifications/actionCreators';\r\nimport {INotification} from '../../store/notifications/types';\r\nimport {NotificationType} from '../../data/enums/NotificationType';\r\n\r\ninterface IProps {\r\n    deleteNotificationByIdAction: (id: string) => void\r\n    queue: INotification[]\r\n}\r\n\r\nenum NotificationState {\r\n    IN = 'IN',\r\n    DISPLAY = 'DISPLAY',\r\n    OUT = 'OUT',\r\n    IDLE = 'IDLE'\r\n}\r\n\r\nenum Animation {\r\n    IN = 'animation-in',\r\n    DISPLAY = 'animation-display',\r\n    OUT = 'animation-out'\r\n}\r\n\r\nconst NotificationsView: React.FC<IProps> = (props) => {\r\n    const [ notificationState, setNotificationState ] = useState(NotificationState.IDLE);\r\n\r\n    if (props.queue.length > 0 && notificationState === NotificationState.IDLE) {\r\n        setNotificationState(NotificationState.IN)\r\n    }\r\n\r\n    const notification: INotification | undefined = props.queue[0]\r\n\r\n    const onClose = () => {\r\n        setNotificationState(NotificationState.OUT)\r\n    }\r\n\r\n    const onAnimationEnd = (event: React.AnimationEvent<HTMLDivElement>) => {\r\n        switch (event.animationName) {\r\n            case Animation.IN:\r\n                setNotificationState(NotificationState.DISPLAY)\r\n                break\r\n            case Animation.DISPLAY:\r\n                setNotificationState(NotificationState.OUT)\r\n                break\r\n            case Animation.OUT:\r\n                props.deleteNotificationByIdAction(notification.id)\r\n                setNotificationState(NotificationState.IDLE)\r\n                break\r\n        }\r\n    }\r\n\r\n    const getNotificationWrapperClassName = () => {\r\n        return classNames('notification-wrapper', {\r\n            'in': notificationState === NotificationState.IN,\r\n            'display': notificationState === NotificationState.DISPLAY,\r\n            'out': notificationState === NotificationState.OUT\r\n        })\r\n    }\r\n\r\n    const getNotificationClassName = () => {\r\n        return classNames('notification', {\r\n            'error': notification.type === NotificationType.ERROR,\r\n            'success': notification.type === NotificationType.SUCCESS,\r\n            'message': notification.type === NotificationType.MESSAGE,\r\n            'warning': notification.type === NotificationType.WARNING\r\n        })\r\n    }\r\n\r\n    const renderNotification = () => {\r\n        return(\r\n            <div\r\n                className={getNotificationWrapperClassName()}\r\n                key={notification.id}\r\n                onAnimationEnd={onAnimationEnd}\r\n                onClick={onClose}\r\n            >\r\n                <div className={getNotificationClassName()}>\r\n                    <div className='header'>\r\n                        {notification.header}\r\n                    </div>\r\n                    <div className='content'>\r\n                        {notification.description}\r\n                    </div>\r\n                    <div className='loader'/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return(notificationState !== NotificationState.IDLE ? renderNotification() : null)\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    deleteNotificationByIdAction: deleteNotificationById\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    queue: state.notifications.queue\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(NotificationsView);\r\n","import React, {useState} from 'react'\r\nimport './ImportLabelPopup.scss'\r\nimport {LabelType} from '../../../data/enums/LabelType';\r\nimport {PopupActions} from '../../../logic/actions/PopupActions';\r\nimport GenericLabelTypePopup from '../GenericLabelTypePopup/GenericLabelTypePopup';\r\nimport {ImportFormatData} from '../../../data/ImportFormatData';\r\nimport {FeatureInProgress} from '../../EditorView/FeatureInProgress/FeatureInProgress';\r\nimport {AppState} from '../../../store';\r\nimport {connect} from 'react-redux';\r\nimport {useDropzone} from 'react-dropzone';\r\nimport {AcceptedFileType} from '../../../data/enums/AcceptedFileType';\r\nimport {ImageData, LabelName} from '../../../store/labels/types';\r\nimport {updateActiveLabelType, updateImageData, updateLabelNames} from '../../../store/labels/actionCreators';\r\nimport {ImporterSpecData} from '../../../data/ImporterSpecData';\r\nimport {AnnotationFormatType} from '../../../data/enums/AnnotationFormatType';\r\nimport {ILabelFormatData} from '../../../interfaces/ILabelFormatData';\r\n\r\ninterface IProps {\r\n    activeLabelType: LabelType,\r\n    updateImageDataAction: (imageData: ImageData[]) => any,\r\n    updateLabelNamesAction: (labels: LabelName[]) => any,\r\n    updateActiveLabelTypeAction: (activeLabelType: LabelType) => any\r\n}\r\n\r\nconst ImportLabelPopup: React.FC<IProps> = (\r\n    {\r\n        activeLabelType,\r\n        updateImageDataAction,\r\n        updateLabelNamesAction,\r\n        updateActiveLabelTypeAction\r\n    }) => {\r\n    const resolveFormatType = (labelType: LabelType): AnnotationFormatType => {\r\n        const possibleImportFormats = ImportFormatData[labelType]\r\n        return possibleImportFormats.length === 1 ? possibleImportFormats[0].type : null\r\n    }\r\n\r\n    const [labelType, setLabelType] = useState(activeLabelType);\r\n    const [formatType, setFormatType] = useState(resolveFormatType(activeLabelType));\r\n    const [loadedLabelNames, setLoadedLabelNames] = useState([]);\r\n    const [loadedImageData, setLoadedImageData] = useState([]);\r\n    const [annotationsLoadedError, setAnnotationsLoadedError] = useState(null);\r\n\r\n    const {getRootProps, getInputProps} = useDropzone({\r\n        accept: [AcceptedFileType.JSON, AcceptedFileType.TEXT],\r\n        multiple: true,\r\n        onDrop: (acceptedFiles) => {\r\n            const importer = new (ImporterSpecData[formatType])([labelType])\r\n            importer.import(acceptedFiles, onAnnotationLoadSuccess, onAnnotationsLoadFailure);\r\n        }\r\n    });\r\n\r\n    const onLabelTypeChange = (labelType: LabelType) => {\r\n        setLabelType(labelType);\r\n        setFormatType(resolveFormatType(labelType))\r\n        setLoadedLabelNames([]);\r\n        setLoadedImageData([]);\r\n        setAnnotationsLoadedError(null);\r\n    }\r\n\r\n    const onAnnotationLoadSuccess = (imagesData: ImageData[], labelNames: LabelName[]) => {\r\n        setLoadedLabelNames(labelNames);\r\n        setLoadedImageData(imagesData);\r\n        setAnnotationsLoadedError(null);\r\n    }\r\n\r\n    const onAnnotationsLoadFailure = (error?:Error) => {\r\n        setLoadedLabelNames([]);\r\n        setLoadedImageData([]);\r\n        setAnnotationsLoadedError(error);\r\n    };\r\n\r\n    const onAccept = (labelType: LabelType) => {\r\n        if (loadedLabelNames.length !== 0 && loadedImageData.length !== 0) {\r\n            updateImageDataAction(loadedImageData);\r\n            updateLabelNamesAction(loadedLabelNames);\r\n            updateActiveLabelTypeAction(labelType);\r\n            PopupActions.close();\r\n        }\r\n    };\r\n\r\n    const onReject = (labelType: LabelType) => {\r\n        PopupActions.close();\r\n    };\r\n\r\n    const onAnnotationFormatChange = (format: AnnotationFormatType) => {\r\n        setFormatType(format);\r\n    }\r\n\r\n    const getDropZoneContent = () => {\r\n        if (!!annotationsLoadedError) {\r\n            return <>\r\n                <input {...getInputProps()} />\r\n                <img\r\n                    draggable={false}\r\n                    alt={'upload'}\r\n                    src={'ico/box-opened.png'}\r\n                />\r\n                <p className='extraBold'>Annotation import was unsuccessful</p>\r\n                {annotationsLoadedError.message}\r\n                <p className='extraBold'>Try again</p>\r\n            </>;\r\n        } else if (loadedImageData.length !== 0 && loadedLabelNames.length !== 0) {\r\n            return <>\r\n                <img\r\n                    draggable={false}\r\n                    alt={'uploaded'}\r\n                    src={'ico/box-closed.png'}\r\n                />\r\n                <p className='extraBold'>Annotation ready for import</p>\r\n                After import you will lose\r\n                all your current annotations\r\n            </>;\r\n        } else {\r\n            return <>\r\n                <input {...getInputProps()} />\r\n                <img\r\n                    draggable={false}\r\n                    alt={'upload'}\r\n                    src={'ico/box-opened.png'}\r\n                />\r\n                <p className='extraBold'>{`Drop ${formatType} annotations`}</p>\r\n                <p>or</p>\r\n                <p className='extraBold'>Click here to select them</p>\r\n            </>;\r\n        }\r\n    };\r\n\r\n    const getOptions = (exportFormatData: ILabelFormatData[]) => {\r\n        return exportFormatData.map((entry: ILabelFormatData) => {\r\n            return <div\r\n                className='OptionsItem'\r\n                onClick={() => onAnnotationFormatChange(entry.type)}\r\n                key={entry.type}\r\n            >\r\n                {entry.type === formatType ?\r\n                    <img\r\n                        draggable={false}\r\n                        src={'ico/checkbox-checked.png'}\r\n                        alt={'checked'}\r\n                    /> :\r\n                    <img\r\n                        draggable={false}\r\n                        src={'ico/checkbox-unchecked.png'}\r\n                        alt={'unchecked'}\r\n                    />}\r\n                {entry.label}\r\n            </div>\r\n        })\r\n    };\r\n\r\n    const renderInternalContent = (labelType: LabelType) => {\r\n        if (!formatType && ImportFormatData[labelType].length !== 0) {\r\n            return [\r\n                <div className='Message'>\r\n                    Select file format you would like to use to import labels.\r\n                </div>,\r\n                <div className='Options'>\r\n                    {getOptions(ImportFormatData[labelType])}\r\n                </div>\r\n            ]\r\n        }\r\n        const importFormatData = ImportFormatData[labelType];\r\n        return importFormatData.length === 0 ?\r\n            <FeatureInProgress/> :\r\n            <div {...getRootProps({className: 'DropZone'})}>\r\n                {getDropZoneContent()}\r\n            </div>\r\n    }\r\n\r\n    return(\r\n        <GenericLabelTypePopup\r\n            activeLabelType={labelType}\r\n            title={`Import ${labelType.toLowerCase()} annotations`}\r\n            onLabelTypeChange={onLabelTypeChange}\r\n            acceptLabel={'Import'}\r\n            onAccept={onAccept}\r\n            skipAcceptButton={ImportFormatData[labelType].length === 0}\r\n            disableAcceptButton={loadedImageData.length === 0 || loadedLabelNames.length === 0 || !!annotationsLoadedError}\r\n            rejectLabel={'Cancel'}\r\n            onReject={onReject}\r\n            renderInternalContent={renderInternalContent}\r\n        />\r\n    )\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    updateImageDataAction: updateImageData,\r\n    updateLabelNamesAction: updateLabelNames,\r\n    updateActiveLabelTypeAction: updateActiveLabelType\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    activeLabelType: state.labels.activeLabelType,\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(ImportLabelPopup);\r\n","export class XMLSanitizerUtil {\r\n    public static sanitize(input: string): string {\r\n        return input\r\n            .replace('<', '&lt;')\r\n            .replace('>', '&gt;')\r\n            .replace('&', '&amp;')\r\n            .replace(\"'\", '&#39;')\r\n            .replace(\"/\", '&#x2F;')\r\n    }\r\n}","import moment from 'moment';\r\nimport {GeneralSelector} from '../store/selectors/GeneralSelector';\r\nimport {saveAs} from 'file-saver';\r\n\r\nexport class ExporterUtil {\r\n    public static getExportFileName(): string {\r\n        const projectName: string = GeneralSelector.getProjectName();\r\n        const date: string = moment().format('YYYY-MM-DD-hh-mm-ss');\r\n        return `labels_${projectName}_${date}`\r\n    }\r\n\r\n    public static saveAs(content: string, fileName: string): void {\r\n        const blob = new Blob([content], {type: 'text/plain;charset=utf-8'});\r\n        try {\r\n            saveAs(blob, fileName);\r\n        } catch (error) {\r\n            // TODO: Implement file save error handling\r\n            throw new Error(error as string);\r\n        }\r\n    }\r\n}\r\n","import {AnnotationFormatType} from '../../data/enums/AnnotationFormatType';\r\nimport {ImageData, LabelName, LabelRect} from '../../store/labels/types';\r\nimport {ImageRepository} from '../imageRepository/ImageRepository';\r\nimport JSZip from 'jszip';\r\nimport { saveAs } from 'file-saver';\r\nimport {LabelsSelector} from '../../store/selectors/LabelsSelector';\r\nimport {XMLSanitizerUtil} from '../../utils/XMLSanitizerUtil';\r\nimport {ExporterUtil} from '../../utils/ExporterUtil';\r\nimport {GeneralSelector} from '../../store/selectors/GeneralSelector';\r\nimport {findIndex, findLast} from 'lodash';\r\nimport {ISize} from '../../interfaces/ISize';\r\nimport {NumberUtil} from '../../utils/NumberUtil';\r\nimport {RectUtil} from '../../utils/RectUtil';\r\n\r\nexport class RectLabelsExporter {\r\n    public static export(exportFormatType: AnnotationFormatType): void {\r\n        switch (exportFormatType) {\r\n            case AnnotationFormatType.YOLO:\r\n                RectLabelsExporter.exportAsYOLO();\r\n                break;\r\n            case AnnotationFormatType.VOC:\r\n                RectLabelsExporter.exportAsVOC();\r\n                break;\r\n            case AnnotationFormatType.CSV:\r\n                RectLabelsExporter.exportAsCSV();\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n\r\n    private static exportAsYOLO(): void {\r\n        const zip = new JSZip();\r\n        LabelsSelector.getImagesData()\r\n            .forEach((imageData: ImageData) => {\r\n                const fileContent: string = RectLabelsExporter.wrapRectLabelsIntoYOLO(imageData);\r\n                if (fileContent) {\r\n                    const fileName : string = imageData.fileData.name.replace(/\\.[^/.]+$/, '.txt');\r\n                    try {\r\n                        zip.file(fileName, fileContent);\r\n                    } catch (error) {\r\n                        // TODO\r\n                        throw new Error(error as string);\r\n                    }\r\n                }\r\n            });\r\n\r\n        try {\r\n            zip.generateAsync({type:'blob'})\r\n                .then((content: Blob) => {\r\n                    saveAs(content, `${ExporterUtil.getExportFileName()}.zip`);\r\n                });\r\n        } catch (error) {\r\n            // TODO\r\n            throw new Error(error as string);\r\n        }\r\n    }\r\n\r\n    public static wrapRectLabelIntoYOLO(labelRect: LabelRect, labelNames: LabelName[], imageSize: ISize): string {\r\n        const snapAndFix = (value: number) => NumberUtil.snapValueToRange(value,0, 1).toFixed(6)\r\n        const classIdx: string = findIndex(labelNames, {id: labelRect.labelId}).toString()\r\n        const rectCenter = RectUtil.getCenter(labelRect.rect)\r\n        const rectSize = RectUtil.getSize(labelRect.rect)\r\n        const rawBBox: number[] = [\r\n            rectCenter.x / imageSize.width,\r\n            rectCenter.y / imageSize.height,\r\n            rectSize.width / imageSize.width,\r\n            rectSize.height / imageSize.height\r\n        ]\r\n\r\n        let [x, y, width, height] = rawBBox.map((value: number) => parseFloat(snapAndFix(value)))\r\n\r\n        if (x + width / 2 > 1) { width = 2 * (1 - x) }\r\n        if (x - width / 2 < 0) { width = 2 * x }\r\n        if (y + height / 2 > 1) { height = 2 * (1 - y) }\r\n        if (y - height / 2 < 0) { height = 2 * y }\r\n\r\n        const processedBBox = [x, y, width, height].map((value: number) => snapAndFix(value))\r\n\r\n        return [classIdx, ...processedBBox].join(' ')\r\n    }\r\n\r\n    private static wrapRectLabelsIntoYOLO(imageData: ImageData): string {\r\n        if (imageData.labelRects.length === 0 || !imageData.loadStatus)\r\n            return null;\r\n\r\n        const labelNames: LabelName[] = LabelsSelector.getLabelNames();\r\n        const image: HTMLImageElement = ImageRepository.getById(imageData.id);\r\n        const imageSize: ISize = {width: image.width, height: image.height}\r\n        const labelRectsString: string[] = imageData.labelRects.map((labelRect: LabelRect) => {\r\n            return RectLabelsExporter.wrapRectLabelIntoYOLO(labelRect, labelNames, imageSize)\r\n        });\r\n        return labelRectsString.join('\\n');\r\n    }\r\n\r\n    private static exportAsVOC(): void {\r\n        const zip = new JSZip();\r\n        LabelsSelector.getImagesData().forEach((imageData: ImageData) => {\r\n                const fileContent: string = RectLabelsExporter.wrapImageIntoVOC(imageData);\r\n                if (fileContent) {\r\n                    const fileName : string = imageData.fileData.name.replace(/\\.[^/.]+$/, '.xml');\r\n                    try {\r\n                        zip.file(fileName, fileContent);\r\n                    } catch (error) {\r\n                        // TODO\r\n                        throw new Error(error as string);\r\n                    }\r\n                }\r\n            });\r\n\r\n        try {\r\n            zip.generateAsync({type:'blob'})\r\n                .then(function(content) {\r\n                    saveAs(content, `${ExporterUtil.getExportFileName()}.zip`);\r\n                });\r\n        } catch (error) {\r\n            // TODO\r\n            throw new Error(error as string);\r\n        }\r\n    }\r\n\r\n    private static wrapRectLabelsIntoVOC(imageData: ImageData): string {\r\n        if (imageData.labelRects.length === 0 || !imageData.loadStatus)\r\n            return null;\r\n\r\n        const labelNamesList: LabelName[] = LabelsSelector.getLabelNames();\r\n        const labelRectsString: string[] = imageData.labelRects.map((labelRect: LabelRect) => {\r\n            const labelName: LabelName = findLast(labelNamesList, {id: labelRect.labelId});\r\n            const labelFields = !!labelName ? [\r\n                `\\t<object>`,\r\n                `\\t\\t<name>${labelName.name}</name>`,\r\n                `\\t\\t<pose>Unspecified</pose>`,\r\n                `\\t\\t<truncated>0</truncated>`,\r\n                `\\t\\t<difficult>0</difficult>`,\r\n                `\\t\\t<bndbox>`,\r\n                `\\t\\t\\t<xmin>${Math.round(labelRect.rect.x)}</xmin>`,\r\n                `\\t\\t\\t<ymin>${Math.round(labelRect.rect.y)}</ymin>`,\r\n                `\\t\\t\\t<xmax>${Math.round(labelRect.rect.x + labelRect.rect.width)}</xmax>`,\r\n                `\\t\\t\\t<ymax>${Math.round(labelRect.rect.y + labelRect.rect.height)}</ymax>`,\r\n                `\\t\\t</bndbox>`,\r\n                `\\t</object>`\r\n            ] : [];\r\n            return labelFields.join('\\n')\r\n        });\r\n        return labelRectsString.join('\\n');\r\n    }\r\n\r\n    private static wrapImageIntoVOC(imageData: ImageData): string {\r\n        const labels: string = RectLabelsExporter.wrapRectLabelsIntoVOC(imageData);\r\n        const projectName: string = XMLSanitizerUtil.sanitize(GeneralSelector.getProjectName());\r\n\r\n        if (labels) {\r\n            const image: HTMLImageElement = ImageRepository.getById(imageData.id);\r\n            return [\r\n                `<annotation>`,\r\n                `\\t<folder>${projectName}</folder>`,\r\n                `\\t<filename>${imageData.fileData.name}</filename>`,\r\n                `\\t<path>/${projectName}/${imageData.fileData.name}</path>`,\r\n                `\\t<source>`,\r\n                `\\t\\t<database>Unspecified</database>`,\r\n                `\\t</source>`,\r\n                `\\t<size>`,\r\n                `\\t\\t<width>${image.width}</width>`,\r\n                `\\t\\t<height>${image.height}</height>`,\r\n                `\\t\\t<depth>3</depth>`,\r\n                `\\t</size>`,\r\n                labels,\r\n                `</annotation>`\r\n            ].join('\\n');\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n    private static exportAsCSV(): void {\r\n        const content: string = LabelsSelector.getImagesData()\r\n            .map((imageData: ImageData) => {\r\n                return RectLabelsExporter.wrapRectLabelsIntoCSV(imageData)})\r\n            .filter((imageLabelData: string) => {\r\n                return !!imageLabelData})\r\n            .join('\\n');\r\n        const fileName: string = `${ExporterUtil.getExportFileName()}.csv`;\r\n        ExporterUtil.saveAs(content, fileName);\r\n    }\r\n\r\n    private static wrapRectLabelsIntoCSV(imageData: ImageData): string {\r\n        if (imageData.labelRects.length === 0 || !imageData.loadStatus)\r\n            return null;\r\n\r\n        const image: HTMLImageElement = ImageRepository.getById(imageData.id);\r\n        const labelNames: LabelName[] = LabelsSelector.getLabelNames();\r\n        const labelRectsString: string[] = imageData.labelRects.map((labelRect: LabelRect) => {\r\n            const labelName: LabelName = findLast(labelNames, {id: labelRect.labelId});\r\n            const labelFields = !!labelName ? [\r\n                labelName.name,\r\n                Math.round(labelRect.rect.x).toString(),\r\n                Math.round(labelRect.rect.y).toString(),\r\n                Math.round(labelRect.rect.width).toString(),\r\n                Math.round(labelRect.rect.height).toString(),\r\n                imageData.fileData.name,\r\n                image.width.toString(),\r\n                image.height.toString()\r\n            ] : [];\r\n            return labelFields.join(',')\r\n        });\r\n        return labelRectsString.join('\\n');\r\n    }\r\n}\r\n","import {ImageData, LabelName, LabelPolygon} from \"../../../store/labels/types\";\r\nimport {VGGFileData, VGGObject, VGGPolygon, VGGRegionsData} from \"../../../data/labels/VGG\";\r\nimport {findLast} from \"lodash\";\r\nimport {IPoint} from \"../../../interfaces/IPoint\";\r\nimport {LabelsSelector} from \"../../../store/selectors/LabelsSelector\";\r\nimport {ExporterUtil} from \"../../../utils/ExporterUtil\";\r\n\r\nexport class VGGExporter {\r\n    public static export(): void {\r\n        const imagesData: ImageData[] = LabelsSelector.getImagesData();\r\n        const labelNames: LabelName[] = LabelsSelector.getLabelNames();\r\n        const content: string = JSON.stringify(VGGExporter.mapImagesDataToVGGObject(imagesData, labelNames));\r\n        const fileName: string = `${ExporterUtil.getExportFileName()}.json`;\r\n        ExporterUtil.saveAs(content, fileName);\r\n    }\r\n\r\n    private static mapImagesDataToVGGObject(imagesData: ImageData[], labelNames: LabelName[]): VGGObject {\r\n        return imagesData.reduce((data: VGGObject, image: ImageData) => {\r\n            const fileData: VGGFileData = VGGExporter.mapImageDataToVGGFileData(image, labelNames);\r\n            if (!!fileData) {\r\n                data[image.fileData.name] = fileData\r\n            }\r\n            return data;\r\n        }, {});\r\n    }\r\n\r\n    private static mapImageDataToVGGFileData(imageData: ImageData, labelNames: LabelName[]): VGGFileData {\r\n        const regionsData: VGGRegionsData = VGGExporter.mapImageDataToVGG(imageData, labelNames);\r\n        if (!regionsData) return null;\r\n        return {\r\n            fileref: \"\",\r\n            size: imageData.fileData.size,\r\n            filename: imageData.fileData.name,\r\n            base64_img_data: \"\",\r\n            file_attributes: {},\r\n            regions: regionsData\r\n        }\r\n    }\r\n\r\n    public static mapImageDataToVGG(imageData: ImageData, labelNames: LabelName[]): VGGRegionsData {\r\n        if (!imageData.loadStatus || !imageData.labelPolygons || !imageData.labelPolygons.length ||\r\n            !labelNames || !labelNames.length) return null;\r\n\r\n        const validLabels: LabelPolygon[] = VGGExporter.getValidPolygonLabels(imageData);\r\n\r\n        if (!validLabels.length) return null;\r\n\r\n        return validLabels.reduce((data: VGGRegionsData, label: LabelPolygon, index: number) => {\r\n            const labelName: LabelName = findLast(labelNames, {id: label.labelId});\r\n            if (!!labelName) {\r\n                data[index.toString()] = {\r\n                    shape_attributes: VGGExporter.mapPolygonToVGG(label.vertices),\r\n                    region_attributes: {\r\n                        label: labelName.name\r\n                    }\r\n                };\r\n            }\r\n            return data;\r\n        }, {})\r\n    }\r\n\r\n    public static getValidPolygonLabels(imageData: ImageData): LabelPolygon[] {\r\n        return imageData.labelPolygons.filter((label: LabelPolygon) =>\r\n            label.labelId !== null && !!label.vertices.length);\r\n    }\r\n\r\n    public static mapPolygonToVGG(path: IPoint[]): VGGPolygon {\r\n        if (!path || !path.length) return null;\r\n\r\n        const all_points_x: number[] = path.map((point: IPoint) => point.x).concat(path[0].x);\r\n        const all_points_y: number[] = path.map((point: IPoint) => point.y).concat(path[0].y);\r\n        return {\r\n            name: \"polygon\",\r\n            all_points_x,\r\n            all_points_y\r\n        }\r\n    }\r\n}","import {ImageData, LabelName, LabelPolygon} from \"../../../store/labels/types\";\r\nimport {LabelsSelector} from \"../../../store/selectors/LabelsSelector\";\r\nimport {GeneralSelector} from \"../../../store/selectors/GeneralSelector\";\r\nimport {ImageRepository} from \"../../imageRepository/ImageRepository\";\r\nimport {ExporterUtil} from \"../../../utils/ExporterUtil\";\r\nimport {\r\n    COCOAnnotation, COCOBBox,\r\n    COCOCategory,\r\n    COCOImage,\r\n    COCOInfo,\r\n    COCOObject,\r\n    COCOSegmentation\r\n} from \"../../../data/labels/COCO\";\r\nimport {flatten} from \"lodash\";\r\nimport {IPoint} from \"../../../interfaces/IPoint\";\r\n\r\nexport type LabelDataMap = { [key: string]: number; }\r\n\r\nexport class COCOExporter {\r\n    public static export(): void {\r\n        const imagesData: ImageData[] = LabelsSelector.getImagesData();\r\n        const labelNames: LabelName[] = LabelsSelector.getLabelNames();\r\n        const projectName: string = GeneralSelector.getProjectName();\r\n        const COCOObject: COCOObject = COCOExporter.mapImagesDataToCOCOObject(imagesData, labelNames, projectName);\r\n        const content: string = JSON.stringify(COCOObject);\r\n        const fileName: string = `${ExporterUtil.getExportFileName()}.json`;\r\n        ExporterUtil.saveAs(content, fileName);\r\n    }\r\n\r\n    private static mapImagesDataToCOCOObject(\r\n        imagesData: ImageData[],\r\n        labelNames: LabelName[],\r\n        projectName: string\r\n    ): COCOObject {\r\n        return {\r\n            \"info\": COCOExporter.getInfoComponent(projectName),\r\n            \"images\": COCOExporter.getImagesComponent(imagesData),\r\n            \"annotations\": COCOExporter.getAnnotationsComponent(imagesData, labelNames),\r\n            \"categories\":COCOExporter.getCategoriesComponent(labelNames)\r\n        }\r\n    }\r\n\r\n    public static getInfoComponent(description: string): COCOInfo {\r\n        return {\r\n            \"description\": description\r\n        }\r\n    }\r\n\r\n    public static getCategoriesComponent(labelNames: LabelName[]): COCOCategory[] {\r\n        return labelNames.map((labelName: LabelName, index: number) => {\r\n            return {\r\n                \"id\": index + 1,\r\n                \"name\": labelName.name\r\n            }\r\n        })\r\n    }\r\n\r\n    public static getImagesComponent(imagesData: ImageData[]): COCOImage[] {\r\n        return imagesData\r\n            .filter((imagesData: ImageData) => imagesData.loadStatus)\r\n            .filter((imagesData: ImageData) => imagesData.labelPolygons.length !== 0)\r\n            .map((imageData: ImageData, index: number) => {\r\n                const image: HTMLImageElement = ImageRepository.getById(imageData.id);\r\n                return {\r\n                    \"id\": index + 1,\r\n                    \"width\": image.width,\r\n                    \"height\": image.height,\r\n                    \"file_name\": imageData.fileData.name\r\n                }\r\n            })\r\n    }\r\n\r\n    public static getAnnotationsComponent(imagesData: ImageData[], labelNames: LabelName[]): COCOAnnotation[] {\r\n        const labelsMap: LabelDataMap = COCOExporter.mapLabelsData(labelNames);\r\n        let id = 0;\r\n        const annotations: COCOAnnotation[][] = imagesData\r\n            .filter((imagesData: ImageData) => imagesData.loadStatus)\r\n            .filter((imagesData: ImageData) => imagesData.labelPolygons.length !== 0)\r\n            .map((imageData: ImageData, index: number) => {\r\n                return imageData.labelPolygons.map((labelPolygon: LabelPolygon) => {\r\n                    return {\r\n                        \"id\": id++,\r\n                        \"iscrowd\": 0,\r\n                        \"image_id\": index + 1,\r\n                        \"category_id\": labelsMap[labelPolygon.labelId],\r\n                        \"segmentation\": COCOExporter.getCOCOSegmentation(labelPolygon.vertices),\r\n                        \"bbox\": COCOExporter.getCOCOBbox(labelPolygon.vertices),\r\n                        \"area\": COCOExporter.getCOCOArea(labelPolygon.vertices)\r\n                    }\r\n                })\r\n            })\r\n        return flatten(annotations);\r\n    }\r\n\r\n    public static mapLabelsData(labelNames: LabelName[]): LabelDataMap {\r\n        return labelNames.reduce((data: LabelDataMap, label: LabelName, index: number) => {\r\n            data[label.id] = index + 1;\r\n            return data;\r\n        }, {})\r\n    }\r\n\r\n    public static getCOCOSegmentation(vertices: IPoint[]): COCOSegmentation {\r\n        const points: number[][] = vertices.map((point: IPoint) => [point.x, point.y]);\r\n        return [flatten(points)];\r\n    }\r\n\r\n    public static getCOCOBbox(vertices: IPoint[]): COCOBBox {\r\n        let xMin: number = vertices[0].x;\r\n        let xMax: number = vertices[0].x;\r\n        let yMin: number = vertices[0].y;\r\n        let yMax: number = vertices[0].y;\r\n        for (const vertex of vertices){\r\n            if (xMin > vertex.x) xMin = vertex.x;\r\n            if (xMax < vertex.x) xMax = vertex.x;\r\n            if (yMin > vertex.y) yMin = vertex.y;\r\n            if (yMax < vertex.y) yMax = vertex.y;\r\n        }\r\n        return [xMin, yMin, xMax - xMin, yMax - yMin];\r\n    }\r\n\r\n    public static getCOCOArea(vertices: IPoint[]): number {\r\n        let area = 0;\r\n        let j = vertices.length - 1;\r\n        for (let  i = 0; i < vertices.length; i++) {\r\n            area += (vertices[j].x + vertices[i].x) * (vertices[j].y - vertices[i].y);\r\n            j = i;\r\n        }\r\n        return Math.abs(area/2);\r\n    }\r\n}","import {AnnotationFormatType} from \"../../../data/enums/AnnotationFormatType\";\r\nimport {VGGExporter} from \"./VGGExporter\";\r\nimport {COCOExporter} from \"./COCOExporter\";\r\n\r\nexport class PolygonLabelsExporter {\r\n    public static export(exportFormatType: AnnotationFormatType): void {\r\n        switch (exportFormatType) {\r\n            case AnnotationFormatType.VGG:\r\n                VGGExporter.export();\r\n                break;\r\n            case AnnotationFormatType.COCO:\r\n                COCOExporter.export();\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n}","import {ILabelFormatData} from '../interfaces/ILabelFormatData';\r\nimport {LabelType} from './enums/LabelType';\r\nimport {AnnotationFormatType} from './enums/AnnotationFormatType';\r\n\r\nexport type ExportFormatDataMap = Record<LabelType, ILabelFormatData[]>;\r\n\r\nexport const ExportFormatData: ExportFormatDataMap = {\r\n    [LabelType.RECT]: [\r\n        {\r\n            type: AnnotationFormatType.YOLO,\r\n            label: 'YOLO format.'\r\n        },\r\n        // {\r\n        //     type: AnnotationFormatType.VOC,\r\n        //     label: 'A .zip package containing files in VOC XML format.'\r\n        // },\r\n        // {\r\n        //     type: AnnotationFormatType.CSV,\r\n        //     label: 'Single CSV file.'\r\n        // }\r\n    ],\r\n    [LabelType.POINT]: [\r\n        {\r\n            type: AnnotationFormatType.CSV,\r\n            label: 'Single CSV file.'\r\n        }\r\n    ],\r\n    [LabelType.LINE]: [\r\n        {\r\n            type: AnnotationFormatType.CSV,\r\n            label: 'Single CSV file.'\r\n        }\r\n    ],\r\n    [LabelType.POLYGON]: [\r\n        // {\r\n        //     type: AnnotationFormatType.VGG,\r\n        //     label: 'Single file in VGG JSON format.'\r\n        // },\r\n        {\r\n            type: AnnotationFormatType.COCO,\r\n            label: 'COCO JSON format.'\r\n        }\r\n    ],\r\n    [LabelType.IMAGE_RECOGNITION]: [\r\n        {\r\n            type: AnnotationFormatType.CSV,\r\n            label: 'Single CSV file.'\r\n        },\r\n        {\r\n            type: AnnotationFormatType.JSON,\r\n            label: 'Single JSON file.'\r\n        }\r\n    ]\r\n}\r\n","import React, {useState} from 'react'\r\nimport './ExportLabelPopup.scss'\r\nimport {AnnotationFormatType} from '../../../data/enums/AnnotationFormatType';\r\nimport {RectLabelsExporter} from '../../../logic/export/RectLabelsExporter';\r\nimport {LabelType} from '../../../data/enums/LabelType';\r\nimport {ILabelFormatData} from '../../../interfaces/ILabelFormatData';\r\nimport {PointLabelsExporter} from '../../../logic/export/PointLabelsExport';\r\nimport {PolygonLabelsExporter} from '../../../logic/export/polygon/PolygonLabelsExporter';\r\nimport {PopupActions} from '../../../logic/actions/PopupActions';\r\nimport {LineLabelsExporter} from '../../../logic/export/LineLabelExport';\r\nimport {TagLabelsExporter} from '../../../logic/export/TagLabelsExport';\r\nimport GenericLabelTypePopup from '../GenericLabelTypePopup/GenericLabelTypePopup';\r\nimport {ExportFormatData} from '../../../data/ExportFormatData';\r\nimport {AppState} from '../../../store';\r\nimport {connect} from 'react-redux';\r\n\r\ninterface IProps {\r\n    activeLabelType: LabelType,\r\n}\r\n\r\nconst ExportLabelPopup: React.FC <IProps> = ({activeLabelType}) => {\r\n    const [labelType, setLabelType] = useState(activeLabelType);\r\n    const [exportFormatType, setExportFormatType] = useState(null);\r\n\r\n    const onAccept = (labelType: LabelType) => {\r\n        switch (labelType) {\r\n            case LabelType.RECT:\r\n                RectLabelsExporter.export(exportFormatType);\r\n                break;\r\n            // case LabelType.POINT:\r\n            //     PointLabelsExporter.export(exportFormatType);\r\n            //     break;\r\n            // case LabelType.LINE:\r\n            //     LineLabelsExporter.export(exportFormatType);\r\n            //     break;\r\n            case LabelType.POLYGON:\r\n                PolygonLabelsExporter.export(exportFormatType);\r\n                break;\r\n            // case LabelType.IMAGE_RECOGNITION:\r\n            //     TagLabelsExporter.export(exportFormatType);\r\n            //     break;\r\n        }\r\n        PopupActions.close();\r\n    };\r\n\r\n    const onReject = (labelType: LabelType) => {\r\n        PopupActions.close();\r\n    };\r\n\r\n    const onSelect = (exportFormatType: AnnotationFormatType) => {\r\n        setExportFormatType(exportFormatType);\r\n    };\r\n\r\n    const getOptions = (exportFormatData: ILabelFormatData[]) => {\r\n        return exportFormatData.map((entry: ILabelFormatData) => {\r\n            return <div\r\n                className='OptionsItem'\r\n                onClick={() => onSelect(entry.type)}\r\n                key={entry.type}\r\n            >\r\n                {entry.type === exportFormatType ?\r\n                    <img\r\n                        draggable={false}\r\n                        src={'ico/checkbox-checked.png'}\r\n                        alt={'checked'}\r\n                    /> :\r\n                    <img\r\n                        draggable={false}\r\n                        src={'ico/checkbox-unchecked.png'}\r\n                        alt={'unchecked'}\r\n                    />}\r\n                {entry.label}\r\n            </div>\r\n        })\r\n    };\r\n\r\n    const renderInternalContent = (labelType: LabelType) => {\r\n        return [\r\n            <div className='Message'>\r\n                Select label type and the file format you would like to use to export labels.\r\n            </div>,\r\n            <div className='Options'>\r\n                {getOptions(ExportFormatData[labelType])}\r\n            </div>\r\n        ]\r\n    }\r\n\r\n    const onLabelTypeChange = (labelType: LabelType) => {\r\n        setLabelType(labelType);\r\n        setExportFormatType(null);\r\n    }\r\n\r\n    return(\r\n        <GenericLabelTypePopup\r\n            activeLabelType={labelType}\r\n            title={`Export ${labelType.toLowerCase()} annotations`}\r\n            onLabelTypeChange={onLabelTypeChange}\r\n            acceptLabel={'Export'}\r\n            onAccept={onAccept}\r\n            disableAcceptButton={!exportFormatType}\r\n            rejectLabel={'Cancel'}\r\n            onReject={onReject}\r\n            renderInternalContent={renderInternalContent}\r\n        />\r\n    )\r\n};\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    activeLabelType: state.labels.activeLabelType,\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(ExportLabelPopup);","import React from 'react';\r\nimport './PopupView.scss';\r\nimport { PopupWindowType } from \"../../data/enums/PopupWindowType\";\r\nimport { AppState } from \"../../store\";\r\nimport { connect } from \"react-redux\";\r\nimport LoadLabelsPopup from \"./LoadLabelNamesPopup/LoadLabelNamesPopup\";\r\nimport InsertLabelNamesPopup from \"./InsertLabelNamesPopup/InsertLabelNamesPopup\";\r\nimport ExitProjectPopup from \"./ExitProjectPopup/ExitProjectPopup\";\r\nimport LoadMoreImagesPopup from \"./LoadMoreImagesPopup/LoadMoreImagesPopup\";\r\nimport { LoadModelPopup } from \"./LoadModelPopup/LoadModelPopup\";\r\nimport SuggestLabelNamesPopup from \"./SuggestLabelNamesPopup/SuggestLabelNamesPopup\";\r\nimport { CSSHelper } from \"../../logic/helpers/CSSHelper\";\r\nimport { ClipLoader } from \"react-spinners\";\r\nimport ImportLabelPopup from \"./ImportLabelPopup/ImportLabelPopup\";\r\nimport ExportLabelPopup from \"./ExportLabelsPopup/ExportLabelPopup\";\r\n\r\ninterface IProps {\r\n    activePopupType: PopupWindowType;\r\n}\r\n\r\nconst PopupView: React.FC<IProps> = ({ activePopupType }) => {\r\n\r\n    const selectPopup = () => {\r\n        switch (activePopupType) {\r\n            case PopupWindowType.LOAD_LABEL_NAMES:\r\n                return <LoadLabelsPopup />;\r\n            case PopupWindowType.EXPORT_ANNOTATIONS:\r\n                return <ExportLabelPopup />;\r\n            case PopupWindowType.IMPORT_ANNOTATIONS:\r\n                return <ImportLabelPopup />;\r\n            case PopupWindowType.INSERT_LABEL_NAMES:\r\n                return <InsertLabelNamesPopup\r\n                    isUpdate={false}\r\n                />;\r\n            case PopupWindowType.UPDATE_LABEL:\r\n                return <InsertLabelNamesPopup\r\n                    isUpdate={true}\r\n                />;\r\n            case PopupWindowType.EXIT_PROJECT:\r\n                return <ExitProjectPopup />;\r\n            case PopupWindowType.IMPORT_IMAGES:\r\n                return <LoadMoreImagesPopup />;\r\n            case PopupWindowType.LOAD_AI_MODEL:\r\n                return <LoadModelPopup />;\r\n            case PopupWindowType.SUGGEST_LABEL_NAMES:\r\n                return <SuggestLabelNamesPopup />;\r\n            case PopupWindowType.LOADER:\r\n                return <ClipLoader\r\n                    size={50}\r\n                    color={CSSHelper.getLeadingColor()}\r\n                    loading={true}\r\n                />;\r\n            default:\r\n                return null;\r\n        }\r\n    };\r\n\r\n    return (\r\n        activePopupType && <div className=\"PopupView\">\r\n            {selectPopup()}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    activePopupType: state.general.activePopupType\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps\r\n)(PopupView);","import {Settings} from '../../settings/Settings';\r\n\r\nexport interface ISocialMedia {\r\n    displayName:string;\r\n    imageSrc:string;\r\n    imageAlt:string;\r\n    href:string;\r\n    tooltipMessage:string;\r\n}\r\n\r\nexport const SocialMediaData: ISocialMedia[] = [\r\n    {\r\n        displayName: 'Github',\r\n        imageSrc: '/ico/github-logo.png',\r\n        imageAlt: 'GitHub Logo',\r\n        href: Settings.GITHUB_URL,\r\n        tooltipMessage: 'Show me some love on GitHub',\r\n    },\r\n    {\r\n        displayName: 'Medium',\r\n        imageSrc: '/ico/medium-logo.png',\r\n        imageAlt: 'Medium Logo',\r\n        href: Settings.MEDIUM_URL,\r\n        tooltipMessage: 'Read my AI content on Medium',\r\n    },\r\n    {\r\n        displayName: 'Patreon',\r\n        imageSrc: '/ico/patreon-logo.png',\r\n        imageAlt: 'Patreon Logo',\r\n        href: Settings.PATREON_URL,\r\n        tooltipMessage: 'Support Make Sense on Patreon and help it grow'\r\n    },\r\n];\r\n","import React, {useState} from 'react';\r\nimport './MobileMainView.scss';\r\nimport Scrollbars from 'react-custom-scrollbars';\r\nimport {ISize} from \"../../interfaces/ISize\";\r\nimport {AppState} from \"../../store\";\r\nimport {connect} from \"react-redux\";\r\nimport classNames from 'classnames'\r\nimport {EditorFeatureData, IEditorFeature} from \"../../data/info/EditorFeatureData\";\r\nimport {ISocialMedia, SocialMediaData} from \"../../data/info/SocialMediaData\";\r\nimport {ImageButton} from \"../Common/ImageButton/ImageButton\";\r\n\r\ninterface IProps {\r\n    size: ISize;\r\n}\r\n\r\nconst MobileMainView: React.FC<IProps> = ({size}) => {\r\n    const scrollPositionThreshold: number = 350;\r\n    const [scrollPosition, setScrollPosition] = useState(0);\r\n\r\n    const getClassName = () => {\r\n        return classNames('MobileTopNavigationBar', {\r\n            Hide: scrollPosition < scrollPositionThreshold,\r\n            Show: scrollPosition >= scrollPositionThreshold,\r\n        })\r\n    };\r\n\r\n    const onScroll = (value) => {\r\n        setScrollPosition(value.scrollTop);\r\n    };\r\n\r\n    const getEditorFeatureTiles = (features: IEditorFeature[]) => {\r\n        return features.map((data:IEditorFeature) => {\r\n            return <div\r\n                className=\"EditorFeaturesTiles\"\r\n                key={data.displayText}\r\n            >\r\n                <div\r\n                    className=\"EditorFeaturesTilesWrapper\"\r\n                >\r\n                    <img\r\n                        draggable={false}\r\n                        alt={data.imageAlt}\r\n                        src={data.imageSrc}\r\n                    />\r\n                    <div className=\"EditorFeatureLabel\">\r\n                        {data.displayText}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        });\r\n    };\r\n\r\n    const getSocialMediaButtons = (size:ISize) => {\r\n        return SocialMediaData.map((data:ISocialMedia, index: number) => {\r\n            return <ImageButton\r\n                key={index}\r\n                buttonSize={size}\r\n                image={data.imageSrc}\r\n                imageAlt={data.imageAlt}\r\n                href={data.href}\r\n            />\r\n        });\r\n    };\r\n\r\n    const topNavigationBar = <div className={getClassName()}>\r\n        <div className=\"NavigationBarGroupWrapper\">\r\n            <div className=\"Header\">\r\n                <img\r\n                    draggable={false}\r\n                    alt={\"make-sense\"}\r\n                    src={\"/make-sense-ico-transparent.png\"}\r\n                />\r\n                Make Sense\r\n            </div>\r\n        </div>\r\n        <div className=\"TriangleHorizontal Bottom\">\r\n            <div className=\"TriangleHorizontalContent\"/>\r\n        </div>\r\n    </div>;\r\n\r\n    const firstStage = <div className=\"FirstStage\">\r\n        <img\r\n            draggable={false}\r\n            alt={\"main-logo\"}\r\n            src={\"ico/main-image-color.png\"}\r\n        />\r\n        <div className=\"TriangleHorizontal Bottom\">\r\n            <div className=\"TriangleHorizontalContent\"/>\r\n        </div>\r\n    </div>;\r\n\r\n    const secondStage = <div className=\"SecondStage\">\r\n        {getEditorFeatureTiles(EditorFeatureData.slice(0, 3))}\r\n    </div>;\r\n\r\n    const thirdStage = <div className=\"ThirdStage\">\r\n        {getEditorFeatureTiles(EditorFeatureData.slice(3, 6))}\r\n        <div className=\"TriangleHorizontal Top\">\r\n            <div className=\"TriangleHorizontalContent\"/>\r\n        </div>\r\n        <div className=\"TriangleHorizontal Bottom\">\r\n            <div className=\"TriangleHorizontalContent\"/>\r\n        </div>\r\n    </div>;\r\n\r\n    const fourthStage = <div className=\"FourthStage\">\r\n        <div className=\"Message\">\r\n            Due to the small size of the screen we do not support our editor on mobile devices. Check what you missed and visit us from a desktop.\r\n        </div>\r\n        <div className=\"SocialMediaWrapper\">\r\n            {getSocialMediaButtons({width: 40, height: 40})}\r\n        </div>\r\n    </div>;\r\n\r\n    return(<div className=\"MobileMainView\">\r\n        {topNavigationBar}\r\n        <Scrollbars\r\n            onScrollFrame={onScroll}\r\n        >\r\n            <div\r\n                className=\"MobileMainViewContent\"\r\n                style={{width: size.width}}\r\n            >\r\n                {firstStage}\r\n                {secondStage}\r\n                {thirdStage}\r\n                {fourthStage}\r\n            </div>\r\n        </Scrollbars>\r\n    </div>)\r\n};\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    size: state.general.windowSize\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(MobileMainView);","import React from 'react';\r\nimport './SizeItUpView.scss';\r\nimport {Settings} from \"../../settings/Settings\";\r\n\r\nexport const SizeItUpView: React.FC = () => {\r\n    return(<div className=\"SizeItUpView\">\r\n        <p className=\"extraBold\">Ops... This window is to tight for me!</p>\r\n        <img\r\n            draggable={false}\r\n            alt={\"small_window\"}\r\n            src={\"ico/small_window.png\"}\r\n        />\r\n        <p className=\"extraBold\">Please... make it at least {Settings.EDITOR_MIN_WIDTH} x {Settings.EDITOR_MIN_HEIGHT} px.</p>\r\n    </div>)\r\n};","import React from 'react';\r\nimport './App.scss';\r\nimport EditorView from './views/EditorView/EditorView';\r\nimport MainView from './views/MainView/MainView';\r\nimport {ProjectType} from './data/enums/ProjectType';\r\nimport {AppState} from './store';\r\nimport {connect} from 'react-redux';\r\nimport PopupView from './views/PopupView/PopupView';\r\nimport MobileMainView from './views/MobileMainView/MobileMainView';\r\nimport {ISize} from './interfaces/ISize';\r\nimport {Settings} from './settings/Settings';\r\nimport {SizeItUpView} from './views/SizeItUpView/SizeItUpView';\r\nimport {PlatformModel} from './staticModels/PlatformModel';\r\nimport classNames from 'classnames';\r\nimport NotificationsView from './views/NotificationsView/NotificationsView';\r\n\r\ninterface IProps {\r\n    projectType: ProjectType;\r\n    windowSize: ISize;\r\n    FormDetectionLoaded: boolean;\r\n    MaskDetectionLoaded: boolean;\r\n\r\n}\r\n\r\nconst App: React.FC<IProps> = ({projectType, windowSize, FormDetectionLoaded, MaskDetectionLoaded}) => {\r\n    const selectRoute = () => {\r\n        if (!!PlatformModel.mobileDeviceData.manufacturer && !!PlatformModel.mobileDeviceData.os)\r\n            return <MobileMainView/>;\r\n        if (!projectType)\r\n            return <MainView/>;\r\n        else {\r\n            if (windowSize.height < Settings.EDITOR_MIN_HEIGHT || windowSize.width < Settings.EDITOR_MIN_WIDTH) {\r\n                return <SizeItUpView/>;\r\n            } else {\r\n                return <EditorView/>;\r\n            }\r\n        }\r\n    };\r\n\r\n      return (\r\n        <div className={classNames('App', {'AI': MaskDetectionLoaded  || FormDetectionLoaded})}\r\n            draggable={false}\r\n        >\r\n            {selectRoute()}\r\n            <PopupView/>\r\n            <NotificationsView/>\r\n        </div>\r\n      );\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    projectType: state.general.projectData.type,\r\n    windowSize: state.general.windowSize,\r\n    FormDetectionLoaded: state.ai.isFormDetectorLoaded,\r\n    MaskDetectionLoaded: state.ai.isMaskDetectorLoaded\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps\r\n)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {LabelsActionTypes, LabelsState, ImageData} from './types';\r\nimport {Action} from '../Actions';\r\n\r\nconst initialState: LabelsState = {\r\n    activeImageIndex: null,\r\n    activeLabelNameId: null,\r\n    activeLabelType: null,\r\n    activeLabelId: null,\r\n    highlightedLabelId: null,\r\n    imagesData: [],\r\n    firstLabelCreatedFlag: false,\r\n    labels: []\r\n};\r\n\r\nexport function labelsReducer(\r\n    state = initialState,\r\n    action: LabelsActionTypes\r\n): LabelsState {\r\n    switch (action.type) {\r\n        case Action.UPDATE_ACTIVE_IMAGE_INDEX: {\r\n            return {\r\n                ...state,\r\n                activeImageIndex: action.payload.activeImageIndex\r\n            }\r\n        }\r\n        case Action.UPDATE_ACTIVE_LABEL_NAME_ID: {\r\n            return {\r\n                ...state,\r\n                activeLabelNameId: action.payload.activeLabelNameId\r\n            }\r\n        }\r\n        case Action.UPDATE_ACTIVE_LABEL_ID: {\r\n            return {\r\n                ...state,\r\n                activeLabelId: action.payload.activeLabelId\r\n            }\r\n        }\r\n        case Action.UPDATE_HIGHLIGHTED_LABEL_ID: {\r\n            return {\r\n                ...state,\r\n                highlightedLabelId: action.payload.highlightedLabelId\r\n            }\r\n        }\r\n        case Action.UPDATE_ACTIVE_LABEL_TYPE: {\r\n            return {\r\n                ...state,\r\n                activeLabelType: action.payload.activeLabelType\r\n            }\r\n        }\r\n        case Action.UPDATE_IMAGE_DATA_BY_ID: {\r\n            return {\r\n                ...state,\r\n                imagesData: state.imagesData.map((imageData: ImageData) =>\r\n                    imageData.id === action.payload.id ? action.payload.newImageData : imageData\r\n                )\r\n            }\r\n        }\r\n        case Action.ADD_IMAGES_DATA: {\r\n            return {\r\n                ...state,\r\n                imagesData: state.imagesData.concat(action.payload.imageData)\r\n            }\r\n        }\r\n        case Action.UPDATE_IMAGES_DATA: {\r\n            return {\r\n                ...state,\r\n                imagesData: action.payload.imageData\r\n            }\r\n        }\r\n        case Action.UPDATE_LABEL_NAMES: {\r\n            return {\r\n                ...state,\r\n                labels: action.payload.labels\r\n            }\r\n        }\r\n        case Action.UPDATE_FIRST_LABEL_CREATED_FLAG: {\r\n            return {\r\n                ...state,\r\n                firstLabelCreatedFlag: action.payload.firstLabelCreatedFlag\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import {GeneralActionTypes, GeneralState} from './types';\r\nimport {Action} from '../Actions';\r\nimport {CustomCursorStyle} from '../../data/enums/CustomCursorStyle';\r\nimport {ViewPointSettings} from '../../settings/ViewPointSettings';\r\n\r\nconst initialState: GeneralState = {\r\n    windowSize: null,\r\n    activePopupType: null,\r\n    customCursorStyle: CustomCursorStyle.DEFAULT,\r\n    activeContext: null,\r\n    preventCustomCursor: false,\r\n    imageDragMode: false,\r\n    crossHairVisible: true,\r\n    enablePerClassColoration: true,\r\n    projectData: {\r\n        type: null,\r\n        name: 'my-project-name',\r\n    },\r\n    zoom: ViewPointSettings.MIN_ZOOM\r\n};\r\n\r\nexport function generalReducer(\r\n    state = initialState,\r\n    action: GeneralActionTypes\r\n): GeneralState {\r\n    switch (action.type) {\r\n        case Action.UPDATE_WINDOW_SIZE: {\r\n            return {\r\n                ...state,\r\n                windowSize: action.payload.windowSize\r\n            }\r\n        }\r\n        case Action.UPDATE_ACTIVE_POPUP_TYPE: {\r\n            return {\r\n                ...state,\r\n                activePopupType: action.payload.activePopupType\r\n            }\r\n        }\r\n        case Action.UPDATE_CUSTOM_CURSOR_STYLE: {\r\n            return {\r\n                ...state,\r\n                customCursorStyle: action.payload.customCursorStyle\r\n            }\r\n        }\r\n        case Action.UPDATE_CONTEXT: {\r\n            return {\r\n                ...state,\r\n                activeContext: action.payload.activeContext\r\n            }\r\n        }\r\n        case Action.UPDATE_PREVENT_CUSTOM_CURSOR_STATUS: {\r\n            return {\r\n                ...state,\r\n                preventCustomCursor: action.payload.preventCustomCursor\r\n            }\r\n        }\r\n        case Action.UPDATE_IMAGE_DRAG_MODE_STATUS: {\r\n            return {\r\n                ...state,\r\n                imageDragMode: action.payload.imageDragMode\r\n            }\r\n        }\r\n        case Action.UPDATE_CROSS_HAIR_VISIBLE_STATUS: {\r\n            return {\r\n                ...state,\r\n                crossHairVisible: action.payload.crossHairVisible\r\n            }\r\n        }\r\n        case Action.UPDATE_PROJECT_DATA: {\r\n            return {\r\n                ...state,\r\n                projectData: action.payload.projectData\r\n            }\r\n        }\r\n        case Action.UPDATE_ZOOM: {\r\n            return {\r\n                ...state,\r\n                zoom: action.payload.zoom\r\n            }\r\n        }\r\n        case Action.UPDATE_ENABLE_PER_CLASS_COLORATION_STATUS: {\r\n            return {\r\n                ...state,\r\n                enablePerClassColoration: action.payload.enablePerClassColoration\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import {AIActionTypes, AIState} from './types';\r\nimport {Action} from '../Actions';\r\n\r\nconst initialState: AIState = {\r\n    suggestedLabelList: [],\r\n    rejectedSuggestedLabelList: [],\r\n    isObjectDetectorLoaded: false,\r\n    isPoseDetectorLoaded: false,\r\n    isFormDetectorLoaded: false,\r\n    isMaskDetectorLoaded: false,\r\n    isAIDisabled: false\r\n};\r\n\r\nexport function aiReducer(\r\n    state = initialState,\r\n    action: AIActionTypes\r\n): AIState {\r\n    switch (action.type) {\r\n        case Action.UPDATE_SUGGESTED_LABEL_LIST: {\r\n            return {\r\n                ...state,\r\n                suggestedLabelList: action.payload.labelList\r\n            }\r\n        }\r\n        case Action.UPDATE_REJECTED_SUGGESTED_LABEL_LIST: {\r\n            return {\r\n                ...state,\r\n                rejectedSuggestedLabelList: action.payload.labelList\r\n            }\r\n        }\r\n        case Action.UPDATE_OBJECT_DETECTOR_STATUS: {\r\n            return {\r\n                ...state,\r\n                isObjectDetectorLoaded: action.payload.isObjectDetectorLoaded\r\n            }\r\n        }\r\n        case Action.UPDATE_POSE_DETECTOR_STATUS: {\r\n            return {\r\n                ...state,\r\n                isPoseDetectorLoaded: action.payload.isPoseDetectorLoaded\r\n            }\r\n        }\r\n        case Action.UPDATE_FORM_DETECTOR_STATUS: {\r\n            return {\r\n                ...state,\r\n                isFormDetectorLoaded: action.payload.isFormDetectorLoaded\r\n            }\r\n        }\r\n        case Action.UPDATE_MASK_DETECTOR_STATUS: {\r\n            return {\r\n                ...state,\r\n                isMaskDetectorLoaded: action.payload.isMaskDetectorLoaded\r\n            }\r\n        }\r\n        case Action.UPDATE_DISABLED_AI_FLAG: {\r\n            return {\r\n                ...state,\r\n                isAIDisabled: action.payload.isAIDisabled\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import {INotification, NotificationsActionType, NotificationsState} from './types';\r\nimport {Action} from '../Actions';\r\n\r\nconst initialState: NotificationsState = {\r\n    queue: []\r\n}\r\n\r\nexport function notificationsReducer(\r\n    state = initialState,\r\n    action: NotificationsActionType\r\n): NotificationsState {\r\n    switch (action.type) {\r\n        case Action.SUBMIT_NEW_NOTIFICATION: {\r\n            return {\r\n                ...state,\r\n                queue: [...state.queue, action.payload.notification]\r\n            }\r\n        }\r\n        case Action.DELETE_NOTIFICATION_BY_ID: {\r\n            return {\r\n                ...state,\r\n                queue: state.queue\r\n                    .filter((message: INotification) => message.id !== action.payload.id)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport {labelsReducer} from './labels/reducer';\r\nimport {generalReducer} from './general/reducer';\r\nimport {aiReducer} from './ai/reducer';\r\nimport {notificationsReducer} from './notifications/reducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n    general: generalReducer,\r\n    labels: labelsReducer,\r\n    ai: aiReducer,\r\n    notifications: notificationsReducer\r\n});\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\n","export class EnvironmentUtil {\r\n    public static isDev(): boolean {\r\n        return process.env.NODE_ENV === 'development';\r\n    }\r\n\r\n    public static isProd(): boolean {\r\n        return process.env.NODE_ENV === 'production';\r\n    }\r\n}","import {updateWindowSize} from \"../../store/general/actionCreators\";\r\nimport {ContextManager} from \"../context/ContextManager\";\r\nimport {store} from \"../../index\";\r\nimport {PlatformUtil} from \"../../utils/PlatformUtil\";\r\nimport {PlatformModel} from \"../../staticModels/PlatformModel\";\r\nimport {EventType} from \"../../data/enums/EventType\";\r\nimport {GeneralSelector} from \"../../store/selectors/GeneralSelector\";\r\nimport {EnvironmentUtil} from \"../../utils/EnvironmentUtil\";\r\n\r\nexport class AppInitializer {\r\n    public static inti():void {\r\n        AppInitializer.handleResize();\r\n        AppInitializer.detectDeviceParams();\r\n        AppInitializer.handleAccidentalPageExit();\r\n        window.addEventListener(EventType.RESIZE, AppInitializer.handleResize);\r\n        window.addEventListener(EventType.MOUSE_WHEEL, AppInitializer.disableGenericScrollZoom,{passive:false});\r\n        window.addEventListener(EventType.KEY_DOWN, AppInitializer.disableUnwantedKeyBoardBehaviour);\r\n        window.addEventListener(EventType.KEY_PRESS, AppInitializer.disableUnwantedKeyBoardBehaviour);\r\n        ContextManager.init();\r\n    }\r\n\r\n    private static handleAccidentalPageExit = () => {\r\n        window.onbeforeunload = (event) => {\r\n            const projectType = GeneralSelector.getProjectType();\r\n            if (projectType != null && EnvironmentUtil.isProd()) {\r\n                event.preventDefault();\r\n                event.returnValue = '';\r\n            }\r\n        }\r\n    };\r\n\r\n    private static handleResize = () => {\r\n        store.dispatch(updateWindowSize({\r\n            width: window.innerWidth,\r\n            height: window.innerHeight\r\n        }));\r\n    };\r\n\r\n    private static disableUnwantedKeyBoardBehaviour = (event: KeyboardEvent) => {\r\n        if (PlatformModel.isMac && event.metaKey) {\r\n            event.preventDefault();\r\n        }\r\n\r\n        if ([\"=\", \"+\", \"-\"].includes(event.key)) {\r\n            if (event.ctrlKey || (PlatformModel.isMac && event.metaKey)) {\r\n                event.preventDefault();\r\n            }\r\n        }\r\n    };\r\n\r\n    private static disableGenericScrollZoom = (event: MouseEvent) => {\r\n        if (event.ctrlKey || (PlatformModel.isMac && event.metaKey)) {\r\n            event.preventDefault();\r\n        }\r\n    };\r\n\r\n    private static detectDeviceParams = () => {\r\n        const userAgent: string = window.navigator.userAgent;\r\n        PlatformModel.mobileDeviceData = PlatformUtil.getMobileDeviceData(userAgent);\r\n        PlatformModel.isMac = PlatformUtil.isMac(userAgent);\r\n        PlatformModel.isSafari = PlatformUtil.isSafari(userAgent);\r\n        PlatformModel.isFirefox = PlatformUtil.isFirefox(userAgent);\r\n    };\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport configureStore from './configureStore';\r\nimport {Provider} from 'react-redux';\r\nimport {AppInitializer} from './logic/initializer/AppInitializer';\r\n\r\n\r\nexport const store = configureStore();\r\nAppInitializer.inti();\r\n\r\nReactDOM.render(\r\n    (<Provider store={store}>\r\n        <App/>\r\n    </Provider>),\r\n    document.getElementById('root') || document.createElement('div') // fix for testing purposes\r\n);\r\n\r\nserviceWorker.unregister();\r\n","import { createStore } from 'redux';\r\nimport { rootReducer } from './store';\r\n\r\nexport default function configureStore() {\r\n    return createStore(\r\n        rootReducer,\r\n        // @ts-ignore\r\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n    );\r\n}"],"sourceRoot":""}